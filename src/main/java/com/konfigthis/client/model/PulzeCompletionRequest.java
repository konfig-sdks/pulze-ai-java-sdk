/*
 * Pulze.ai API
 * At Pulze it's our mission to supercharge today's workforce with AI to maximize the world's prosperity. We are doing so by enabling companies of any size to securely leverage Large Language Models (LLM) and easily build AI features into their apps. Our enterprise platform has access to all best in class LLMs and can route user requests to the most relevant model to get the highest quality response at the best price thanks to our smart meta model. End users can leverage pre-built applications, such as our Marketing AI product, or build custom apps on top of the Pulze Platform.  We are a VC Funded, early stage startup based in San Francisco.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.LLMModelPolicies;
import com.konfigthis.client.model.LLMModelWeights;
import com.konfigthis.client.model.RoleContentChatChoice;
import com.konfigthis.client.model.ToolFunction;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PulzeCompletionRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PulzeCompletionRequest {
  public static final String SERIALIZED_NAME_BEST_OF = "best_of";
  @SerializedName(SERIALIZED_NAME_BEST_OF)
  private Integer bestOf = 1;

  public static final String SERIALIZED_NAME_CONTEXT_WINDOW = "context_window";
  @SerializedName(SERIALIZED_NAME_CONTEXT_WINDOW)
  private Integer contextWindow;

  public static final String SERIALIZED_NAME_FALSE = "false";
  @SerializedName(SERIALIZED_NAME_FALSE)
  private Integer false = 1;

  public static final String SERIALIZED_NAME_FREQUENCY_PENALTY = "frequency_penalty";
  @SerializedName(SERIALIZED_NAME_FREQUENCY_PENALTY)
  private Double frequencyPenalty = 0d;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private Map<String, String> headers = null;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = null;

  public static final String SERIALIZED_NAME_LOGIT_BIAS = "logit_bias";
  @SerializedName(SERIALIZED_NAME_LOGIT_BIAS)
  private Object logitBias;

  public static final String SERIALIZED_NAME_LOGPROBS = "logprobs";
  @SerializedName(SERIALIZED_NAME_LOGPROBS)
  private Integer logprobs;

  public static final String SERIALIZED_NAME_MAX_TOKENS = "max_tokens";
  @SerializedName(SERIALIZED_NAME_MAX_TOKENS)
  private Integer maxTokens;

  public static final String SERIALIZED_NAME_MESSAGES = "messages";
  @SerializedName(SERIALIZED_NAME_MESSAGES)
  private List<RoleContentChatChoice> messages = null;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model = "pulze";

  public static final String SERIALIZED_NAME_POLICIES = "policies";
  @SerializedName(SERIALIZED_NAME_POLICIES)
  private LLMModelPolicies policies;

  public static final String SERIALIZED_NAME_PRESENCE_PENALTY = "presence_penalty";
  @SerializedName(SERIALIZED_NAME_PRESENCE_PENALTY)
  private Double presencePenalty = 0d;

  public static final String SERIALIZED_NAME_PROMPT = "prompt";
  @SerializedName(SERIALIZED_NAME_PROMPT)
  private Object prompt = null;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private String provider = "";

  public static final String SERIALIZED_NAME_STOP = "stop";
  @SerializedName(SERIALIZED_NAME_STOP)
  private Object stop = null;

  public static final String SERIALIZED_NAME_STREAM = "stream";
  @SerializedName(SERIALIZED_NAME_STREAM)
  private Boolean stream = false;

  public static final String SERIALIZED_NAME_SUFFIX = "suffix";
  @SerializedName(SERIALIZED_NAME_SUFFIX)
  private String suffix = "";

  public static final String SERIALIZED_NAME_TEMPERATURE = "temperature";
  @SerializedName(SERIALIZED_NAME_TEMPERATURE)
  private Double temperature = 1d;

  public static final String SERIALIZED_NAME_TOOL_CHOICE = "tool_choice";
  @SerializedName(SERIALIZED_NAME_TOOL_CHOICE)
  private Object toolChoice = null;

  public static final String SERIALIZED_NAME_TOOLS = "tools";
  @SerializedName(SERIALIZED_NAME_TOOLS)
  private List<ToolFunction> tools = null;

  public static final String SERIALIZED_NAME_TOP_P = "top_p";
  @SerializedName(SERIALIZED_NAME_TOP_P)
  private Double topP = 1d;

  public static final String SERIALIZED_NAME_WEIGHTS = "weights";
  @SerializedName(SERIALIZED_NAME_WEIGHTS)
  private LLMModelWeights weights;

  public PulzeCompletionRequest() {
  }

  public PulzeCompletionRequest bestOf(Integer bestOf) {
    
    
    
    
    this.bestOf = bestOf;
    return this;
  }

   /**
   * The number of responses to _generate_. Out of those, it will return the best &#x60;n&#x60;.
   * @return bestOf
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "The number of responses to _generate_. Out of those, it will return the best `n`.")

  public Integer getBestOf() {
    return bestOf;
  }


  public void setBestOf(Integer bestOf) {
    
    
    
    this.bestOf = bestOf;
  }


  public PulzeCompletionRequest contextWindow(Integer contextWindow) {
    
    
    
    
    this.contextWindow = contextWindow;
    return this;
  }

   /**
   * The maximum context size (tokens) for the provided model
   * @return contextWindow
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum context size (tokens) for the provided model")

  public Integer getContextWindow() {
    return contextWindow;
  }


  public void setContextWindow(Integer contextWindow) {
    
    
    
    this.contextWindow = contextWindow;
  }


  public PulzeCompletionRequest false(Integer false) {
    if (false != null && false < 1) {
      throw new IllegalArgumentException("Invalid value for false. Must be greater than or equal to 1.");
    }
    
    
    
    this.false = false;
    return this;
  }

   /**
   * How many completions to generate for each prompt. @default 1 
   * minimum: 1
   * @return false
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "How many completions to generate for each prompt. @default 1 ")

  public Integer getFalse() {
    return false;
  }


  public void setFalse(Integer false) {
    if (false != null && false < 1) {
      throw new IllegalArgumentException("Invalid value for false. Must be greater than or equal to 1.");
    }
    
    
    this.false = false;
  }


  public PulzeCompletionRequest frequencyPenalty(Double frequencyPenalty) {
    
    if (frequencyPenalty != null && frequencyPenalty > 2) {
      throw new IllegalArgumentException("Invalid value for frequencyPenalty. Must be less than or equal to 2.");
    }
    
    
    this.frequencyPenalty = frequencyPenalty;
    return this;
  }

  public PulzeCompletionRequest frequencyPenalty(Integer frequencyPenalty) {
    
    if (frequencyPenalty != null && frequencyPenalty > 2) {
      throw new IllegalArgumentException("Invalid value for frequencyPenalty. Must be less than or equal to 2.");
    }
    
    
    this.frequencyPenalty = frequencyPenalty.doubleValue();
    return this;
  }

   /**
   * https://platform.openai.com/docs/api-reference/completions/create#completions/create-frequency_penalty Increase the model&#39;s likelihood to not repeat tokens/words 
   * maximum: 2
   * @return frequencyPenalty
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "https://platform.openai.com/docs/api-reference/completions/create#completions/create-frequency_penalty Increase the model's likelihood to not repeat tokens/words ")

  public Double getFrequencyPenalty() {
    return frequencyPenalty;
  }


  public void setFrequencyPenalty(Double frequencyPenalty) {
    
    if (frequencyPenalty != null && frequencyPenalty > 2) {
      throw new IllegalArgumentException("Invalid value for frequencyPenalty. Must be less than or equal to 2.");
    }
    
    this.frequencyPenalty = frequencyPenalty;
  }


  public PulzeCompletionRequest headers(Map<String, String> headers) {
    
    
    
    
    this.headers = headers;
    return this;
  }

  public PulzeCompletionRequest putHeadersItem(String key, String headersItem) {
    if (this.headers == null) {
      this.headers = new HashMap<>();
    }
    this.headers.put(key, headersItem);
    return this;
  }

   /**
   * Headers sent alongside the request -- stored as part of the payload
   * @return headers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Headers sent alongside the request -- stored as part of the payload")

  public Map<String, String> getHeaders() {
    return headers;
  }


  public void setHeaders(Map<String, String> headers) {
    
    
    
    this.headers = headers;
  }


  public PulzeCompletionRequest labels(Map<String, String> labels) {
    
    
    
    
    this.labels = labels;
    return this;
  }

  public PulzeCompletionRequest putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

   /**
   * The labels sent alongside the request as a JSON-encoded Dict[str, str] inside of the header \&quot;pulze-labels\&quot;.
   * @return labels
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The labels sent alongside the request as a JSON-encoded Dict[str, str] inside of the header \"pulze-labels\".")

  public Map<String, String> getLabels() {
    return labels;
  }


  public void setLabels(Map<String, String> labels) {
    
    
    
    this.labels = labels;
  }


  public PulzeCompletionRequest logitBias(Object logitBias) {
    
    
    
    
    this.logitBias = logitBias;
    return this;
  }

   /**
   * COMING SOON https://platform.openai.com/docs/api-reference/completions/create#completions/create-logit_bias Modify the likelihood of specified tokens appearing in the completion.  See here for a detailed explanation on how to use: https://help.openai.com/en/articles/5247780-using-logit-bias-to-define-token-probability 
   * @return logitBias
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "COMING SOON https://platform.openai.com/docs/api-reference/completions/create#completions/create-logit_bias Modify the likelihood of specified tokens appearing in the completion.  See here for a detailed explanation on how to use: https://help.openai.com/en/articles/5247780-using-logit-bias-to-define-token-probability ")

  public Object getLogitBias() {
    return logitBias;
  }


  public void setLogitBias(Object logitBias) {
    
    
    
    this.logitBias = logitBias;
  }


  public PulzeCompletionRequest logprobs(Integer logprobs) {
    
    if (logprobs != null && logprobs > 5) {
      throw new IllegalArgumentException("Invalid value for logprobs. Must be less than or equal to 5.");
    }
    
    
    this.logprobs = logprobs;
    return this;
  }

   /**
   * COMING SOON https://platform.openai.com/docs/api-reference/completions/create#completions/create-logprobs Include the log probabilities on the logprobs most likely tokens, as well the chosen tokens. 
   * maximum: 5
   * @return logprobs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "COMING SOON https://platform.openai.com/docs/api-reference/completions/create#completions/create-logprobs Include the log probabilities on the logprobs most likely tokens, as well the chosen tokens. ")

  public Integer getLogprobs() {
    return logprobs;
  }


  public void setLogprobs(Integer logprobs) {
    
    if (logprobs != null && logprobs > 5) {
      throw new IllegalArgumentException("Invalid value for logprobs. Must be less than or equal to 5.");
    }
    
    this.logprobs = logprobs;
  }


  public PulzeCompletionRequest maxTokens(Integer maxTokens) {
    
    
    
    
    this.maxTokens = maxTokens;
    return this;
  }

   /**
   * The maximum number of tokens that the response can contain.
   * @return maxTokens
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum number of tokens that the response can contain.")

  public Integer getMaxTokens() {
    return maxTokens;
  }


  public void setMaxTokens(Integer maxTokens) {
    
    
    
    this.maxTokens = maxTokens;
  }


  public PulzeCompletionRequest messages(List<RoleContentChatChoice> messages) {
    
    
    
    
    this.messages = messages;
    return this;
  }

  public PulzeCompletionRequest addMessagesItem(RoleContentChatChoice messagesItem) {
    if (this.messages == null) {
      this.messages = new ArrayList<>();
    }
    this.messages.add(messagesItem);
    return this;
  }

   /**
   * The conversation sent (with or without history) (for a /chat/completions request)
   * @return messages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[]", value = "The conversation sent (with or without history) (for a /chat/completions request)")

  public List<RoleContentChatChoice> getMessages() {
    return messages;
  }


  public void setMessages(List<RoleContentChatChoice> messages) {
    
    
    
    this.messages = messages;
  }


  public PulzeCompletionRequest model(String model) {
    
    
    
    
    this.model = model;
    return this;
  }

   /**
   * https://docs.pulze.ai/overview/models Specify the model you&#39;d like Pulze to use. (optional). Can be the full model name, or a subset for multi-matching.  Defaults to our dynamic routing, i.e. best model for this request. 
   * @return model
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "pulze", value = "https://docs.pulze.ai/overview/models Specify the model you'd like Pulze to use. (optional). Can be the full model name, or a subset for multi-matching.  Defaults to our dynamic routing, i.e. best model for this request. ")

  public String getModel() {
    return model;
  }


  public void setModel(String model) {
    
    
    
    this.model = model;
  }


  public PulzeCompletionRequest policies(LLMModelPolicies policies) {
    
    
    
    
    this.policies = policies;
    return this;
  }

   /**
   * Settings for how this request should be processed: Anonimized, public, and more.
   * @return policies
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Settings for how this request should be processed: Anonimized, public, and more.")

  public LLMModelPolicies getPolicies() {
    return policies;
  }


  public void setPolicies(LLMModelPolicies policies) {
    
    
    
    this.policies = policies;
  }


  public PulzeCompletionRequest presencePenalty(Double presencePenalty) {
    
    if (presencePenalty != null && presencePenalty > 2) {
      throw new IllegalArgumentException("Invalid value for presencePenalty. Must be less than or equal to 2.");
    }
    
    
    this.presencePenalty = presencePenalty;
    return this;
  }

  public PulzeCompletionRequest presencePenalty(Integer presencePenalty) {
    
    if (presencePenalty != null && presencePenalty > 2) {
      throw new IllegalArgumentException("Invalid value for presencePenalty. Must be less than or equal to 2.");
    }
    
    
    this.presencePenalty = presencePenalty.doubleValue();
    return this;
  }

   /**
   * https://platform.openai.com/docs/api-reference/completions/create#completions/create-presence_penalty Increase the model&#39;s likelihood to talk about new topics 
   * maximum: 2
   * @return presencePenalty
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "https://platform.openai.com/docs/api-reference/completions/create#completions/create-presence_penalty Increase the model's likelihood to talk about new topics ")

  public Double getPresencePenalty() {
    return presencePenalty;
  }


  public void setPresencePenalty(Double presencePenalty) {
    
    if (presencePenalty != null && presencePenalty > 2) {
      throw new IllegalArgumentException("Invalid value for presencePenalty. Must be less than or equal to 2.");
    }
    
    this.presencePenalty = presencePenalty;
  }


  public PulzeCompletionRequest prompt(Object prompt) {
    
    
    
    
    this.prompt = prompt;
    return this;
  }

   /**
   * Get prompt
   * @return prompt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getPrompt() {
    return prompt;
  }


  public void setPrompt(Object prompt) {
    
    
    
    this.prompt = prompt;
  }


  public PulzeCompletionRequest provider(String provider) {
    
    
    
    
    this.provider = provider;
    return this;
  }

   /**
   * The name of the provider for the request
   * @return provider
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "", value = "The name of the provider for the request")

  public String getProvider() {
    return provider;
  }


  public void setProvider(String provider) {
    
    
    
    this.provider = provider;
  }


  public PulzeCompletionRequest stop(Object stop) {
    
    
    
    
    this.stop = stop;
    return this;
  }

   /**
   * Get stop
   * @return stop
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getStop() {
    return stop;
  }


  public void setStop(Object stop) {
    
    
    
    this.stop = stop;
  }


  public PulzeCompletionRequest stream(Boolean stream) {
    
    
    
    
    this.stream = stream;
    return this;
  }

   /**
   * ** COMING SOON ** Specify if you want the response to be streamed or to be returned as a standard HTTP request 
   * @return stream
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "** COMING SOON ** Specify if you want the response to be streamed or to be returned as a standard HTTP request ")

  public Boolean getStream() {
    return stream;
  }


  public void setStream(Boolean stream) {
    
    
    
    this.stream = stream;
  }


  public PulzeCompletionRequest suffix(String suffix) {
    
    
    
    
    this.suffix = suffix;
    return this;
  }

   /**
   * COMING SOON
   * @return suffix
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "", value = "COMING SOON")

  public String getSuffix() {
    return suffix;
  }


  public void setSuffix(String suffix) {
    
    
    
    this.suffix = suffix;
  }


  public PulzeCompletionRequest temperature(Double temperature) {
    
    if (temperature != null && temperature > 1) {
      throw new IllegalArgumentException("Invalid value for temperature. Must be less than or equal to 1.");
    }
    
    
    this.temperature = temperature;
    return this;
  }

  public PulzeCompletionRequest temperature(Integer temperature) {
    
    if (temperature != null && temperature > 1) {
      throw new IllegalArgumentException("Invalid value for temperature. Must be less than or equal to 1.");
    }
    
    
    this.temperature = temperature.doubleValue();
    return this;
  }

   /**
   * Optionally specify the temperature for this request only. Leave empty to allow Pulze to guess it for you.
   * maximum: 1
   * @return temperature
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "Optionally specify the temperature for this request only. Leave empty to allow Pulze to guess it for you.")

  public Double getTemperature() {
    return temperature;
  }


  public void setTemperature(Double temperature) {
    
    if (temperature != null && temperature > 1) {
      throw new IllegalArgumentException("Invalid value for temperature. Must be less than or equal to 1.");
    }
    
    this.temperature = temperature;
  }


  public PulzeCompletionRequest toolChoice(Object toolChoice) {
    
    
    
    
    this.toolChoice = toolChoice;
    return this;
  }

   /**
   * Get toolChoice
   * @return toolChoice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getToolChoice() {
    return toolChoice;
  }


  public void setToolChoice(Object toolChoice) {
    
    
    
    this.toolChoice = toolChoice;
  }


  public PulzeCompletionRequest tools(List<ToolFunction> tools) {
    
    
    
    
    this.tools = tools;
    return this;
  }

  public PulzeCompletionRequest addToolsItem(ToolFunction toolsItem) {
    if (this.tools == null) {
      this.tools = new ArrayList<>();
    }
    this.tools.add(toolsItem);
    return this;
  }

   /**
   * Get tools
   * @return tools
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ToolFunction> getTools() {
    return tools;
  }


  public void setTools(List<ToolFunction> tools) {
    
    
    
    this.tools = tools;
  }


  public PulzeCompletionRequest topP(Double topP) {
    
    
    
    
    this.topP = topP;
    return this;
  }

  public PulzeCompletionRequest topP(Integer topP) {
    
    
    
    
    this.topP = topP.doubleValue();
    return this;
  }

   /**
   * https://platform.openai.com/docs/api-reference/completions/create#completions/create-top_p An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass 
   * @return topP
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "https://platform.openai.com/docs/api-reference/completions/create#completions/create-top_p An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass ")

  public Double getTopP() {
    return topP;
  }


  public void setTopP(Double topP) {
    
    
    
    this.topP = topP;
  }


  public PulzeCompletionRequest weights(LLMModelWeights weights) {
    
    
    
    
    this.weights = weights;
    return this;
  }

   /**
   * Optionally specify specific weights for this request only. Leave empty to use the App&#39;s weights (global configuration)
   * @return weights
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optionally specify specific weights for this request only. Leave empty to use the App's weights (global configuration)")

  public LLMModelWeights getWeights() {
    return weights;
  }


  public void setWeights(LLMModelWeights weights) {
    
    
    
    this.weights = weights;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PulzeCompletionRequest instance itself
   */
  public PulzeCompletionRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PulzeCompletionRequest pulzeCompletionRequest = (PulzeCompletionRequest) o;
    return Objects.equals(this.bestOf, pulzeCompletionRequest.bestOf) &&
        Objects.equals(this.contextWindow, pulzeCompletionRequest.contextWindow) &&
        Objects.equals(this.false, pulzeCompletionRequest.false) &&
        Objects.equals(this.frequencyPenalty, pulzeCompletionRequest.frequencyPenalty) &&
        Objects.equals(this.headers, pulzeCompletionRequest.headers) &&
        Objects.equals(this.labels, pulzeCompletionRequest.labels) &&
        Objects.equals(this.logitBias, pulzeCompletionRequest.logitBias) &&
        Objects.equals(this.logprobs, pulzeCompletionRequest.logprobs) &&
        Objects.equals(this.maxTokens, pulzeCompletionRequest.maxTokens) &&
        Objects.equals(this.messages, pulzeCompletionRequest.messages) &&
        Objects.equals(this.model, pulzeCompletionRequest.model) &&
        Objects.equals(this.policies, pulzeCompletionRequest.policies) &&
        Objects.equals(this.presencePenalty, pulzeCompletionRequest.presencePenalty) &&
        Objects.equals(this.prompt, pulzeCompletionRequest.prompt) &&
        Objects.equals(this.provider, pulzeCompletionRequest.provider) &&
        Objects.equals(this.stop, pulzeCompletionRequest.stop) &&
        Objects.equals(this.stream, pulzeCompletionRequest.stream) &&
        Objects.equals(this.suffix, pulzeCompletionRequest.suffix) &&
        Objects.equals(this.temperature, pulzeCompletionRequest.temperature) &&
        Objects.equals(this.toolChoice, pulzeCompletionRequest.toolChoice) &&
        Objects.equals(this.tools, pulzeCompletionRequest.tools) &&
        Objects.equals(this.topP, pulzeCompletionRequest.topP) &&
        Objects.equals(this.weights, pulzeCompletionRequest.weights)&&
        Objects.equals(this.additionalProperties, pulzeCompletionRequest.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(bestOf, contextWindow, false, frequencyPenalty, headers, labels, logitBias, logprobs, maxTokens, messages, model, policies, presencePenalty, prompt, provider, stop, stream, suffix, temperature, toolChoice, tools, topP, weights, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PulzeCompletionRequest {\n");
    sb.append("    bestOf: ").append(toIndentedString(bestOf)).append("\n");
    sb.append("    contextWindow: ").append(toIndentedString(contextWindow)).append("\n");
    sb.append("    false: ").append(toIndentedString(false)).append("\n");
    sb.append("    frequencyPenalty: ").append(toIndentedString(frequencyPenalty)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    logitBias: ").append(toIndentedString(logitBias)).append("\n");
    sb.append("    logprobs: ").append(toIndentedString(logprobs)).append("\n");
    sb.append("    maxTokens: ").append(toIndentedString(maxTokens)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    policies: ").append(toIndentedString(policies)).append("\n");
    sb.append("    presencePenalty: ").append(toIndentedString(presencePenalty)).append("\n");
    sb.append("    prompt: ").append(toIndentedString(prompt)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    stop: ").append(toIndentedString(stop)).append("\n");
    sb.append("    stream: ").append(toIndentedString(stream)).append("\n");
    sb.append("    suffix: ").append(toIndentedString(suffix)).append("\n");
    sb.append("    temperature: ").append(toIndentedString(temperature)).append("\n");
    sb.append("    toolChoice: ").append(toIndentedString(toolChoice)).append("\n");
    sb.append("    tools: ").append(toIndentedString(tools)).append("\n");
    sb.append("    topP: ").append(toIndentedString(topP)).append("\n");
    sb.append("    weights: ").append(toIndentedString(weights)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("best_of");
    openapiFields.add("context_window");
    openapiFields.add("false");
    openapiFields.add("frequency_penalty");
    openapiFields.add("headers");
    openapiFields.add("labels");
    openapiFields.add("logit_bias");
    openapiFields.add("logprobs");
    openapiFields.add("max_tokens");
    openapiFields.add("messages");
    openapiFields.add("model");
    openapiFields.add("policies");
    openapiFields.add("presence_penalty");
    openapiFields.add("prompt");
    openapiFields.add("provider");
    openapiFields.add("stop");
    openapiFields.add("stream");
    openapiFields.add("suffix");
    openapiFields.add("temperature");
    openapiFields.add("tool_choice");
    openapiFields.add("tools");
    openapiFields.add("top_p");
    openapiFields.add("weights");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PulzeCompletionRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PulzeCompletionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PulzeCompletionRequest is not found in the empty JSON string", PulzeCompletionRequest.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("messages") != null && !jsonObj.get("messages").isJsonNull()) {
        JsonArray jsonArraymessages = jsonObj.getAsJsonArray("messages");
        if (jsonArraymessages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("messages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `messages` to be an array in the JSON string but got `%s`", jsonObj.get("messages").toString()));
          }

          // validate the optional field `messages` (array)
          for (int i = 0; i < jsonArraymessages.size(); i++) {
            RoleContentChatChoice.validateJsonObject(jsonArraymessages.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) && !jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      // validate the optional field `policies`
      if (jsonObj.get("policies") != null && !jsonObj.get("policies").isJsonNull()) {
        LLMModelPolicies.validateJsonObject(jsonObj.getAsJsonObject("policies"));
      }
      if ((jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) && !jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
      if ((jsonObj.get("suffix") != null && !jsonObj.get("suffix").isJsonNull()) && !jsonObj.get("suffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suffix").toString()));
      }
      if (jsonObj.get("tools") != null && !jsonObj.get("tools").isJsonNull()) {
        JsonArray jsonArraytools = jsonObj.getAsJsonArray("tools");
        if (jsonArraytools != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tools").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tools` to be an array in the JSON string but got `%s`", jsonObj.get("tools").toString()));
          }

          // validate the optional field `tools` (array)
          for (int i = 0; i < jsonArraytools.size(); i++) {
            ToolFunction.validateJsonObject(jsonArraytools.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `weights`
      if (jsonObj.get("weights") != null && !jsonObj.get("weights").isJsonNull()) {
        LLMModelWeights.validateJsonObject(jsonObj.getAsJsonObject("weights"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PulzeCompletionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PulzeCompletionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PulzeCompletionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PulzeCompletionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PulzeCompletionRequest>() {
           @Override
           public void write(JsonWriter out, PulzeCompletionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PulzeCompletionRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PulzeCompletionRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PulzeCompletionRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PulzeCompletionRequest
  * @throws IOException if the JSON string is invalid with respect to PulzeCompletionRequest
  */
  public static PulzeCompletionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PulzeCompletionRequest.class);
  }

 /**
  * Convert an instance of PulzeCompletionRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

