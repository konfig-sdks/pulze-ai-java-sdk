/*
 * Pulze.ai API
 * At Pulze it's our mission to supercharge today's workforce with AI to maximize the world's prosperity. We are doing so by enabling companies of any size to securely leverage Large Language Models (LLM) and easily build AI features into their apps. Our enterprise platform has access to all best in class LLMs and can route user requests to the most relevant model to get the highest quality response at the best price thanks to our smart meta model. End users can leverage pre-built applications, such as our Marketing AI product, or build custom apps on top of the Pulze Platform.  We are a VC Funded, early stage startup based in San Francisco.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.App;
import com.konfigthis.client.model.AppCustomData;
import com.konfigthis.client.model.PulzeModelActiveForApp;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AppWithModelUpdatesInfo
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AppWithModelUpdatesInfo {
  public static final String SERIALIZED_NAME_APP = "app";
  @SerializedName(SERIALIZED_NAME_APP)
  private App app;

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private List<AppCustomData> files = null;

  public static final String SERIALIZED_NAME_MODEL_SETTINGS = "model_settings";
  @SerializedName(SERIALIZED_NAME_MODEL_SETTINGS)
  private Map<String, PulzeModelActiveForApp> modelSettings = new HashMap<>();

  public AppWithModelUpdatesInfo() {
  }

  public AppWithModelUpdatesInfo app(App app) {
    
    
    
    
    this.app = app;
    return this;
  }

   /**
   * Get app
   * @return app
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public App getApp() {
    return app;
  }


  public void setApp(App app) {
    
    
    
    this.app = app;
  }


  public AppWithModelUpdatesInfo files(List<AppCustomData> files) {
    
    
    
    
    this.files = files;
    return this;
  }

  public AppWithModelUpdatesInfo addFilesItem(AppCustomData filesItem) {
    if (this.files == null) {
      this.files = new ArrayList<>();
    }
    this.files.add(filesItem);
    return this;
  }

   /**
   * List of files associated with the app.
   * @return files
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[]", value = "List of files associated with the app.")

  public List<AppCustomData> getFiles() {
    return files;
  }


  public void setFiles(List<AppCustomData> files) {
    
    
    
    this.files = files;
  }


  public AppWithModelUpdatesInfo modelSettings(Map<String, PulzeModelActiveForApp> modelSettings) {
    
    
    
    
    this.modelSettings = modelSettings;
    return this;
  }

  public AppWithModelUpdatesInfo putModelSettingsItem(String key, PulzeModelActiveForApp modelSettingsItem) {
    this.modelSettings.put(key, modelSettingsItem);
    return this;
  }

   /**
   * Get modelSettings
   * @return modelSettings
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Map<String, PulzeModelActiveForApp> getModelSettings() {
    return modelSettings;
  }


  public void setModelSettings(Map<String, PulzeModelActiveForApp> modelSettings) {
    
    
    
    this.modelSettings = modelSettings;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AppWithModelUpdatesInfo instance itself
   */
  public AppWithModelUpdatesInfo putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppWithModelUpdatesInfo appWithModelUpdatesInfo = (AppWithModelUpdatesInfo) o;
    return Objects.equals(this.app, appWithModelUpdatesInfo.app) &&
        Objects.equals(this.files, appWithModelUpdatesInfo.files) &&
        Objects.equals(this.modelSettings, appWithModelUpdatesInfo.modelSettings)&&
        Objects.equals(this.additionalProperties, appWithModelUpdatesInfo.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(app, files, modelSettings, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppWithModelUpdatesInfo {\n");
    sb.append("    app: ").append(toIndentedString(app)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    modelSettings: ").append(toIndentedString(modelSettings)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("app");
    openapiFields.add("files");
    openapiFields.add("model_settings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("app");
    openapiRequiredFields.add("model_settings");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AppWithModelUpdatesInfo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AppWithModelUpdatesInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppWithModelUpdatesInfo is not found in the empty JSON string", AppWithModelUpdatesInfo.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AppWithModelUpdatesInfo.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `app`
      App.validateJsonObject(jsonObj.getAsJsonObject("app"));
      if (jsonObj.get("files") != null && !jsonObj.get("files").isJsonNull()) {
        JsonArray jsonArrayfiles = jsonObj.getAsJsonArray("files");
        if (jsonArrayfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("files").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `files` to be an array in the JSON string but got `%s`", jsonObj.get("files").toString()));
          }

          // validate the optional field `files` (array)
          for (int i = 0; i < jsonArrayfiles.size(); i++) {
            AppCustomData.validateJsonObject(jsonArrayfiles.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppWithModelUpdatesInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppWithModelUpdatesInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppWithModelUpdatesInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppWithModelUpdatesInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<AppWithModelUpdatesInfo>() {
           @Override
           public void write(JsonWriter out, AppWithModelUpdatesInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AppWithModelUpdatesInfo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AppWithModelUpdatesInfo instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AppWithModelUpdatesInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AppWithModelUpdatesInfo
  * @throws IOException if the JSON string is invalid with respect to AppWithModelUpdatesInfo
  */
  public static AppWithModelUpdatesInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppWithModelUpdatesInfo.class);
  }

 /**
  * Convert an instance of AppWithModelUpdatesInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

