/*
 * Pulze.ai API
 * At Pulze it's our mission to supercharge today's workforce with AI to maximize the world's prosperity. We are doing so by enabling companies of any size to securely leverage Large Language Models (LLM) and easily build AI features into their apps. Our enterprise platform has access to all best in class LLMs and can route user requests to the most relevant model to get the highest quality response at the best price thanks to our smart meta model. End users can leverage pre-built applications, such as our Marketing AI product, or build custom apps on top of the Pulze Platform.  We are a VC Funded, early stage startup based in San Francisco.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * OrgUpdate
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class OrgUpdate {
  public static final String SERIALIZED_NAME_ADDED_ON = "added_on";
  @SerializedName(SERIALIZED_NAME_ADDED_ON)
  private OffsetDateTime addedOn;

  public static final String SERIALIZED_NAME_ADDRESS1 = "address_1";
  @SerializedName(SERIALIZED_NAME_ADDRESS1)
  private String address1;

  public static final String SERIALIZED_NAME_ADDRESS2 = "address_2";
  @SerializedName(SERIALIZED_NAME_ADDRESS2)
  private String address2;

  public static final String SERIALIZED_NAME_ADDRESS_CITY = "address_city";
  @SerializedName(SERIALIZED_NAME_ADDRESS_CITY)
  private String addressCity;

  public static final String SERIALIZED_NAME_ADDRESS_COUNTRY = "address_country";
  @SerializedName(SERIALIZED_NAME_ADDRESS_COUNTRY)
  private String addressCountry;

  public static final String SERIALIZED_NAME_ADDRESS_STATE = "address_state";
  @SerializedName(SERIALIZED_NAME_ADDRESS_STATE)
  private String addressState;

  public static final String SERIALIZED_NAME_ADDRESS_ZIP = "address_zip";
  @SerializedName(SERIALIZED_NAME_ADDRESS_ZIP)
  private String addressZip;

  public static final String SERIALIZED_NAME_BILLING_EMAIL = "billing_email";
  @SerializedName(SERIALIZED_NAME_BILLING_EMAIL)
  private String billingEmail;

  /**
   * Gets or Sets currency
   */
  @JsonAdapter(CurrencyEnum.Adapter.class)
 public enum CurrencyEnum {
    USD("USD");

    private String value;

    CurrencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrencyEnum fromValue(String value) {
      for (CurrencyEnum b : CurrencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurrencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurrencyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private CurrencyEnum currency = CurrencyEnum.USD;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_LAST_INVOICE_DATE = "last_invoice_date";
  @SerializedName(SERIALIZED_NAME_LAST_INVOICE_DATE)
  private OffsetDateTime lastInvoiceDate;

  public static final String SERIALIZED_NAME_ORG_DISPLAY_NAME = "org_display_name";
  @SerializedName(SERIALIZED_NAME_ORG_DISPLAY_NAME)
  private String orgDisplayName;

  public static final String SERIALIZED_NAME_ORG_LOGO = "org_logo";
  @SerializedName(SERIALIZED_NAME_ORG_LOGO)
  private String orgLogo;

  public static final String SERIALIZED_NAME_ORG_NAME = "org_name";
  @SerializedName(SERIALIZED_NAME_ORG_NAME)
  private String orgName;

  public static final String SERIALIZED_NAME_PENDING_EXPENSE = "pending_expense";
  @SerializedName(SERIALIZED_NAME_PENDING_EXPENSE)
  private Double pendingExpense;

  public OrgUpdate() {
  }

  public OrgUpdate addedOn(OffsetDateTime addedOn) {
    
    
    
    
    this.addedOn = addedOn;
    return this;
  }

   /**
   * Get addedOn
   * @return addedOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getAddedOn() {
    return addedOn;
  }


  public void setAddedOn(OffsetDateTime addedOn) {
    
    
    
    this.addedOn = addedOn;
  }


  public OrgUpdate address1(String address1) {
    
    
    
    
    this.address1 = address1;
    return this;
  }

   /**
   * Get address1
   * @return address1
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getAddress1() {
    return address1;
  }


  public void setAddress1(String address1) {
    
    
    
    this.address1 = address1;
  }


  public OrgUpdate address2(String address2) {
    
    
    
    
    this.address2 = address2;
    return this;
  }

   /**
   * Get address2
   * @return address2
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getAddress2() {
    return address2;
  }


  public void setAddress2(String address2) {
    
    
    
    this.address2 = address2;
  }


  public OrgUpdate addressCity(String addressCity) {
    
    
    
    
    this.addressCity = addressCity;
    return this;
  }

   /**
   * Get addressCity
   * @return addressCity
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getAddressCity() {
    return addressCity;
  }


  public void setAddressCity(String addressCity) {
    
    
    
    this.addressCity = addressCity;
  }


  public OrgUpdate addressCountry(String addressCountry) {
    
    
    
    
    this.addressCountry = addressCountry;
    return this;
  }

   /**
   * Get addressCountry
   * @return addressCountry
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getAddressCountry() {
    return addressCountry;
  }


  public void setAddressCountry(String addressCountry) {
    
    
    
    this.addressCountry = addressCountry;
  }


  public OrgUpdate addressState(String addressState) {
    
    
    
    
    this.addressState = addressState;
    return this;
  }

   /**
   * Get addressState
   * @return addressState
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getAddressState() {
    return addressState;
  }


  public void setAddressState(String addressState) {
    
    
    
    this.addressState = addressState;
  }


  public OrgUpdate addressZip(String addressZip) {
    
    
    
    
    this.addressZip = addressZip;
    return this;
  }

   /**
   * Get addressZip
   * @return addressZip
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getAddressZip() {
    return addressZip;
  }


  public void setAddressZip(String addressZip) {
    
    
    
    this.addressZip = addressZip;
  }


  public OrgUpdate billingEmail(String billingEmail) {
    
    
    
    
    this.billingEmail = billingEmail;
    return this;
  }

   /**
   * Get billingEmail
   * @return billingEmail
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getBillingEmail() {
    return billingEmail;
  }


  public void setBillingEmail(String billingEmail) {
    
    
    
    this.billingEmail = billingEmail;
  }


  public OrgUpdate currency(CurrencyEnum currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "USD", value = "")

  public CurrencyEnum getCurrency() {
    return currency;
  }


  public void setCurrency(CurrencyEnum currency) {
    
    
    
    this.currency = currency;
  }


  public OrgUpdate id(UUID id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    
    
    
    this.id = id;
  }


  public OrgUpdate lastInvoiceDate(OffsetDateTime lastInvoiceDate) {
    
    
    
    
    this.lastInvoiceDate = lastInvoiceDate;
    return this;
  }

   /**
   * Get lastInvoiceDate
   * @return lastInvoiceDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getLastInvoiceDate() {
    return lastInvoiceDate;
  }


  public void setLastInvoiceDate(OffsetDateTime lastInvoiceDate) {
    
    
    
    this.lastInvoiceDate = lastInvoiceDate;
  }


  public OrgUpdate orgDisplayName(String orgDisplayName) {
    
    
    if (orgDisplayName != null && orgDisplayName.length() < 4) {
      throw new IllegalArgumentException("Invalid value for orgDisplayName. Length must be greater than or equal to 4.");
    }
    
    this.orgDisplayName = orgDisplayName;
    return this;
  }

   /**
   * Get orgDisplayName
   * @return orgDisplayName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getOrgDisplayName() {
    return orgDisplayName;
  }


  public void setOrgDisplayName(String orgDisplayName) {
    
    
    if (orgDisplayName != null && orgDisplayName.length() < 4) {
      throw new IllegalArgumentException("Invalid value for orgDisplayName. Length must be greater than or equal to 4.");
    }
    this.orgDisplayName = orgDisplayName;
  }


  public OrgUpdate orgLogo(String orgLogo) {
    
    
    
    
    this.orgLogo = orgLogo;
    return this;
  }

   /**
   * Get orgLogo
   * @return orgLogo
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getOrgLogo() {
    return orgLogo;
  }


  public void setOrgLogo(String orgLogo) {
    
    
    
    this.orgLogo = orgLogo;
  }


  public OrgUpdate orgName(String orgName) {
    
    
    if (orgName != null && orgName.length() < 4) {
      throw new IllegalArgumentException("Invalid value for orgName. Length must be greater than or equal to 4.");
    }
    
    this.orgName = orgName;
    return this;
  }

   /**
   * Get orgName
   * @return orgName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getOrgName() {
    return orgName;
  }


  public void setOrgName(String orgName) {
    
    
    if (orgName != null && orgName.length() < 4) {
      throw new IllegalArgumentException("Invalid value for orgName. Length must be greater than or equal to 4.");
    }
    this.orgName = orgName;
  }


  public OrgUpdate pendingExpense(Double pendingExpense) {
    
    
    
    
    this.pendingExpense = pendingExpense;
    return this;
  }

  public OrgUpdate pendingExpense(Integer pendingExpense) {
    
    
    
    
    this.pendingExpense = pendingExpense.doubleValue();
    return this;
  }

   /**
   * Get pendingExpense
   * @return pendingExpense
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getPendingExpense() {
    return pendingExpense;
  }


  public void setPendingExpense(Double pendingExpense) {
    
    
    
    this.pendingExpense = pendingExpense;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OrgUpdate instance itself
   */
  public OrgUpdate putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrgUpdate orgUpdate = (OrgUpdate) o;
    return Objects.equals(this.addedOn, orgUpdate.addedOn) &&
        Objects.equals(this.address1, orgUpdate.address1) &&
        Objects.equals(this.address2, orgUpdate.address2) &&
        Objects.equals(this.addressCity, orgUpdate.addressCity) &&
        Objects.equals(this.addressCountry, orgUpdate.addressCountry) &&
        Objects.equals(this.addressState, orgUpdate.addressState) &&
        Objects.equals(this.addressZip, orgUpdate.addressZip) &&
        Objects.equals(this.billingEmail, orgUpdate.billingEmail) &&
        Objects.equals(this.currency, orgUpdate.currency) &&
        Objects.equals(this.id, orgUpdate.id) &&
        Objects.equals(this.lastInvoiceDate, orgUpdate.lastInvoiceDate) &&
        Objects.equals(this.orgDisplayName, orgUpdate.orgDisplayName) &&
        Objects.equals(this.orgLogo, orgUpdate.orgLogo) &&
        Objects.equals(this.orgName, orgUpdate.orgName) &&
        Objects.equals(this.pendingExpense, orgUpdate.pendingExpense)&&
        Objects.equals(this.additionalProperties, orgUpdate.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addedOn, address1, address2, addressCity, addressCountry, addressState, addressZip, billingEmail, currency, id, lastInvoiceDate, orgDisplayName, orgLogo, orgName, pendingExpense, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrgUpdate {\n");
    sb.append("    addedOn: ").append(toIndentedString(addedOn)).append("\n");
    sb.append("    address1: ").append(toIndentedString(address1)).append("\n");
    sb.append("    address2: ").append(toIndentedString(address2)).append("\n");
    sb.append("    addressCity: ").append(toIndentedString(addressCity)).append("\n");
    sb.append("    addressCountry: ").append(toIndentedString(addressCountry)).append("\n");
    sb.append("    addressState: ").append(toIndentedString(addressState)).append("\n");
    sb.append("    addressZip: ").append(toIndentedString(addressZip)).append("\n");
    sb.append("    billingEmail: ").append(toIndentedString(billingEmail)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastInvoiceDate: ").append(toIndentedString(lastInvoiceDate)).append("\n");
    sb.append("    orgDisplayName: ").append(toIndentedString(orgDisplayName)).append("\n");
    sb.append("    orgLogo: ").append(toIndentedString(orgLogo)).append("\n");
    sb.append("    orgName: ").append(toIndentedString(orgName)).append("\n");
    sb.append("    pendingExpense: ").append(toIndentedString(pendingExpense)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("added_on");
    openapiFields.add("address_1");
    openapiFields.add("address_2");
    openapiFields.add("address_city");
    openapiFields.add("address_country");
    openapiFields.add("address_state");
    openapiFields.add("address_zip");
    openapiFields.add("billing_email");
    openapiFields.add("currency");
    openapiFields.add("id");
    openapiFields.add("last_invoice_date");
    openapiFields.add("org_display_name");
    openapiFields.add("org_logo");
    openapiFields.add("org_name");
    openapiFields.add("pending_expense");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("address_1");
    openapiRequiredFields.add("address_2");
    openapiRequiredFields.add("address_city");
    openapiRequiredFields.add("address_country");
    openapiRequiredFields.add("address_state");
    openapiRequiredFields.add("address_zip");
    openapiRequiredFields.add("billing_email");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("org_display_name");
    openapiRequiredFields.add("org_logo");
    openapiRequiredFields.add("org_name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OrgUpdate
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OrgUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrgUpdate is not found in the empty JSON string", OrgUpdate.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrgUpdate.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("address_1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_1").toString()));
      }
      if (!jsonObj.get("address_2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_2").toString()));
      }
      if (!jsonObj.get("address_city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_city").toString()));
      }
      if (!jsonObj.get("address_country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_country").toString()));
      }
      if (!jsonObj.get("address_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_state").toString()));
      }
      if (!jsonObj.get("address_zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_zip").toString()));
      }
      if (!jsonObj.get("billing_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing_email").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("org_display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `org_display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("org_display_name").toString()));
      }
      if (!jsonObj.get("org_logo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `org_logo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("org_logo").toString()));
      }
      if (!jsonObj.get("org_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `org_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("org_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrgUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrgUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrgUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrgUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<OrgUpdate>() {
           @Override
           public void write(JsonWriter out, OrgUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OrgUpdate read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             OrgUpdate instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrgUpdate given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrgUpdate
  * @throws IOException if the JSON string is invalid with respect to OrgUpdate
  */
  public static OrgUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrgUpdate.class);
  }

 /**
  * Convert an instance of OrgUpdate to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

