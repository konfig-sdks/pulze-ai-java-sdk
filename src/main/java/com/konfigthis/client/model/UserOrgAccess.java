/*
 * Pulze.ai API
 * At Pulze it's our mission to supercharge today's workforce with AI to maximize the world's prosperity. We are doing so by enabling companies of any size to securely leverage Large Language Models (LLM) and easily build AI features into their apps. Our enterprise platform has access to all best in class LLMs and can route user requests to the most relevant model to get the highest quality response at the best price thanks to our smart meta model. End users can leverage pre-built applications, such as our Marketing AI product, or build custom apps on top of the Pulze Platform.  We are a VC Funded, early stage startup based in San Francisco.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Org;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * UserOrgAccess
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class UserOrgAccess {
  public static final String SERIALIZED_NAME_AUTH0_ID = "auth0_id";
  @SerializedName(SERIALIZED_NAME_AUTH0_ID)
  private String auth0Id;

  public static final String SERIALIZED_NAME_BILLING_EMAIL = "billing_email";
  @SerializedName(SERIALIZED_NAME_BILLING_EMAIL)
  private String billingEmail;

  public static final String SERIALIZED_NAME_FULL_NAME = "full_name";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_IS_ORG_SETUP_COMPLETE = "is_org_setup_complete";
  @SerializedName(SERIALIZED_NAME_IS_ORG_SETUP_COMPLETE)
  private Boolean isOrgSetupComplete = true;

  public static final String SERIALIZED_NAME_IS_PERSONAL_ORG = "is_personal_org";
  @SerializedName(SERIALIZED_NAME_IS_PERSONAL_ORG)
  private Boolean isPersonalOrg = true;

  public static final String SERIALIZED_NAME_MEMBER_IS_ACTIVE = "member_is_active";
  @SerializedName(SERIALIZED_NAME_MEMBER_IS_ACTIVE)
  private Boolean memberIsActive = false;

  public static final String SERIALIZED_NAME_ORG = "org";
  @SerializedName(SERIALIZED_NAME_ORG)
  private Org org;

  public static final String SERIALIZED_NAME_ORG_DISPLAY_NAME = "org_display_name";
  @SerializedName(SERIALIZED_NAME_ORG_DISPLAY_NAME)
  private String orgDisplayName;

  public static final String SERIALIZED_NAME_ORG_ID = "org_id";
  @SerializedName(SERIALIZED_NAME_ORG_ID)
  private UUID orgId;

  public static final String SERIALIZED_NAME_ORG_NAME = "org_name";
  @SerializedName(SERIALIZED_NAME_ORG_NAME)
  private String orgName;

  public static final String SERIALIZED_NAME_ORG_STRIPE_ID = "org_stripe_id";
  @SerializedName(SERIALIZED_NAME_ORG_STRIPE_ID)
  private String orgStripeId;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private String permissions = "";

  public static final String SERIALIZED_NAME_USER_AVATAR = "user_avatar";
  @SerializedName(SERIALIZED_NAME_USER_AVATAR)
  private String userAvatar;

  public UserOrgAccess() {
  }

  public UserOrgAccess auth0Id(String auth0Id) {
    
    
    
    
    this.auth0Id = auth0Id;
    return this;
  }

   /**
   * Get auth0Id
   * @return auth0Id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getAuth0Id() {
    return auth0Id;
  }


  public void setAuth0Id(String auth0Id) {
    
    
    
    this.auth0Id = auth0Id;
  }


  public UserOrgAccess billingEmail(String billingEmail) {
    
    
    
    
    this.billingEmail = billingEmail;
    return this;
  }

   /**
   * Get billingEmail
   * @return billingEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBillingEmail() {
    return billingEmail;
  }


  public void setBillingEmail(String billingEmail) {
    
    
    
    this.billingEmail = billingEmail;
  }


  public UserOrgAccess fullName(String fullName) {
    
    
    
    
    this.fullName = fullName;
    return this;
  }

   /**
   * Get fullName
   * @return fullName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFullName() {
    return fullName;
  }


  public void setFullName(String fullName) {
    
    
    
    this.fullName = fullName;
  }


  public UserOrgAccess isOrgSetupComplete(Boolean isOrgSetupComplete) {
    
    
    
    
    this.isOrgSetupComplete = isOrgSetupComplete;
    return this;
  }

   /**
   * Get isOrgSetupComplete
   * @return isOrgSetupComplete
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "")

  public Boolean getIsOrgSetupComplete() {
    return isOrgSetupComplete;
  }


  public void setIsOrgSetupComplete(Boolean isOrgSetupComplete) {
    
    
    
    this.isOrgSetupComplete = isOrgSetupComplete;
  }


  public UserOrgAccess isPersonalOrg(Boolean isPersonalOrg) {
    
    
    
    
    this.isPersonalOrg = isPersonalOrg;
    return this;
  }

   /**
   * Get isPersonalOrg
   * @return isPersonalOrg
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "")

  public Boolean getIsPersonalOrg() {
    return isPersonalOrg;
  }


  public void setIsPersonalOrg(Boolean isPersonalOrg) {
    
    
    
    this.isPersonalOrg = isPersonalOrg;
  }


  public UserOrgAccess memberIsActive(Boolean memberIsActive) {
    
    
    
    
    this.memberIsActive = memberIsActive;
    return this;
  }

   /**
   * Get memberIsActive
   * @return memberIsActive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "")

  public Boolean getMemberIsActive() {
    return memberIsActive;
  }


  public void setMemberIsActive(Boolean memberIsActive) {
    
    
    
    this.memberIsActive = memberIsActive;
  }


  public UserOrgAccess org(Org org) {
    
    
    
    
    this.org = org;
    return this;
  }

   /**
   * Get org
   * @return org
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Org getOrg() {
    return org;
  }


  public void setOrg(Org org) {
    
    
    
    this.org = org;
  }


  public UserOrgAccess orgDisplayName(String orgDisplayName) {
    
    
    
    
    this.orgDisplayName = orgDisplayName;
    return this;
  }

   /**
   * Get orgDisplayName
   * @return orgDisplayName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getOrgDisplayName() {
    return orgDisplayName;
  }


  public void setOrgDisplayName(String orgDisplayName) {
    
    
    
    this.orgDisplayName = orgDisplayName;
  }


  public UserOrgAccess orgId(UUID orgId) {
    
    
    
    
    this.orgId = orgId;
    return this;
  }

   /**
   * Get orgId
   * @return orgId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UUID getOrgId() {
    return orgId;
  }


  public void setOrgId(UUID orgId) {
    
    
    
    this.orgId = orgId;
  }


  public UserOrgAccess orgName(String orgName) {
    
    
    
    
    this.orgName = orgName;
    return this;
  }

   /**
   * Get orgName
   * @return orgName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getOrgName() {
    return orgName;
  }


  public void setOrgName(String orgName) {
    
    
    
    this.orgName = orgName;
  }


  public UserOrgAccess orgStripeId(String orgStripeId) {
    
    
    
    
    this.orgStripeId = orgStripeId;
    return this;
  }

   /**
   * Get orgStripeId
   * @return orgStripeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOrgStripeId() {
    return orgStripeId;
  }


  public void setOrgStripeId(String orgStripeId) {
    
    
    
    this.orgStripeId = orgStripeId;
  }


  public UserOrgAccess permissions(String permissions) {
    
    
    
    
    this.permissions = permissions;
    return this;
  }

   /**
   * Get permissions
   * @return permissions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "", value = "")

  public String getPermissions() {
    return permissions;
  }


  public void setPermissions(String permissions) {
    
    
    
    this.permissions = permissions;
  }


  public UserOrgAccess userAvatar(String userAvatar) {
    
    
    
    
    this.userAvatar = userAvatar;
    return this;
  }

   /**
   * Get userAvatar
   * @return userAvatar
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUserAvatar() {
    return userAvatar;
  }


  public void setUserAvatar(String userAvatar) {
    
    
    
    this.userAvatar = userAvatar;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the UserOrgAccess instance itself
   */
  public UserOrgAccess putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserOrgAccess userOrgAccess = (UserOrgAccess) o;
    return Objects.equals(this.auth0Id, userOrgAccess.auth0Id) &&
        Objects.equals(this.billingEmail, userOrgAccess.billingEmail) &&
        Objects.equals(this.fullName, userOrgAccess.fullName) &&
        Objects.equals(this.isOrgSetupComplete, userOrgAccess.isOrgSetupComplete) &&
        Objects.equals(this.isPersonalOrg, userOrgAccess.isPersonalOrg) &&
        Objects.equals(this.memberIsActive, userOrgAccess.memberIsActive) &&
        Objects.equals(this.org, userOrgAccess.org) &&
        Objects.equals(this.orgDisplayName, userOrgAccess.orgDisplayName) &&
        Objects.equals(this.orgId, userOrgAccess.orgId) &&
        Objects.equals(this.orgName, userOrgAccess.orgName) &&
        Objects.equals(this.orgStripeId, userOrgAccess.orgStripeId) &&
        Objects.equals(this.permissions, userOrgAccess.permissions) &&
        Objects.equals(this.userAvatar, userOrgAccess.userAvatar)&&
        Objects.equals(this.additionalProperties, userOrgAccess.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(auth0Id, billingEmail, fullName, isOrgSetupComplete, isPersonalOrg, memberIsActive, org, orgDisplayName, orgId, orgName, orgStripeId, permissions, userAvatar, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserOrgAccess {\n");
    sb.append("    auth0Id: ").append(toIndentedString(auth0Id)).append("\n");
    sb.append("    billingEmail: ").append(toIndentedString(billingEmail)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    isOrgSetupComplete: ").append(toIndentedString(isOrgSetupComplete)).append("\n");
    sb.append("    isPersonalOrg: ").append(toIndentedString(isPersonalOrg)).append("\n");
    sb.append("    memberIsActive: ").append(toIndentedString(memberIsActive)).append("\n");
    sb.append("    org: ").append(toIndentedString(org)).append("\n");
    sb.append("    orgDisplayName: ").append(toIndentedString(orgDisplayName)).append("\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    orgName: ").append(toIndentedString(orgName)).append("\n");
    sb.append("    orgStripeId: ").append(toIndentedString(orgStripeId)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    userAvatar: ").append(toIndentedString(userAvatar)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auth0_id");
    openapiFields.add("billing_email");
    openapiFields.add("full_name");
    openapiFields.add("is_org_setup_complete");
    openapiFields.add("is_personal_org");
    openapiFields.add("member_is_active");
    openapiFields.add("org");
    openapiFields.add("org_display_name");
    openapiFields.add("org_id");
    openapiFields.add("org_name");
    openapiFields.add("org_stripe_id");
    openapiFields.add("permissions");
    openapiFields.add("user_avatar");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("auth0_id");
    openapiRequiredFields.add("org_display_name");
    openapiRequiredFields.add("org_id");
    openapiRequiredFields.add("org_name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UserOrgAccess
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UserOrgAccess.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserOrgAccess is not found in the empty JSON string", UserOrgAccess.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserOrgAccess.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("auth0_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth0_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth0_id").toString()));
      }
      if ((jsonObj.get("billing_email") != null && !jsonObj.get("billing_email").isJsonNull()) && !jsonObj.get("billing_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing_email").toString()));
      }
      if ((jsonObj.get("full_name") != null && !jsonObj.get("full_name").isJsonNull()) && !jsonObj.get("full_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `full_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("full_name").toString()));
      }
      // validate the optional field `org`
      if (jsonObj.get("org") != null && !jsonObj.get("org").isJsonNull()) {
        Org.validateJsonObject(jsonObj.getAsJsonObject("org"));
      }
      if (!jsonObj.get("org_display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `org_display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("org_display_name").toString()));
      }
      if (!jsonObj.get("org_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `org_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("org_id").toString()));
      }
      if (!jsonObj.get("org_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `org_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("org_name").toString()));
      }
      if ((jsonObj.get("org_stripe_id") != null && !jsonObj.get("org_stripe_id").isJsonNull()) && !jsonObj.get("org_stripe_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `org_stripe_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("org_stripe_id").toString()));
      }
      if ((jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull()) && !jsonObj.get("permissions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permissions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permissions").toString()));
      }
      if ((jsonObj.get("user_avatar") != null && !jsonObj.get("user_avatar").isJsonNull()) && !jsonObj.get("user_avatar").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_avatar` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_avatar").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserOrgAccess.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserOrgAccess' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserOrgAccess> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserOrgAccess.class));

       return (TypeAdapter<T>) new TypeAdapter<UserOrgAccess>() {
           @Override
           public void write(JsonWriter out, UserOrgAccess value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public UserOrgAccess read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             UserOrgAccess instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UserOrgAccess given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UserOrgAccess
  * @throws IOException if the JSON string is invalid with respect to UserOrgAccess
  */
  public static UserOrgAccess fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserOrgAccess.class);
  }

 /**
  * Convert an instance of UserOrgAccess to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

