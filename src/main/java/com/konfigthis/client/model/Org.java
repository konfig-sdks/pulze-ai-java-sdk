/*
 * Pulze.ai API
 * At Pulze it's our mission to supercharge today's workforce with AI to maximize the world's prosperity. We are doing so by enabling companies of any size to securely leverage Large Language Models (LLM) and easily build AI features into their apps. Our enterprise platform has access to all best in class LLMs and can route user requests to the most relevant model to get the highest quality response at the best price thanks to our smart meta model. End users can leverage pre-built applications, such as our Marketing AI product, or build custom apps on top of the Pulze Platform.  We are a VC Funded, early stage startup based in San Francisco.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.OrgUsage;
import com.konfigthis.client.model.SubscriptionPaused;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Org
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Org {
  public static final String SERIALIZED_NAME_ADDED_ON = "added_on";
  @SerializedName(SERIALIZED_NAME_ADDED_ON)
  private OffsetDateTime addedOn;

  public static final String SERIALIZED_NAME_ADDRESS1 = "address_1";
  @SerializedName(SERIALIZED_NAME_ADDRESS1)
  private String address1 = "";

  public static final String SERIALIZED_NAME_ADDRESS2 = "address_2";
  @SerializedName(SERIALIZED_NAME_ADDRESS2)
  private String address2 = "";

  public static final String SERIALIZED_NAME_ADDRESS_CITY = "address_city";
  @SerializedName(SERIALIZED_NAME_ADDRESS_CITY)
  private String addressCity = "";

  public static final String SERIALIZED_NAME_ADDRESS_COUNTRY = "address_country";
  @SerializedName(SERIALIZED_NAME_ADDRESS_COUNTRY)
  private String addressCountry = "";

  public static final String SERIALIZED_NAME_ADDRESS_STATE = "address_state";
  @SerializedName(SERIALIZED_NAME_ADDRESS_STATE)
  private String addressState = "";

  public static final String SERIALIZED_NAME_ADDRESS_ZIP = "address_zip";
  @SerializedName(SERIALIZED_NAME_ADDRESS_ZIP)
  private String addressZip = "";

  public static final String SERIALIZED_NAME_BILLING_EMAIL = "billing_email";
  @SerializedName(SERIALIZED_NAME_BILLING_EMAIL)
  private String billingEmail = "";

  public static final String SERIALIZED_NAME_CREDIT_BALANCE = "credit_balance";
  @SerializedName(SERIALIZED_NAME_CREDIT_BALANCE)
  private Double creditBalance = 0d;

  /**
   * The currency for this organization
   */
  @JsonAdapter(CurrencyEnum.Adapter.class)
 public enum CurrencyEnum {
    USD("USD");

    private String value;

    CurrencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrencyEnum fromValue(String value) {
      for (CurrencyEnum b : CurrencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurrencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurrencyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private CurrencyEnum currency = CurrencyEnum.USD;

  public static final String SERIALIZED_NAME_FREE_BALANCE = "free_balance";
  @SerializedName(SERIALIZED_NAME_FREE_BALANCE)
  private Double freeBalance = 0d;

  public static final String SERIALIZED_NAME_HUBSPOT_ID = "hubspot_id";
  @SerializedName(SERIALIZED_NAME_HUBSPOT_ID)
  private String hubspotId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "is_active";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive = true;

  public static final String SERIALIZED_NAME_IS_PERSONAL = "is_personal";
  @SerializedName(SERIALIZED_NAME_IS_PERSONAL)
  private Boolean isPersonal = false;

  public static final String SERIALIZED_NAME_LAST_INVOICE_DATE = "last_invoice_date";
  @SerializedName(SERIALIZED_NAME_LAST_INVOICE_DATE)
  private OffsetDateTime lastInvoiceDate;

  public static final String SERIALIZED_NAME_LOKI_ENDPOINT = "loki_endpoint";
  @SerializedName(SERIALIZED_NAME_LOKI_ENDPOINT)
  private String lokiEndpoint;

  public static final String SERIALIZED_NAME_LOKI_ID = "loki_id";
  @SerializedName(SERIALIZED_NAME_LOKI_ID)
  private String lokiId;

  public static final String SERIALIZED_NAME_LOKI_TOKEN = "loki_token";
  @SerializedName(SERIALIZED_NAME_LOKI_TOKEN)
  private String lokiToken;

  public static final String SERIALIZED_NAME_MODIFIED_ON = "modified_on";
  @SerializedName(SERIALIZED_NAME_MODIFIED_ON)
  private OffsetDateTime modifiedOn;

  public static final String SERIALIZED_NAME_ORG_CREATOR = "org_creator";
  @SerializedName(SERIALIZED_NAME_ORG_CREATOR)
  private String orgCreator;

  public static final String SERIALIZED_NAME_ORG_DISPLAY_NAME = "org_display_name";
  @SerializedName(SERIALIZED_NAME_ORG_DISPLAY_NAME)
  private String orgDisplayName;

  public static final String SERIALIZED_NAME_ORG_LOGO = "org_logo";
  @SerializedName(SERIALIZED_NAME_ORG_LOGO)
  private String orgLogo;

  public static final String SERIALIZED_NAME_ORG_NAME = "org_name";
  @SerializedName(SERIALIZED_NAME_ORG_NAME)
  private String orgName;

  public static final String SERIALIZED_NAME_ORG_STRIPE_ID = "org_stripe_id";
  @SerializedName(SERIALIZED_NAME_ORG_STRIPE_ID)
  private String orgStripeId;

  public static final String SERIALIZED_NAME_PENDING_EXPENSE = "pending_expense";
  @SerializedName(SERIALIZED_NAME_PENDING_EXPENSE)
  private Double pendingExpense = 0d;

  public static final String SERIALIZED_NAME_PERIOD_END = "period_end";
  @SerializedName(SERIALIZED_NAME_PERIOD_END)
  private Integer periodEnd;

  public static final String SERIALIZED_NAME_PERIOD_START = "period_start";
  @SerializedName(SERIALIZED_NAME_PERIOD_START)
  private Integer periodStart;

  public static final String SERIALIZED_NAME_PROM_ENDPOINT = "prom_endpoint";
  @SerializedName(SERIALIZED_NAME_PROM_ENDPOINT)
  private String promEndpoint;

  public static final String SERIALIZED_NAME_PROM_ID = "prom_id";
  @SerializedName(SERIALIZED_NAME_PROM_ID)
  private String promId;

  public static final String SERIALIZED_NAME_PROM_TOKEN = "prom_token";
  @SerializedName(SERIALIZED_NAME_PROM_TOKEN)
  private String promToken;

  public static final String SERIALIZED_NAME_RATE_LIMIT = "rate_limit";
  @SerializedName(SERIALIZED_NAME_RATE_LIMIT)
  private Integer rateLimit = 200;

  public static final String SERIALIZED_NAME_SPENDING_LIMIT_HARD = "spending_limit_hard";
  @SerializedName(SERIALIZED_NAME_SPENDING_LIMIT_HARD)
  private Double spendingLimitHard = 0d;

  public static final String SERIALIZED_NAME_SPENDING_LIMIT_SOFT = "spending_limit_soft";
  @SerializedName(SERIALIZED_NAME_SPENDING_LIMIT_SOFT)
  private Double spendingLimitSoft = 0d;

  /**
   * The length of the Platform subscription cycle. Useful for upgrades and downgrades
   */
  @JsonAdapter(SubscriptionCycleEnum.Adapter.class)
 public enum SubscriptionCycleEnum {
    MONTHLY("monthly"),
    
    YEARLY("yearly");

    private String value;

    SubscriptionCycleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SubscriptionCycleEnum fromValue(String value) {
      for (SubscriptionCycleEnum b : SubscriptionCycleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SubscriptionCycleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubscriptionCycleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SubscriptionCycleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SubscriptionCycleEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SUBSCRIPTION_CYCLE = "subscription_cycle";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_CYCLE)
  private SubscriptionCycleEnum subscriptionCycle;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_PAUSE_REASON = "subscription_pause_reason";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_PAUSE_REASON)
  private SubscriptionPaused subscriptionPauseReason;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_PRICE_ID = "subscription_price_id";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_PRICE_ID)
  private String subscriptionPriceId;

  /**
   * The subscription tier this user is in.
   */
  @JsonAdapter(SubscriptionTierEnum.Adapter.class)
 public enum SubscriptionTierEnum {
    _NONE_("_NONE_"),
    
    STARTUP("STARTUP"),
    
    GROWTH("GROWTH"),
    
    SCALE("SCALE"),
    
    ENTERPRISE("ENTERPRISE");

    private String value;

    SubscriptionTierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SubscriptionTierEnum fromValue(String value) {
      for (SubscriptionTierEnum b : SubscriptionTierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SubscriptionTierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubscriptionTierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SubscriptionTierEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SubscriptionTierEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SUBSCRIPTION_TIER = "subscription_tier";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_TIER)
  private SubscriptionTierEnum subscriptionTier;

  public static final String SERIALIZED_NAME_TRIAL_END = "trial_end";
  @SerializedName(SERIALIZED_NAME_TRIAL_END)
  private Integer trialEnd;

  public static final String SERIALIZED_NAME_USAGE = "usage";
  @SerializedName(SERIALIZED_NAME_USAGE)
  private OrgUsage usage;

  public Org() {
  }

  public Org addedOn(OffsetDateTime addedOn) {
    
    
    
    
    this.addedOn = addedOn;
    return this;
  }

   /**
   * Get addedOn
   * @return addedOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getAddedOn() {
    return addedOn;
  }


  public void setAddedOn(OffsetDateTime addedOn) {
    
    
    
    this.addedOn = addedOn;
  }


  public Org address1(String address1) {
    
    
    
    
    this.address1 = address1;
    return this;
  }

   /**
   * Get address1
   * @return address1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "", value = "")

  public String getAddress1() {
    return address1;
  }


  public void setAddress1(String address1) {
    
    
    
    this.address1 = address1;
  }


  public Org address2(String address2) {
    
    
    
    
    this.address2 = address2;
    return this;
  }

   /**
   * Get address2
   * @return address2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "", value = "")

  public String getAddress2() {
    return address2;
  }


  public void setAddress2(String address2) {
    
    
    
    this.address2 = address2;
  }


  public Org addressCity(String addressCity) {
    
    
    
    
    this.addressCity = addressCity;
    return this;
  }

   /**
   * Get addressCity
   * @return addressCity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "", value = "")

  public String getAddressCity() {
    return addressCity;
  }


  public void setAddressCity(String addressCity) {
    
    
    
    this.addressCity = addressCity;
  }


  public Org addressCountry(String addressCountry) {
    
    
    
    
    this.addressCountry = addressCountry;
    return this;
  }

   /**
   * Get addressCountry
   * @return addressCountry
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "", value = "")

  public String getAddressCountry() {
    return addressCountry;
  }


  public void setAddressCountry(String addressCountry) {
    
    
    
    this.addressCountry = addressCountry;
  }


  public Org addressState(String addressState) {
    
    
    
    
    this.addressState = addressState;
    return this;
  }

   /**
   * Get addressState
   * @return addressState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "", value = "")

  public String getAddressState() {
    return addressState;
  }


  public void setAddressState(String addressState) {
    
    
    
    this.addressState = addressState;
  }


  public Org addressZip(String addressZip) {
    
    
    
    
    this.addressZip = addressZip;
    return this;
  }

   /**
   * Get addressZip
   * @return addressZip
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "", value = "")

  public String getAddressZip() {
    return addressZip;
  }


  public void setAddressZip(String addressZip) {
    
    
    
    this.addressZip = addressZip;
  }


  public Org billingEmail(String billingEmail) {
    
    
    
    
    this.billingEmail = billingEmail;
    return this;
  }

   /**
   * Billing email
   * @return billingEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "", value = "Billing email")

  public String getBillingEmail() {
    return billingEmail;
  }


  public void setBillingEmail(String billingEmail) {
    
    
    
    this.billingEmail = billingEmail;
  }


  public Org creditBalance(Double creditBalance) {
    
    
    
    
    this.creditBalance = creditBalance;
    return this;
  }

  public Org creditBalance(Integer creditBalance) {
    
    
    
    
    this.creditBalance = creditBalance.doubleValue();
    return this;
  }

   /**
   * The balance in this Org&#39;s account
   * @return creditBalance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "The balance in this Org's account")

  public Double getCreditBalance() {
    return creditBalance;
  }


  public void setCreditBalance(Double creditBalance) {
    
    
    
    this.creditBalance = creditBalance;
  }


  public Org currency(CurrencyEnum currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * The currency for this organization
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "USD", value = "The currency for this organization")

  public CurrencyEnum getCurrency() {
    return currency;
  }


  public void setCurrency(CurrencyEnum currency) {
    
    
    
    this.currency = currency;
  }


  public Org freeBalance(Double freeBalance) {
    
    
    
    
    this.freeBalance = freeBalance;
    return this;
  }

  public Org freeBalance(Integer freeBalance) {
    
    
    
    
    this.freeBalance = freeBalance.doubleValue();
    return this;
  }

   /**
   * If this is &gt; 0, we will deduct the balance from here instead of the credit_balance. Add credits to this Org by updating this column
   * @return freeBalance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "If this is > 0, we will deduct the balance from here instead of the credit_balance. Add credits to this Org by updating this column")

  public Double getFreeBalance() {
    return freeBalance;
  }


  public void setFreeBalance(Double freeBalance) {
    
    
    
    this.freeBalance = freeBalance;
  }


  public Org hubspotId(String hubspotId) {
    
    
    
    
    this.hubspotId = hubspotId;
    return this;
  }

   /**
   * Get hubspotId
   * @return hubspotId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getHubspotId() {
    return hubspotId;
  }


  public void setHubspotId(String hubspotId) {
    
    
    
    this.hubspotId = hubspotId;
  }


  public Org id(UUID id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    
    
    
    this.id = id;
  }


  public Org isActive(Boolean isActive) {
    
    
    
    
    this.isActive = isActive;
    return this;
  }

   /**
   * Get isActive
   * @return isActive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "")

  public Boolean getIsActive() {
    return isActive;
  }


  public void setIsActive(Boolean isActive) {
    
    
    
    this.isActive = isActive;
  }


  public Org isPersonal(Boolean isPersonal) {
    
    
    
    
    this.isPersonal = isPersonal;
    return this;
  }

   /**
   * Get isPersonal
   * @return isPersonal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "")

  public Boolean getIsPersonal() {
    return isPersonal;
  }


  public void setIsPersonal(Boolean isPersonal) {
    
    
    
    this.isPersonal = isPersonal;
  }


  public Org lastInvoiceDate(OffsetDateTime lastInvoiceDate) {
    
    
    
    
    this.lastInvoiceDate = lastInvoiceDate;
    return this;
  }

   /**
   * We track the expenses with &#x60;pending_expense&#x60;, but when we charge, we add up all the requests between &#x60;last_invoice_date&#x60; and now.
   * @return lastInvoiceDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "We track the expenses with `pending_expense`, but when we charge, we add up all the requests between `last_invoice_date` and now.")

  public OffsetDateTime getLastInvoiceDate() {
    return lastInvoiceDate;
  }


  public void setLastInvoiceDate(OffsetDateTime lastInvoiceDate) {
    
    
    
    this.lastInvoiceDate = lastInvoiceDate;
  }


  public Org lokiEndpoint(String lokiEndpoint) {
    
    
    
    
    this.lokiEndpoint = lokiEndpoint;
    return this;
  }

   /**
   * Get lokiEndpoint
   * @return lokiEndpoint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLokiEndpoint() {
    return lokiEndpoint;
  }


  public void setLokiEndpoint(String lokiEndpoint) {
    
    
    
    this.lokiEndpoint = lokiEndpoint;
  }


  public Org lokiId(String lokiId) {
    
    
    
    
    this.lokiId = lokiId;
    return this;
  }

   /**
   * Get lokiId
   * @return lokiId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLokiId() {
    return lokiId;
  }


  public void setLokiId(String lokiId) {
    
    
    
    this.lokiId = lokiId;
  }


  public Org lokiToken(String lokiToken) {
    
    
    
    
    this.lokiToken = lokiToken;
    return this;
  }

   /**
   * Get lokiToken
   * @return lokiToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLokiToken() {
    return lokiToken;
  }


  public void setLokiToken(String lokiToken) {
    
    
    
    this.lokiToken = lokiToken;
  }


  public Org modifiedOn(OffsetDateTime modifiedOn) {
    
    
    
    
    this.modifiedOn = modifiedOn;
    return this;
  }

   /**
   * Get modifiedOn
   * @return modifiedOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getModifiedOn() {
    return modifiedOn;
  }


  public void setModifiedOn(OffsetDateTime modifiedOn) {
    
    
    
    this.modifiedOn = modifiedOn;
  }


  public Org orgCreator(String orgCreator) {
    
    
    
    
    this.orgCreator = orgCreator;
    return this;
  }

   /**
   * Get orgCreator
   * @return orgCreator
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getOrgCreator() {
    return orgCreator;
  }


  public void setOrgCreator(String orgCreator) {
    
    
    
    this.orgCreator = orgCreator;
  }


  public Org orgDisplayName(String orgDisplayName) {
    
    
    
    
    this.orgDisplayName = orgDisplayName;
    return this;
  }

   /**
   * Get orgDisplayName
   * @return orgDisplayName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOrgDisplayName() {
    return orgDisplayName;
  }


  public void setOrgDisplayName(String orgDisplayName) {
    
    
    
    this.orgDisplayName = orgDisplayName;
  }


  public Org orgLogo(String orgLogo) {
    
    
    
    
    this.orgLogo = orgLogo;
    return this;
  }

   /**
   * Get orgLogo
   * @return orgLogo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOrgLogo() {
    return orgLogo;
  }


  public void setOrgLogo(String orgLogo) {
    
    
    
    this.orgLogo = orgLogo;
  }


  public Org orgName(String orgName) {
    
    
    
    
    this.orgName = orgName;
    return this;
  }

   /**
   * Get orgName
   * @return orgName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getOrgName() {
    return orgName;
  }


  public void setOrgName(String orgName) {
    
    
    
    this.orgName = orgName;
  }


  public Org orgStripeId(String orgStripeId) {
    
    
    
    
    this.orgStripeId = orgStripeId;
    return this;
  }

   /**
   * The Stripe&#39;s customer ID. &#x60;cus_xxxxxx&#x60;
   * @return orgStripeId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The Stripe's customer ID. `cus_xxxxxx`")

  public String getOrgStripeId() {
    return orgStripeId;
  }


  public void setOrgStripeId(String orgStripeId) {
    
    
    
    this.orgStripeId = orgStripeId;
  }


  public Org pendingExpense(Double pendingExpense) {
    
    
    
    
    this.pendingExpense = pendingExpense;
    return this;
  }

  public Org pendingExpense(Integer pendingExpense) {
    
    
    
    
    this.pendingExpense = pendingExpense.doubleValue();
    return this;
  }

   /**
   * A reference value for how much money has a customer spent since the last sync with Stripe. When we charge them, we don&#39;t use this value, and instead add up all the requests&#39; costs.
   * @return pendingExpense
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "A reference value for how much money has a customer spent since the last sync with Stripe. When we charge them, we don't use this value, and instead add up all the requests' costs.")

  public Double getPendingExpense() {
    return pendingExpense;
  }


  public void setPendingExpense(Double pendingExpense) {
    
    
    
    this.pendingExpense = pendingExpense;
  }


  public Org periodEnd(Integer periodEnd) {
    
    
    
    
    this.periodEnd = periodEnd;
    return this;
  }

   /**
   * The timestamp (in s) when the subscription ended or will end. The user will be billed at this point
   * @return periodEnd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The timestamp (in s) when the subscription ended or will end. The user will be billed at this point")

  public Integer getPeriodEnd() {
    return periodEnd;
  }


  public void setPeriodEnd(Integer periodEnd) {
    
    
    
    this.periodEnd = periodEnd;
  }


  public Org periodStart(Integer periodStart) {
    
    
    
    
    this.periodStart = periodStart;
    return this;
  }

   /**
   * The timestamp (in s) when the subscription started or will start. If it&#39;s not the first cycle, the user was billed at this point
   * @return periodStart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The timestamp (in s) when the subscription started or will start. If it's not the first cycle, the user was billed at this point")

  public Integer getPeriodStart() {
    return periodStart;
  }


  public void setPeriodStart(Integer periodStart) {
    
    
    
    this.periodStart = periodStart;
  }


  public Org promEndpoint(String promEndpoint) {
    
    
    
    
    this.promEndpoint = promEndpoint;
    return this;
  }

   /**
   * Get promEndpoint
   * @return promEndpoint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPromEndpoint() {
    return promEndpoint;
  }


  public void setPromEndpoint(String promEndpoint) {
    
    
    
    this.promEndpoint = promEndpoint;
  }


  public Org promId(String promId) {
    
    
    
    
    this.promId = promId;
    return this;
  }

   /**
   * Get promId
   * @return promId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPromId() {
    return promId;
  }


  public void setPromId(String promId) {
    
    
    
    this.promId = promId;
  }


  public Org promToken(String promToken) {
    
    
    
    
    this.promToken = promToken;
    return this;
  }

   /**
   * Get promToken
   * @return promToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPromToken() {
    return promToken;
  }


  public void setPromToken(String promToken) {
    
    
    
    this.promToken = promToken;
  }


  public Org rateLimit(Integer rateLimit) {
    
    
    
    
    this.rateLimit = rateLimit;
    return this;
  }

   /**
   * The rate limit for this org, per minute
   * @return rateLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "200", value = "The rate limit for this org, per minute")

  public Integer getRateLimit() {
    return rateLimit;
  }


  public void setRateLimit(Integer rateLimit) {
    
    
    
    this.rateLimit = rateLimit;
  }


  public Org spendingLimitHard(Double spendingLimitHard) {
    
    
    
    
    this.spendingLimitHard = spendingLimitHard;
    return this;
  }

  public Org spendingLimitHard(Integer spendingLimitHard) {
    
    
    
    
    this.spendingLimitHard = spendingLimitHard.doubleValue();
    return this;
  }

   /**
   * Get spendingLimitHard
   * @return spendingLimitHard
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "")

  public Double getSpendingLimitHard() {
    return spendingLimitHard;
  }


  public void setSpendingLimitHard(Double spendingLimitHard) {
    
    
    
    this.spendingLimitHard = spendingLimitHard;
  }


  public Org spendingLimitSoft(Double spendingLimitSoft) {
    
    
    
    
    this.spendingLimitSoft = spendingLimitSoft;
    return this;
  }

  public Org spendingLimitSoft(Integer spendingLimitSoft) {
    
    
    
    
    this.spendingLimitSoft = spendingLimitSoft.doubleValue();
    return this;
  }

   /**
   * Get spendingLimitSoft
   * @return spendingLimitSoft
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "")

  public Double getSpendingLimitSoft() {
    return spendingLimitSoft;
  }


  public void setSpendingLimitSoft(Double spendingLimitSoft) {
    
    
    
    this.spendingLimitSoft = spendingLimitSoft;
  }


  public Org subscriptionCycle(SubscriptionCycleEnum subscriptionCycle) {
    
    
    
    
    this.subscriptionCycle = subscriptionCycle;
    return this;
  }

   /**
   * The length of the Platform subscription cycle. Useful for upgrades and downgrades
   * @return subscriptionCycle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The length of the Platform subscription cycle. Useful for upgrades and downgrades")

  public SubscriptionCycleEnum getSubscriptionCycle() {
    return subscriptionCycle;
  }


  public void setSubscriptionCycle(SubscriptionCycleEnum subscriptionCycle) {
    
    
    
    this.subscriptionCycle = subscriptionCycle;
  }


  public Org subscriptionPauseReason(SubscriptionPaused subscriptionPauseReason) {
    
    
    
    
    this.subscriptionPauseReason = subscriptionPauseReason;
    return this;
  }

   /**
   * The reason the subscription was paused. If &#x60;null&#x60;, the subscription is considered active
   * @return subscriptionPauseReason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The reason the subscription was paused. If `null`, the subscription is considered active")

  public SubscriptionPaused getSubscriptionPauseReason() {
    return subscriptionPauseReason;
  }


  public void setSubscriptionPauseReason(SubscriptionPaused subscriptionPauseReason) {
    
    
    
    this.subscriptionPauseReason = subscriptionPauseReason;
  }


  public Org subscriptionPriceId(String subscriptionPriceId) {
    
    
    
    
    this.subscriptionPriceId = subscriptionPriceId;
    return this;
  }

   /**
   * PRICE ID (on Stripe). The user&#39;s current Subscription ID is created from this Price
   * @return subscriptionPriceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "PRICE ID (on Stripe). The user's current Subscription ID is created from this Price")

  public String getSubscriptionPriceId() {
    return subscriptionPriceId;
  }


  public void setSubscriptionPriceId(String subscriptionPriceId) {
    
    
    
    this.subscriptionPriceId = subscriptionPriceId;
  }


  public Org subscriptionTier(SubscriptionTierEnum subscriptionTier) {
    
    
    
    
    this.subscriptionTier = subscriptionTier;
    return this;
  }

   /**
   * The subscription tier this user is in.
   * @return subscriptionTier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The subscription tier this user is in.")

  public SubscriptionTierEnum getSubscriptionTier() {
    return subscriptionTier;
  }


  public void setSubscriptionTier(SubscriptionTierEnum subscriptionTier) {
    
    
    
    this.subscriptionTier = subscriptionTier;
  }


  public Org trialEnd(Integer trialEnd) {
    
    
    
    
    this.trialEnd = trialEnd;
    return this;
  }

   /**
   * The timestamp (in s) when the trial will end and the paid subscription will start. The user will be billed at this point
   * @return trialEnd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The timestamp (in s) when the trial will end and the paid subscription will start. The user will be billed at this point")

  public Integer getTrialEnd() {
    return trialEnd;
  }


  public void setTrialEnd(Integer trialEnd) {
    
    
    
    this.trialEnd = trialEnd;
  }


  public Org usage(OrgUsage usage) {
    
    
    
    
    this.usage = usage;
    return this;
  }

   /**
   * The Usage stats (view) for this org
   * @return usage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Usage stats (view) for this org")

  public OrgUsage getUsage() {
    return usage;
  }


  public void setUsage(OrgUsage usage) {
    
    
    
    this.usage = usage;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Org instance itself
   */
  public Org putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Org org = (Org) o;
    return Objects.equals(this.addedOn, org.addedOn) &&
        Objects.equals(this.address1, org.address1) &&
        Objects.equals(this.address2, org.address2) &&
        Objects.equals(this.addressCity, org.addressCity) &&
        Objects.equals(this.addressCountry, org.addressCountry) &&
        Objects.equals(this.addressState, org.addressState) &&
        Objects.equals(this.addressZip, org.addressZip) &&
        Objects.equals(this.billingEmail, org.billingEmail) &&
        Objects.equals(this.creditBalance, org.creditBalance) &&
        Objects.equals(this.currency, org.currency) &&
        Objects.equals(this.freeBalance, org.freeBalance) &&
        Objects.equals(this.hubspotId, org.hubspotId) &&
        Objects.equals(this.id, org.id) &&
        Objects.equals(this.isActive, org.isActive) &&
        Objects.equals(this.isPersonal, org.isPersonal) &&
        Objects.equals(this.lastInvoiceDate, org.lastInvoiceDate) &&
        Objects.equals(this.lokiEndpoint, org.lokiEndpoint) &&
        Objects.equals(this.lokiId, org.lokiId) &&
        Objects.equals(this.lokiToken, org.lokiToken) &&
        Objects.equals(this.modifiedOn, org.modifiedOn) &&
        Objects.equals(this.orgCreator, org.orgCreator) &&
        Objects.equals(this.orgDisplayName, org.orgDisplayName) &&
        Objects.equals(this.orgLogo, org.orgLogo) &&
        Objects.equals(this.orgName, org.orgName) &&
        Objects.equals(this.orgStripeId, org.orgStripeId) &&
        Objects.equals(this.pendingExpense, org.pendingExpense) &&
        Objects.equals(this.periodEnd, org.periodEnd) &&
        Objects.equals(this.periodStart, org.periodStart) &&
        Objects.equals(this.promEndpoint, org.promEndpoint) &&
        Objects.equals(this.promId, org.promId) &&
        Objects.equals(this.promToken, org.promToken) &&
        Objects.equals(this.rateLimit, org.rateLimit) &&
        Objects.equals(this.spendingLimitHard, org.spendingLimitHard) &&
        Objects.equals(this.spendingLimitSoft, org.spendingLimitSoft) &&
        Objects.equals(this.subscriptionCycle, org.subscriptionCycle) &&
        Objects.equals(this.subscriptionPauseReason, org.subscriptionPauseReason) &&
        Objects.equals(this.subscriptionPriceId, org.subscriptionPriceId) &&
        Objects.equals(this.subscriptionTier, org.subscriptionTier) &&
        Objects.equals(this.trialEnd, org.trialEnd) &&
        Objects.equals(this.usage, org.usage)&&
        Objects.equals(this.additionalProperties, org.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addedOn, address1, address2, addressCity, addressCountry, addressState, addressZip, billingEmail, creditBalance, currency, freeBalance, hubspotId, id, isActive, isPersonal, lastInvoiceDate, lokiEndpoint, lokiId, lokiToken, modifiedOn, orgCreator, orgDisplayName, orgLogo, orgName, orgStripeId, pendingExpense, periodEnd, periodStart, promEndpoint, promId, promToken, rateLimit, spendingLimitHard, spendingLimitSoft, subscriptionCycle, subscriptionPauseReason, subscriptionPriceId, subscriptionTier, trialEnd, usage, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Org {\n");
    sb.append("    addedOn: ").append(toIndentedString(addedOn)).append("\n");
    sb.append("    address1: ").append(toIndentedString(address1)).append("\n");
    sb.append("    address2: ").append(toIndentedString(address2)).append("\n");
    sb.append("    addressCity: ").append(toIndentedString(addressCity)).append("\n");
    sb.append("    addressCountry: ").append(toIndentedString(addressCountry)).append("\n");
    sb.append("    addressState: ").append(toIndentedString(addressState)).append("\n");
    sb.append("    addressZip: ").append(toIndentedString(addressZip)).append("\n");
    sb.append("    billingEmail: ").append(toIndentedString(billingEmail)).append("\n");
    sb.append("    creditBalance: ").append(toIndentedString(creditBalance)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    freeBalance: ").append(toIndentedString(freeBalance)).append("\n");
    sb.append("    hubspotId: ").append(toIndentedString(hubspotId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    isPersonal: ").append(toIndentedString(isPersonal)).append("\n");
    sb.append("    lastInvoiceDate: ").append(toIndentedString(lastInvoiceDate)).append("\n");
    sb.append("    lokiEndpoint: ").append(toIndentedString(lokiEndpoint)).append("\n");
    sb.append("    lokiId: ").append(toIndentedString(lokiId)).append("\n");
    sb.append("    lokiToken: ").append(toIndentedString(lokiToken)).append("\n");
    sb.append("    modifiedOn: ").append(toIndentedString(modifiedOn)).append("\n");
    sb.append("    orgCreator: ").append(toIndentedString(orgCreator)).append("\n");
    sb.append("    orgDisplayName: ").append(toIndentedString(orgDisplayName)).append("\n");
    sb.append("    orgLogo: ").append(toIndentedString(orgLogo)).append("\n");
    sb.append("    orgName: ").append(toIndentedString(orgName)).append("\n");
    sb.append("    orgStripeId: ").append(toIndentedString(orgStripeId)).append("\n");
    sb.append("    pendingExpense: ").append(toIndentedString(pendingExpense)).append("\n");
    sb.append("    periodEnd: ").append(toIndentedString(periodEnd)).append("\n");
    sb.append("    periodStart: ").append(toIndentedString(periodStart)).append("\n");
    sb.append("    promEndpoint: ").append(toIndentedString(promEndpoint)).append("\n");
    sb.append("    promId: ").append(toIndentedString(promId)).append("\n");
    sb.append("    promToken: ").append(toIndentedString(promToken)).append("\n");
    sb.append("    rateLimit: ").append(toIndentedString(rateLimit)).append("\n");
    sb.append("    spendingLimitHard: ").append(toIndentedString(spendingLimitHard)).append("\n");
    sb.append("    spendingLimitSoft: ").append(toIndentedString(spendingLimitSoft)).append("\n");
    sb.append("    subscriptionCycle: ").append(toIndentedString(subscriptionCycle)).append("\n");
    sb.append("    subscriptionPauseReason: ").append(toIndentedString(subscriptionPauseReason)).append("\n");
    sb.append("    subscriptionPriceId: ").append(toIndentedString(subscriptionPriceId)).append("\n");
    sb.append("    subscriptionTier: ").append(toIndentedString(subscriptionTier)).append("\n");
    sb.append("    trialEnd: ").append(toIndentedString(trialEnd)).append("\n");
    sb.append("    usage: ").append(toIndentedString(usage)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("added_on");
    openapiFields.add("address_1");
    openapiFields.add("address_2");
    openapiFields.add("address_city");
    openapiFields.add("address_country");
    openapiFields.add("address_state");
    openapiFields.add("address_zip");
    openapiFields.add("billing_email");
    openapiFields.add("credit_balance");
    openapiFields.add("currency");
    openapiFields.add("free_balance");
    openapiFields.add("hubspot_id");
    openapiFields.add("id");
    openapiFields.add("is_active");
    openapiFields.add("is_personal");
    openapiFields.add("last_invoice_date");
    openapiFields.add("loki_endpoint");
    openapiFields.add("loki_id");
    openapiFields.add("loki_token");
    openapiFields.add("modified_on");
    openapiFields.add("org_creator");
    openapiFields.add("org_display_name");
    openapiFields.add("org_logo");
    openapiFields.add("org_name");
    openapiFields.add("org_stripe_id");
    openapiFields.add("pending_expense");
    openapiFields.add("period_end");
    openapiFields.add("period_start");
    openapiFields.add("prom_endpoint");
    openapiFields.add("prom_id");
    openapiFields.add("prom_token");
    openapiFields.add("rate_limit");
    openapiFields.add("spending_limit_hard");
    openapiFields.add("spending_limit_soft");
    openapiFields.add("subscription_cycle");
    openapiFields.add("subscription_pause_reason");
    openapiFields.add("subscription_price_id");
    openapiFields.add("subscription_tier");
    openapiFields.add("trial_end");
    openapiFields.add("usage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("last_invoice_date");
    openapiRequiredFields.add("org_creator");
    openapiRequiredFields.add("org_name");
    openapiRequiredFields.add("org_stripe_id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Org
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Org.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Org is not found in the empty JSON string", Org.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Org.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("address_1") != null && !jsonObj.get("address_1").isJsonNull()) && !jsonObj.get("address_1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_1").toString()));
      }
      if ((jsonObj.get("address_2") != null && !jsonObj.get("address_2").isJsonNull()) && !jsonObj.get("address_2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_2").toString()));
      }
      if ((jsonObj.get("address_city") != null && !jsonObj.get("address_city").isJsonNull()) && !jsonObj.get("address_city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_city").toString()));
      }
      if ((jsonObj.get("address_country") != null && !jsonObj.get("address_country").isJsonNull()) && !jsonObj.get("address_country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_country").toString()));
      }
      if ((jsonObj.get("address_state") != null && !jsonObj.get("address_state").isJsonNull()) && !jsonObj.get("address_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_state").toString()));
      }
      if ((jsonObj.get("address_zip") != null && !jsonObj.get("address_zip").isJsonNull()) && !jsonObj.get("address_zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_zip").toString()));
      }
      if ((jsonObj.get("billing_email") != null && !jsonObj.get("billing_email").isJsonNull()) && !jsonObj.get("billing_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing_email").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("hubspot_id") != null && !jsonObj.get("hubspot_id").isJsonNull()) && !jsonObj.get("hubspot_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hubspot_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hubspot_id").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("loki_endpoint") != null && !jsonObj.get("loki_endpoint").isJsonNull()) && !jsonObj.get("loki_endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loki_endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loki_endpoint").toString()));
      }
      if ((jsonObj.get("loki_id") != null && !jsonObj.get("loki_id").isJsonNull()) && !jsonObj.get("loki_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loki_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loki_id").toString()));
      }
      if ((jsonObj.get("loki_token") != null && !jsonObj.get("loki_token").isJsonNull()) && !jsonObj.get("loki_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loki_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loki_token").toString()));
      }
      if (!jsonObj.get("org_creator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `org_creator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("org_creator").toString()));
      }
      if ((jsonObj.get("org_display_name") != null && !jsonObj.get("org_display_name").isJsonNull()) && !jsonObj.get("org_display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `org_display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("org_display_name").toString()));
      }
      if ((jsonObj.get("org_logo") != null && !jsonObj.get("org_logo").isJsonNull()) && !jsonObj.get("org_logo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `org_logo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("org_logo").toString()));
      }
      if (!jsonObj.get("org_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `org_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("org_name").toString()));
      }
      if (!jsonObj.get("org_stripe_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `org_stripe_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("org_stripe_id").toString()));
      }
      if ((jsonObj.get("prom_endpoint") != null && !jsonObj.get("prom_endpoint").isJsonNull()) && !jsonObj.get("prom_endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prom_endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prom_endpoint").toString()));
      }
      if ((jsonObj.get("prom_id") != null && !jsonObj.get("prom_id").isJsonNull()) && !jsonObj.get("prom_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prom_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prom_id").toString()));
      }
      if ((jsonObj.get("prom_token") != null && !jsonObj.get("prom_token").isJsonNull()) && !jsonObj.get("prom_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prom_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prom_token").toString()));
      }
      if ((jsonObj.get("subscription_cycle") != null && !jsonObj.get("subscription_cycle").isJsonNull()) && !jsonObj.get("subscription_cycle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscription_cycle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscription_cycle").toString()));
      }
      // validate the optional field `subscription_pause_reason`
      if (jsonObj.get("subscription_pause_reason") != null && !jsonObj.get("subscription_pause_reason").isJsonNull()) {
        SubscriptionPaused.validateJsonObject(jsonObj.getAsJsonObject("subscription_pause_reason"));
      }
      if ((jsonObj.get("subscription_price_id") != null && !jsonObj.get("subscription_price_id").isJsonNull()) && !jsonObj.get("subscription_price_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscription_price_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscription_price_id").toString()));
      }
      if ((jsonObj.get("subscription_tier") != null && !jsonObj.get("subscription_tier").isJsonNull()) && !jsonObj.get("subscription_tier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscription_tier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscription_tier").toString()));
      }
      // validate the optional field `usage`
      if (jsonObj.get("usage") != null && !jsonObj.get("usage").isJsonNull()) {
        OrgUsage.validateJsonObject(jsonObj.getAsJsonObject("usage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Org.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Org' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Org> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Org.class));

       return (TypeAdapter<T>) new TypeAdapter<Org>() {
           @Override
           public void write(JsonWriter out, Org value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Org read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Org instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Org given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Org
  * @throws IOException if the JSON string is invalid with respect to Org
  */
  public static Org fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Org.class);
  }

 /**
  * Convert an instance of Org to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

