/*
 * Pulze.ai API
 * At Pulze it's our mission to supercharge today's workforce with AI to maximize the world's prosperity. We are doing so by enabling companies of any size to securely leverage Large Language Models (LLM) and easily build AI features into their apps. Our enterprise platform has access to all best in class LLMs and can route user requests to the most relevant model to get the highest quality response at the best price thanks to our smart meta model. End users can leverage pre-built applications, such as our Marketing AI product, or build custom apps on top of the Pulze Platform.  We are a VC Funded, early stage startup based in San Francisco.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.PulzeCompletionRequest;
import com.konfigthis.client.model.PulzeEngineResponse;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * RequestInDBBase
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class RequestInDBBase {
  public static final String SERIALIZED_NAME_APP_ID = "app_id";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private UUID appId;

  public static final String SERIALIZED_NAME_CHILDREN = "children";
  @SerializedName(SERIALIZED_NAME_CHILDREN)
  private List<Object> children = null;

  public static final String SERIALIZED_NAME_COSTS_INCURRED = "costs_incurred";
  @SerializedName(SERIALIZED_NAME_COSTS_INCURRED)
  private Boolean costsIncurred = true;

  public static final String SERIALIZED_NAME_FEEDBACK = "feedback";
  @SerializedName(SERIALIZED_NAME_FEEDBACK)
  private String feedback = "";

  public static final String SERIALIZED_NAME_GOOD_ANSWER = "good_answer";
  @SerializedName(SERIALIZED_NAME_GOOD_ANSWER)
  private Boolean goodAnswer;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private Object parent;

  public static final String SERIALIZED_NAME_PARENT_ID = "parent_id";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  private UUID parentId;

  public static final String SERIALIZED_NAME_PAYLOAD = "payload";
  @SerializedName(SERIALIZED_NAME_PAYLOAD)
  private PulzeCompletionRequest payload;

  /**
   * How much is logged? 1: everything, 2: mask request+response (but show log), 3: Not visible, not retrievable, no information stored.
   */
  @JsonAdapter(PrivacyLevelEnum.Adapter.class)
 public enum PrivacyLevelEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3);

    private Integer value;

    PrivacyLevelEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PrivacyLevelEnum fromValue(Integer value) {
      for (PrivacyLevelEnum b : PrivacyLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PrivacyLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrivacyLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PrivacyLevelEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return PrivacyLevelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PRIVACY_LEVEL = "privacy_level";
  @SerializedName(SERIALIZED_NAME_PRIVACY_LEVEL)
  private PrivacyLevelEnum privacyLevel = PrivacyLevelEnum.NUMBER_1;

  public static final String SERIALIZED_NAME_PROMPT = "prompt";
  @SerializedName(SERIALIZED_NAME_PROMPT)
  private String prompt;

  /**
   * The type of request (text completion or chat) the user sends and expects back
   */
  @JsonAdapter(RequestTypeEnum.Adapter.class)
 public enum RequestTypeEnum {
    COMPLETIONS("completions"),
    
    CHAT_COMPLETIONS("chat_completions");

    private String value;

    RequestTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RequestTypeEnum fromValue(String value) {
      for (RequestTypeEnum b : RequestTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RequestTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RequestTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RequestTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RequestTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REQUEST_TYPE = "request_type";
  @SerializedName(SERIALIZED_NAME_REQUEST_TYPE)
  private RequestTypeEnum requestType;

  public static final String SERIALIZED_NAME_RESPONSE = "response";
  @SerializedName(SERIALIZED_NAME_RESPONSE)
  private PulzeEngineResponse response;

  public static final String SERIALIZED_NAME_RESPONSE_TEXT = "response_text";
  @SerializedName(SERIALIZED_NAME_RESPONSE_TEXT)
  private String responseText;

  public static final String SERIALIZED_NAME_STATUS_CODE = "status_code";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private Integer statusCode = -1;

  public RequestInDBBase() {
  }

  public RequestInDBBase appId(UUID appId) {
    
    
    
    
    this.appId = appId;
    return this;
  }

   /**
   * The ID of the app that performed the request
   * @return appId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the app that performed the request")

  public UUID getAppId() {
    return appId;
  }


  public void setAppId(UUID appId) {
    
    
    
    this.appId = appId;
  }


  public RequestInDBBase children(List<Object> children) {
    
    
    
    
    this.children = children;
    return this;
  }

  public RequestInDBBase addChildrenItem(Object childrenItem) {
    if (this.children == null) {
      this.children = new ArrayList<>();
    }
    this.children.add(childrenItem);
    return this;
  }

   /**
   * The children of the Request. Will equal None unless you use eager loading in the query
   * @return children
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The children of the Request. Will equal None unless you use eager loading in the query")

  public List<Object> getChildren() {
    return children;
  }


  public void setChildren(List<Object> children) {
    
    
    
    this.children = children;
  }


  public RequestInDBBase costsIncurred(Boolean costsIncurred) {
    
    
    
    
    this.costsIncurred = costsIncurred;
    return this;
  }

   /**
   * When a request requires multiple intermediate calls, they are stored as &#39;no costs incurred&#39; -- that way we can store the costs, but don&#39;t charge the user
   * @return costsIncurred
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "When a request requires multiple intermediate calls, they are stored as 'no costs incurred' -- that way we can store the costs, but don't charge the user")

  public Boolean getCostsIncurred() {
    return costsIncurred;
  }


  public void setCostsIncurred(Boolean costsIncurred) {
    
    
    
    this.costsIncurred = costsIncurred;
  }


  public RequestInDBBase feedback(String feedback) {
    
    
    
    
    this.feedback = feedback;
    return this;
  }

   /**
   * A free text providing more detailed feedback
   * @return feedback
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "", value = "A free text providing more detailed feedback")

  public String getFeedback() {
    return feedback;
  }


  public void setFeedback(String feedback) {
    
    
    
    this.feedback = feedback;
  }


  public RequestInDBBase goodAnswer(Boolean goodAnswer) {
    
    
    
    
    this.goodAnswer = goodAnswer;
    return this;
  }

   /**
   * The rating for the request
   * @return goodAnswer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The rating for the request")

  public Boolean getGoodAnswer() {
    return goodAnswer;
  }


  public void setGoodAnswer(Boolean goodAnswer) {
    
    
    
    this.goodAnswer = goodAnswer;
  }


  public RequestInDBBase id(UUID id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * ID of the request
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "ID of the request")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    
    
    
    this.id = id;
  }


  public RequestInDBBase namespace(String namespace) {
    
    
    
    
    this.namespace = namespace;
    return this;
  }

   /**
   * The name of the provider&#39;s model which was used to answer the request
   * @return namespace
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the provider's model which was used to answer the request")

  public String getNamespace() {
    return namespace;
  }


  public void setNamespace(String namespace) {
    
    
    
    this.namespace = namespace;
  }


  public RequestInDBBase parent(Object parent) {
    
    
    
    
    this.parent = parent;
    return this;
  }

   /**
   * The parent of the Request, if any. Requests which are part of a series of sub-requests (like multiple LLM calls, or RAG) will have the final, resulting Log as parent.
   * @return parent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The parent of the Request, if any. Requests which are part of a series of sub-requests (like multiple LLM calls, or RAG) will have the final, resulting Log as parent.")

  public Object getParent() {
    return parent;
  }


  public void setParent(Object parent) {
    
    
    
    this.parent = parent;
  }


  public RequestInDBBase parentId(UUID parentId) {
    
    
    
    
    this.parentId = parentId;
    return this;
  }

   /**
   * Reference to the ID of the parent of this log. A log has a parent when it&#39;s a subrequest used to retrieve the final answer.
   * @return parentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Reference to the ID of the parent of this log. A log has a parent when it's a subrequest used to retrieve the final answer.")

  public UUID getParentId() {
    return parentId;
  }


  public void setParentId(UUID parentId) {
    
    
    
    this.parentId = parentId;
  }


  public RequestInDBBase payload(PulzeCompletionRequest payload) {
    
    
    
    
    this.payload = payload;
    return this;
  }

   /**
   * The payload sent with the request
   * @return payload
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The payload sent with the request")

  public PulzeCompletionRequest getPayload() {
    return payload;
  }


  public void setPayload(PulzeCompletionRequest payload) {
    
    
    
    this.payload = payload;
  }


  public RequestInDBBase privacyLevel(PrivacyLevelEnum privacyLevel) {
    
    
    
    
    this.privacyLevel = privacyLevel;
    return this;
  }

   /**
   * How much is logged? 1: everything, 2: mask request+response (but show log), 3: Not visible, not retrievable, no information stored.
   * @return privacyLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "_1", value = "How much is logged? 1: everything, 2: mask request+response (but show log), 3: Not visible, not retrievable, no information stored.")

  public PrivacyLevelEnum getPrivacyLevel() {
    return privacyLevel;
  }


  public void setPrivacyLevel(PrivacyLevelEnum privacyLevel) {
    
    
    
    this.privacyLevel = privacyLevel;
  }


  public RequestInDBBase prompt(String prompt) {
    
    
    
    
    this.prompt = prompt;
    return this;
  }

   /**
   * The prompt in text format
   * @return prompt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The prompt in text format")

  public String getPrompt() {
    return prompt;
  }


  public void setPrompt(String prompt) {
    
    
    
    this.prompt = prompt;
  }


  public RequestInDBBase requestType(RequestTypeEnum requestType) {
    
    
    
    
    this.requestType = requestType;
    return this;
  }

   /**
   * The type of request (text completion or chat) the user sends and expects back
   * @return requestType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of request (text completion or chat) the user sends and expects back")

  public RequestTypeEnum getRequestType() {
    return requestType;
  }


  public void setRequestType(RequestTypeEnum requestType) {
    
    
    
    this.requestType = requestType;
  }


  public RequestInDBBase response(PulzeEngineResponse response) {
    
    
    
    
    this.response = response;
    return this;
  }

   /**
   * The response object
   * @return response
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The response object")

  public PulzeEngineResponse getResponse() {
    return response;
  }


  public void setResponse(PulzeEngineResponse response) {
    
    
    
    this.response = response;
  }


  public RequestInDBBase responseText(String responseText) {
    
    
    
    
    this.responseText = responseText;
    return this;
  }

   /**
   * The response in text format
   * @return responseText
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The response in text format")

  public String getResponseText() {
    return responseText;
  }


  public void setResponseText(String responseText) {
    
    
    
    this.responseText = responseText;
  }


  public RequestInDBBase statusCode(Integer statusCode) {
    
    
    
    
    this.statusCode = statusCode;
    return this;
  }

   /**
   * The status code of the request to the AI model
   * @return statusCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "-1", value = "The status code of the request to the AI model")

  public Integer getStatusCode() {
    return statusCode;
  }


  public void setStatusCode(Integer statusCode) {
    
    
    
    this.statusCode = statusCode;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the RequestInDBBase instance itself
   */
  public RequestInDBBase putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestInDBBase requestInDBBase = (RequestInDBBase) o;
    return Objects.equals(this.appId, requestInDBBase.appId) &&
        Objects.equals(this.children, requestInDBBase.children) &&
        Objects.equals(this.costsIncurred, requestInDBBase.costsIncurred) &&
        Objects.equals(this.feedback, requestInDBBase.feedback) &&
        Objects.equals(this.goodAnswer, requestInDBBase.goodAnswer) &&
        Objects.equals(this.id, requestInDBBase.id) &&
        Objects.equals(this.namespace, requestInDBBase.namespace) &&
        Objects.equals(this.parent, requestInDBBase.parent) &&
        Objects.equals(this.parentId, requestInDBBase.parentId) &&
        Objects.equals(this.payload, requestInDBBase.payload) &&
        Objects.equals(this.privacyLevel, requestInDBBase.privacyLevel) &&
        Objects.equals(this.prompt, requestInDBBase.prompt) &&
        Objects.equals(this.requestType, requestInDBBase.requestType) &&
        Objects.equals(this.response, requestInDBBase.response) &&
        Objects.equals(this.responseText, requestInDBBase.responseText) &&
        Objects.equals(this.statusCode, requestInDBBase.statusCode)&&
        Objects.equals(this.additionalProperties, requestInDBBase.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appId, children, costsIncurred, feedback, goodAnswer, id, namespace, parent, parentId, payload, privacyLevel, prompt, requestType, response, responseText, statusCode, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestInDBBase {\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("    costsIncurred: ").append(toIndentedString(costsIncurred)).append("\n");
    sb.append("    feedback: ").append(toIndentedString(feedback)).append("\n");
    sb.append("    goodAnswer: ").append(toIndentedString(goodAnswer)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
    sb.append("    privacyLevel: ").append(toIndentedString(privacyLevel)).append("\n");
    sb.append("    prompt: ").append(toIndentedString(prompt)).append("\n");
    sb.append("    requestType: ").append(toIndentedString(requestType)).append("\n");
    sb.append("    response: ").append(toIndentedString(response)).append("\n");
    sb.append("    responseText: ").append(toIndentedString(responseText)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("app_id");
    openapiFields.add("children");
    openapiFields.add("costs_incurred");
    openapiFields.add("feedback");
    openapiFields.add("good_answer");
    openapiFields.add("id");
    openapiFields.add("namespace");
    openapiFields.add("parent");
    openapiFields.add("parent_id");
    openapiFields.add("payload");
    openapiFields.add("privacy_level");
    openapiFields.add("prompt");
    openapiFields.add("request_type");
    openapiFields.add("response");
    openapiFields.add("response_text");
    openapiFields.add("status_code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("response");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RequestInDBBase
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RequestInDBBase.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RequestInDBBase is not found in the empty JSON string", RequestInDBBase.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RequestInDBBase.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("app_id") != null && !jsonObj.get("app_id").isJsonNull()) && !jsonObj.get("app_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("children") != null && !jsonObj.get("children").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `children` to be an array in the JSON string but got `%s`", jsonObj.get("children").toString()));
      }
      if ((jsonObj.get("feedback") != null && !jsonObj.get("feedback").isJsonNull()) && !jsonObj.get("feedback").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feedback` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feedback").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("namespace") != null && !jsonObj.get("namespace").isJsonNull()) && !jsonObj.get("namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace").toString()));
      }
      // validate the optional field `parent`
      if (jsonObj.get("parent") != null && !jsonObj.get("parent").isJsonNull()) {
        Object.validateJsonObject(jsonObj.getAsJsonObject("parent"));
      }
      if ((jsonObj.get("parent_id") != null && !jsonObj.get("parent_id").isJsonNull()) && !jsonObj.get("parent_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_id").toString()));
      }
      // validate the optional field `payload`
      if (jsonObj.get("payload") != null && !jsonObj.get("payload").isJsonNull()) {
        PulzeCompletionRequest.validateJsonObject(jsonObj.getAsJsonObject("payload"));
      }
      if ((jsonObj.get("prompt") != null && !jsonObj.get("prompt").isJsonNull()) && !jsonObj.get("prompt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prompt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prompt").toString()));
      }
      if ((jsonObj.get("request_type") != null && !jsonObj.get("request_type").isJsonNull()) && !jsonObj.get("request_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_type").toString()));
      }
      // validate the required field `response`
      PulzeEngineResponse.validateJsonObject(jsonObj.getAsJsonObject("response"));
      if ((jsonObj.get("response_text") != null && !jsonObj.get("response_text").isJsonNull()) && !jsonObj.get("response_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `response_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("response_text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RequestInDBBase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RequestInDBBase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RequestInDBBase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RequestInDBBase.class));

       return (TypeAdapter<T>) new TypeAdapter<RequestInDBBase>() {
           @Override
           public void write(JsonWriter out, RequestInDBBase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public RequestInDBBase read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             RequestInDBBase instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RequestInDBBase given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RequestInDBBase
  * @throws IOException if the JSON string is invalid with respect to RequestInDBBase
  */
  public static RequestInDBBase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RequestInDBBase.class);
  }

 /**
  * Convert an instance of RequestInDBBase to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

