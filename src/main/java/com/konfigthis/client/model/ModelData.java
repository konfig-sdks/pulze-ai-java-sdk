/*
 * Pulze.ai API
 * At Pulze it's our mission to supercharge today's workforce with AI to maximize the world's prosperity. We are doing so by enabling companies of any size to securely leverage Large Language Models (LLM) and easily build AI features into their apps. Our enterprise platform has access to all best in class LLMs and can route user requests to the most relevant model to get the highest quality response at the best price thanks to our smart meta model. End users can leverage pre-built applications, such as our Marketing AI product, or build custom apps on top of the Pulze Platform.  We are a VC Funded, early stage startup based in San Francisco.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ModelData
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ModelData {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ADDED_BY = "added_by";
  @SerializedName(SERIALIZED_NAME_ADDED_BY)
  private String addedBy;

  public static final String SERIALIZED_NAME_ADDED_ON = "added_on";
  @SerializedName(SERIALIZED_NAME_ADDED_ON)
  private OffsetDateTime addedOn;

  public static final String SERIALIZED_NAME_APP_ID = "app_id";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private UUID appId;

  public static final String SERIALIZED_NAME_AT = "at";
  @SerializedName(SERIALIZED_NAME_AT)
  private String at;

  public static final String SERIALIZED_NAME_BASE_COST = "base_cost";
  @SerializedName(SERIALIZED_NAME_BASE_COST)
  private Double baseCost;

  public static final String SERIALIZED_NAME_COMPLETION_TOKEN_COST = "completion_token_cost";
  @SerializedName(SERIALIZED_NAME_COMPLETION_TOKEN_COST)
  private Double completionTokenCost;

  public static final String SERIALIZED_NAME_CONTEXT_WINDOW = "context_window";
  @SerializedName(SERIALIZED_NAME_CONTEXT_WINDOW)
  private Integer contextWindow;

  public static final String SERIALIZED_NAME_DEFAULT_ACTIVE = "default_active";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ACTIVE)
  private Boolean defaultActive;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_IS_CHAT = "is_chat";
  @SerializedName(SERIALIZED_NAME_IS_CHAT)
  private Boolean isChat;

  public static final String SERIALIZED_NAME_IS_FT = "is_ft";
  @SerializedName(SERIALIZED_NAME_IS_FT)
  private Boolean isFt;

  public static final String SERIALIZED_NAME_IS_GDPR = "is_gdpr";
  @SerializedName(SERIALIZED_NAME_IS_GDPR)
  private Boolean isGdpr;

  public static final String SERIALIZED_NAME_IS_OPEN_SOURCE = "is_open_source";
  @SerializedName(SERIALIZED_NAME_IS_OPEN_SOURCE)
  private Boolean isOpenSource;

  public static final String SERIALIZED_NAME_IS_PUBLIC = "is_public";
  @SerializedName(SERIALIZED_NAME_IS_PUBLIC)
  private Boolean isPublic;

  public static final String SERIALIZED_NAME_IS_PULZE_OWNER = "is_pulze_owner";
  @SerializedName(SERIALIZED_NAME_IS_PULZE_OWNER)
  private Boolean isPulzeOwner;

  public static final String SERIALIZED_NAME_IS_RAG = "is_rag";
  @SerializedName(SERIALIZED_NAME_IS_RAG)
  private Boolean isRag;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_MODIFIED_ON = "modified_on";
  @SerializedName(SERIALIZED_NAME_MODIFIED_ON)
  private OffsetDateTime modifiedOn;

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public static final String SERIALIZED_NAME_ORG_ID = "org_id";
  @SerializedName(SERIALIZED_NAME_ORG_ID)
  private UUID orgId;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_PROMPT_TOKEN_COST = "prompt_token_cost";
  @SerializedName(SERIALIZED_NAME_PROMPT_TOKEN_COST)
  private Double promptTokenCost;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private String provider;

  public static final String SERIALIZED_NAME_SUPPORTS_FUNCTIONS = "supports_functions";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_FUNCTIONS)
  private Boolean supportsFunctions;

  public static final String SERIALIZED_NAME_SUPPORTS_JSON = "supports_json";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_JSON)
  private Boolean supportsJson;

  public static final String SERIALIZED_NAME_SUPPORTS_N = "supports_n";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_N)
  private Boolean supportsN;

  public static final String SERIALIZED_NAME_SUPPORTS_PENALTIES = "supports_penalties";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_PENALTIES)
  private Boolean supportsPenalties;

  public static final String SERIALIZED_NAME_SUPPORTS_STREAM = "supports_stream";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_STREAM)
  private Boolean supportsStream;

  public static final String SERIALIZED_NAME_UNTIL = "until";
  @SerializedName(SERIALIZED_NAME_UNTIL)
  private OffsetDateTime until;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public ModelData() {
  }

  public ModelData description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description of the model
   * @return description
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A description of the model")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public ModelData addedBy(String addedBy) {
    
    
    
    
    this.addedBy = addedBy;
    return this;
  }

   /**
   * The user (auth0_id) who created the model
   * @return addedBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The user (auth0_id) who created the model")

  public String getAddedBy() {
    return addedBy;
  }


  public void setAddedBy(String addedBy) {
    
    
    
    this.addedBy = addedBy;
  }


  public ModelData addedOn(OffsetDateTime addedOn) {
    
    
    
    
    this.addedOn = addedOn;
    return this;
  }

   /**
   * When the model was added. Auto-populated in DB
   * @return addedOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When the model was added. Auto-populated in DB")

  public OffsetDateTime getAddedOn() {
    return addedOn;
  }


  public void setAddedOn(OffsetDateTime addedOn) {
    
    
    
    this.addedOn = addedOn;
  }


  public ModelData appId(UUID appId) {
    
    
    
    
    this.appId = appId;
    return this;
  }

   /**
   * The app_id that has access to this model (if only one)
   * @return appId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The app_id that has access to this model (if only one)")

  public UUID getAppId() {
    return appId;
  }


  public void setAppId(UUID appId) {
    
    
    
    this.appId = appId;
  }


  public ModelData at(String at) {
    
    
    
    
    this.at = at;
    return this;
  }

   /**
   * Extra model settings inferred from namespace
   * @return at
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Extra model settings inferred from namespace")

  public String getAt() {
    return at;
  }


  public void setAt(String at) {
    
    
    
    this.at = at;
  }


  public ModelData baseCost(Double baseCost) {
    
    
    
    
    this.baseCost = baseCost;
    return this;
  }

  public ModelData baseCost(Integer baseCost) {
    
    
    
    
    this.baseCost = baseCost.doubleValue();
    return this;
  }

   /**
   * A (usually 0) cost added on top of a request. Some models charge per request, not only per token
   * @return baseCost
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A (usually 0) cost added on top of a request. Some models charge per request, not only per token")

  public Double getBaseCost() {
    return baseCost;
  }


  public void setBaseCost(Double baseCost) {
    
    
    
    this.baseCost = baseCost;
  }


  public ModelData completionTokenCost(Double completionTokenCost) {
    
    
    
    
    this.completionTokenCost = completionTokenCost;
    return this;
  }

  public ModelData completionTokenCost(Integer completionTokenCost) {
    
    
    
    
    this.completionTokenCost = completionTokenCost.doubleValue();
    return this;
  }

   /**
   * The cost of a completion token, in USD
   * @return completionTokenCost
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The cost of a completion token, in USD")

  public Double getCompletionTokenCost() {
    return completionTokenCost;
  }


  public void setCompletionTokenCost(Double completionTokenCost) {
    
    
    
    this.completionTokenCost = completionTokenCost;
  }


  public ModelData contextWindow(Integer contextWindow) {
    
    
    
    
    this.contextWindow = contextWindow;
    return this;
  }

   /**
   * The max_tokens for this model
   * @return contextWindow
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The max_tokens for this model")

  public Integer getContextWindow() {
    return contextWindow;
  }


  public void setContextWindow(Integer contextWindow) {
    
    
    
    this.contextWindow = contextWindow;
  }


  public ModelData defaultActive(Boolean defaultActive) {
    
    
    
    
    this.defaultActive = defaultActive;
    return this;
  }

   /**
   * This determines if the model will be available + pre-selected when users create new apps.
   * @return defaultActive
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "This determines if the model will be available + pre-selected when users create new apps.")

  public Boolean getDefaultActive() {
    return defaultActive;
  }


  public void setDefaultActive(Boolean defaultActive) {
    
    
    
    this.defaultActive = defaultActive;
  }


  public ModelData id(UUID id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The ID of this model
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of this model")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    
    
    
    this.id = id;
  }


  public ModelData isChat(Boolean isChat) {
    
    
    
    
    this.isChat = isChat;
    return this;
  }

   /**
   * True if the model is of type Chat Completions, False if it&#39;s a Text Completion model.
   * @return isChat
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "True if the model is of type Chat Completions, False if it's a Text Completion model.")

  public Boolean getIsChat() {
    return isChat;
  }


  public void setIsChat(Boolean isChat) {
    
    
    
    this.isChat = isChat;
  }


  public ModelData isFt(Boolean isFt) {
    
    
    
    
    this.isFt = isFt;
    return this;
  }

   /**
   * Whether it&#39;s fine-tuned or not
   * @return isFt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether it's fine-tuned or not")

  public Boolean getIsFt() {
    return isFt;
  }


  public void setIsFt(Boolean isFt) {
    
    
    
    this.isFt = isFt;
  }


  public ModelData isGdpr(Boolean isGdpr) {
    
    
    
    
    this.isGdpr = isGdpr;
    return this;
  }

   /**
   * True if the model complies with GDPR
   * @return isGdpr
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "True if the model complies with GDPR")

  public Boolean getIsGdpr() {
    return isGdpr;
  }


  public void setIsGdpr(Boolean isGdpr) {
    
    
    
    this.isGdpr = isGdpr;
  }


  public ModelData isOpenSource(Boolean isOpenSource) {
    
    
    
    
    this.isOpenSource = isOpenSource;
    return this;
  }

   /**
   * True if the model is open source
   * @return isOpenSource
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "True if the model is open source")

  public Boolean getIsOpenSource() {
    return isOpenSource;
  }


  public void setIsOpenSource(Boolean isOpenSource) {
    
    
    
    this.isOpenSource = isOpenSource;
  }


  public ModelData isPublic(Boolean isPublic) {
    
    
    
    
    this.isPublic = isPublic;
    return this;
  }

   /**
   * True if the model is publicly accessible to all
   * @return isPublic
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "True if the model is publicly accessible to all")

  public Boolean getIsPublic() {
    return isPublic;
  }


  public void setIsPublic(Boolean isPublic) {
    
    
    
    this.isPublic = isPublic;
  }


  public ModelData isPulzeOwner(Boolean isPulzeOwner) {
    
    
    
    
    this.isPulzeOwner = isPulzeOwner;
    return this;
  }

   /**
   * Model has been created and shared by Pulze.ai
   * @return isPulzeOwner
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Model has been created and shared by Pulze.ai")

  public Boolean getIsPulzeOwner() {
    return isPulzeOwner;
  }


  public void setIsPulzeOwner(Boolean isPulzeOwner) {
    
    
    
    this.isPulzeOwner = isPulzeOwner;
  }


  public ModelData isRag(Boolean isRag) {
    
    
    
    
    this.isRag = isRag;
    return this;
  }

   /**
   * Whether it&#39;s rag-tuned or not
   * @return isRag
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether it's rag-tuned or not")

  public Boolean getIsRag() {
    return isRag;
  }


  public void setIsRag(Boolean isRag) {
    
    
    
    this.isRag = isRag;
  }


  public ModelData model(String model) {
    
    
    
    
    this.model = model;
    return this;
  }

   /**
   * The name of the model. Can belong to many providers
   * @return model
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of the model. Can belong to many providers")

  public String getModel() {
    return model;
  }


  public void setModel(String model) {
    
    
    
    this.model = model;
  }


  public ModelData modifiedOn(OffsetDateTime modifiedOn) {
    
    
    
    
    this.modifiedOn = modifiedOn;
    return this;
  }

   /**
   * When the model was updated. Auto-populated in DB
   * @return modifiedOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When the model was updated. Auto-populated in DB")

  public OffsetDateTime getModifiedOn() {
    return modifiedOn;
  }


  public void setModifiedOn(OffsetDateTime modifiedOn) {
    
    
    
    this.modifiedOn = modifiedOn;
  }


  public ModelData namespace(String namespace) {
    
    
    
    
    this.namespace = namespace;
    return this;
  }

   /**
   * The fully qualified (namespaced) model name
   * @return namespace
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The fully qualified (namespaced) model name")

  public String getNamespace() {
    return namespace;
  }


  public void setNamespace(String namespace) {
    
    
    
    this.namespace = namespace;
  }


  public ModelData orgId(UUID orgId) {
    
    
    
    
    this.orgId = orgId;
    return this;
  }

   /**
   * The org_id that has acccess to this model
   * @return orgId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The org_id that has acccess to this model")

  public UUID getOrgId() {
    return orgId;
  }


  public void setOrgId(UUID orgId) {
    
    
    
    this.orgId = orgId;
  }


  public ModelData owner(String owner) {
    
    
    
    
    this.owner = owner;
    return this;
  }

   /**
   * The owner of the model. Sometimes, for a provider/model combination, many instances exist, trained on different data
   * @return owner
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The owner of the model. Sometimes, for a provider/model combination, many instances exist, trained on different data")

  public String getOwner() {
    return owner;
  }


  public void setOwner(String owner) {
    
    
    
    this.owner = owner;
  }


  public ModelData promptTokenCost(Double promptTokenCost) {
    
    
    
    
    this.promptTokenCost = promptTokenCost;
    return this;
  }

  public ModelData promptTokenCost(Integer promptTokenCost) {
    
    
    
    
    this.promptTokenCost = promptTokenCost.doubleValue();
    return this;
  }

   /**
   * The cost of a prompt token, in USD
   * @return promptTokenCost
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The cost of a prompt token, in USD")

  public Double getPromptTokenCost() {
    return promptTokenCost;
  }


  public void setPromptTokenCost(Double promptTokenCost) {
    
    
    
    this.promptTokenCost = promptTokenCost;
  }


  public ModelData provider(String provider) {
    
    
    
    
    this.provider = provider;
    return this;
  }

   /**
   * The provider for the model.
   * @return provider
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The provider for the model.")

  public String getProvider() {
    return provider;
  }


  public void setProvider(String provider) {
    
    
    
    this.provider = provider;
  }


  public ModelData supportsFunctions(Boolean supportsFunctions) {
    
    
    
    
    this.supportsFunctions = supportsFunctions;
    return this;
  }

   /**
   * True if the model supports &#x60;function&#x60;/&#x60;tool&#x60; call
   * @return supportsFunctions
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "True if the model supports `function`/`tool` call")

  public Boolean getSupportsFunctions() {
    return supportsFunctions;
  }


  public void setSupportsFunctions(Boolean supportsFunctions) {
    
    
    
    this.supportsFunctions = supportsFunctions;
  }


  public ModelData supportsJson(Boolean supportsJson) {
    
    
    
    
    this.supportsJson = supportsJson;
    return this;
  }

   /**
   * True if the model supports &#x60;json&#x60;-formatted responses
   * @return supportsJson
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "True if the model supports `json`-formatted responses")

  public Boolean getSupportsJson() {
    return supportsJson;
  }


  public void setSupportsJson(Boolean supportsJson) {
    
    
    
    this.supportsJson = supportsJson;
  }


  public ModelData supportsN(Boolean supportsN) {
    
    
    
    
    this.supportsN = supportsN;
    return this;
  }

   /**
   * True if the model supports &#x60;n&#x60; and &#x60;best_of&#x60; -- i.e, multiple responses
   * @return supportsN
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "True if the model supports `n` and `best_of` -- i.e, multiple responses")

  public Boolean getSupportsN() {
    return supportsN;
  }


  public void setSupportsN(Boolean supportsN) {
    
    
    
    this.supportsN = supportsN;
  }


  public ModelData supportsPenalties(Boolean supportsPenalties) {
    
    
    
    
    this.supportsPenalties = supportsPenalties;
    return this;
  }

   /**
   * True if the model supports &#x60;frequency_penalty&#x60; and &#x60;presence_penalty&#x60;
   * @return supportsPenalties
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "True if the model supports `frequency_penalty` and `presence_penalty`")

  public Boolean getSupportsPenalties() {
    return supportsPenalties;
  }


  public void setSupportsPenalties(Boolean supportsPenalties) {
    
    
    
    this.supportsPenalties = supportsPenalties;
  }


  public ModelData supportsStream(Boolean supportsStream) {
    
    
    
    
    this.supportsStream = supportsStream;
    return this;
  }

   /**
   * True if the model supports streaming responses
   * @return supportsStream
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "True if the model supports streaming responses")

  public Boolean getSupportsStream() {
    return supportsStream;
  }


  public void setSupportsStream(Boolean supportsStream) {
    
    
    
    this.supportsStream = supportsStream;
  }


  public ModelData until(OffsetDateTime until) {
    
    
    
    
    this.until = until;
    return this;
  }

   /**
   * The most recent data this model has been trained with
   * @return until
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The most recent data this model has been trained with")

  public OffsetDateTime getUntil() {
    return until;
  }


  public void setUntil(OffsetDateTime until) {
    
    
    
    this.until = until;
  }


  public ModelData url(String url) {
    
    
    
    
    this.url = url;
    return this;
  }

   /**
   * A URL to the model&#39;s page or more informatino
   * @return url
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A URL to the model's page or more informatino")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    
    
    
    this.url = url;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ModelData instance itself
   */
  public ModelData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelData modelData = (ModelData) o;
    return Objects.equals(this.description, modelData.description) &&
        Objects.equals(this.addedBy, modelData.addedBy) &&
        Objects.equals(this.addedOn, modelData.addedOn) &&
        Objects.equals(this.appId, modelData.appId) &&
        Objects.equals(this.at, modelData.at) &&
        Objects.equals(this.baseCost, modelData.baseCost) &&
        Objects.equals(this.completionTokenCost, modelData.completionTokenCost) &&
        Objects.equals(this.contextWindow, modelData.contextWindow) &&
        Objects.equals(this.defaultActive, modelData.defaultActive) &&
        Objects.equals(this.id, modelData.id) &&
        Objects.equals(this.isChat, modelData.isChat) &&
        Objects.equals(this.isFt, modelData.isFt) &&
        Objects.equals(this.isGdpr, modelData.isGdpr) &&
        Objects.equals(this.isOpenSource, modelData.isOpenSource) &&
        Objects.equals(this.isPublic, modelData.isPublic) &&
        Objects.equals(this.isPulzeOwner, modelData.isPulzeOwner) &&
        Objects.equals(this.isRag, modelData.isRag) &&
        Objects.equals(this.model, modelData.model) &&
        Objects.equals(this.modifiedOn, modelData.modifiedOn) &&
        Objects.equals(this.namespace, modelData.namespace) &&
        Objects.equals(this.orgId, modelData.orgId) &&
        Objects.equals(this.owner, modelData.owner) &&
        Objects.equals(this.promptTokenCost, modelData.promptTokenCost) &&
        Objects.equals(this.provider, modelData.provider) &&
        Objects.equals(this.supportsFunctions, modelData.supportsFunctions) &&
        Objects.equals(this.supportsJson, modelData.supportsJson) &&
        Objects.equals(this.supportsN, modelData.supportsN) &&
        Objects.equals(this.supportsPenalties, modelData.supportsPenalties) &&
        Objects.equals(this.supportsStream, modelData.supportsStream) &&
        Objects.equals(this.until, modelData.until) &&
        Objects.equals(this.url, modelData.url)&&
        Objects.equals(this.additionalProperties, modelData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, addedBy, addedOn, appId, at, baseCost, completionTokenCost, contextWindow, defaultActive, id, isChat, isFt, isGdpr, isOpenSource, isPublic, isPulzeOwner, isRag, model, modifiedOn, namespace, orgId, owner, promptTokenCost, provider, supportsFunctions, supportsJson, supportsN, supportsPenalties, supportsStream, until, url, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelData {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    addedBy: ").append(toIndentedString(addedBy)).append("\n");
    sb.append("    addedOn: ").append(toIndentedString(addedOn)).append("\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    at: ").append(toIndentedString(at)).append("\n");
    sb.append("    baseCost: ").append(toIndentedString(baseCost)).append("\n");
    sb.append("    completionTokenCost: ").append(toIndentedString(completionTokenCost)).append("\n");
    sb.append("    contextWindow: ").append(toIndentedString(contextWindow)).append("\n");
    sb.append("    defaultActive: ").append(toIndentedString(defaultActive)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isChat: ").append(toIndentedString(isChat)).append("\n");
    sb.append("    isFt: ").append(toIndentedString(isFt)).append("\n");
    sb.append("    isGdpr: ").append(toIndentedString(isGdpr)).append("\n");
    sb.append("    isOpenSource: ").append(toIndentedString(isOpenSource)).append("\n");
    sb.append("    isPublic: ").append(toIndentedString(isPublic)).append("\n");
    sb.append("    isPulzeOwner: ").append(toIndentedString(isPulzeOwner)).append("\n");
    sb.append("    isRag: ").append(toIndentedString(isRag)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    modifiedOn: ").append(toIndentedString(modifiedOn)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    promptTokenCost: ").append(toIndentedString(promptTokenCost)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    supportsFunctions: ").append(toIndentedString(supportsFunctions)).append("\n");
    sb.append("    supportsJson: ").append(toIndentedString(supportsJson)).append("\n");
    sb.append("    supportsN: ").append(toIndentedString(supportsN)).append("\n");
    sb.append("    supportsPenalties: ").append(toIndentedString(supportsPenalties)).append("\n");
    sb.append("    supportsStream: ").append(toIndentedString(supportsStream)).append("\n");
    sb.append("    until: ").append(toIndentedString(until)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("added_by");
    openapiFields.add("added_on");
    openapiFields.add("app_id");
    openapiFields.add("at");
    openapiFields.add("base_cost");
    openapiFields.add("completion_token_cost");
    openapiFields.add("context_window");
    openapiFields.add("default_active");
    openapiFields.add("id");
    openapiFields.add("is_chat");
    openapiFields.add("is_ft");
    openapiFields.add("is_gdpr");
    openapiFields.add("is_open_source");
    openapiFields.add("is_public");
    openapiFields.add("is_pulze_owner");
    openapiFields.add("is_rag");
    openapiFields.add("model");
    openapiFields.add("modified_on");
    openapiFields.add("namespace");
    openapiFields.add("org_id");
    openapiFields.add("owner");
    openapiFields.add("prompt_token_cost");
    openapiFields.add("provider");
    openapiFields.add("supports_functions");
    openapiFields.add("supports_json");
    openapiFields.add("supports_n");
    openapiFields.add("supports_penalties");
    openapiFields.add("supports_stream");
    openapiFields.add("until");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("base_cost");
    openapiRequiredFields.add("completion_token_cost");
    openapiRequiredFields.add("context_window");
    openapiRequiredFields.add("default_active");
    openapiRequiredFields.add("is_chat");
    openapiRequiredFields.add("is_ft");
    openapiRequiredFields.add("is_gdpr");
    openapiRequiredFields.add("is_open_source");
    openapiRequiredFields.add("is_public");
    openapiRequiredFields.add("is_pulze_owner");
    openapiRequiredFields.add("is_rag");
    openapiRequiredFields.add("model");
    openapiRequiredFields.add("namespace");
    openapiRequiredFields.add("prompt_token_cost");
    openapiRequiredFields.add("supports_functions");
    openapiRequiredFields.add("supports_json");
    openapiRequiredFields.add("supports_n");
    openapiRequiredFields.add("supports_penalties");
    openapiRequiredFields.add("supports_stream");
    openapiRequiredFields.add("url");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ModelData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ModelData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelData is not found in the empty JSON string", ModelData.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModelData.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("added_by") != null && !jsonObj.get("added_by").isJsonNull()) && !jsonObj.get("added_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `added_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("added_by").toString()));
      }
      if ((jsonObj.get("app_id") != null && !jsonObj.get("app_id").isJsonNull()) && !jsonObj.get("app_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_id").toString()));
      }
      if ((jsonObj.get("at") != null && !jsonObj.get("at").isJsonNull()) && !jsonObj.get("at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("at").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      if (!jsonObj.get("namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace").toString()));
      }
      if ((jsonObj.get("org_id") != null && !jsonObj.get("org_id").isJsonNull()) && !jsonObj.get("org_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `org_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("org_id").toString()));
      }
      if ((jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) && !jsonObj.get("owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner").toString()));
      }
      if ((jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) && !jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelData.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelData>() {
           @Override
           public void write(JsonWriter out, ModelData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ModelData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModelData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModelData
  * @throws IOException if the JSON string is invalid with respect to ModelData
  */
  public static ModelData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelData.class);
  }

 /**
  * Convert an instance of ModelData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

