/*
 * Pulze.ai API
 * At Pulze it's our mission to supercharge today's workforce with AI to maximize the world's prosperity. We are doing so by enabling companies of any size to securely leverage Large Language Models (LLM) and easily build AI features into their apps. Our enterprise platform has access to all best in class LLMs and can route user requests to the most relevant model to get the highest quality response at the best price thanks to our smart meta model. End users can leverage pre-built applications, such as our Marketing AI product, or build custom apps on top of the Pulze Platform.  We are a VC Funded, early stage startup based in San Francisco.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.BillingPaymentCoupon;
import com.konfigthis.client.model.BillingSubscription;
import com.konfigthis.client.model.PaymentDetailsBalance;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * BillingPaymentInfo
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class BillingPaymentInfo {
  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  private PaymentDetailsBalance balance;

  public static final String SERIALIZED_NAME_DEFAULT_CARD = "default_card";
  @SerializedName(SERIALIZED_NAME_DEFAULT_CARD)
  private String defaultCard;

  public static final String SERIALIZED_NAME_DISCOUNT = "discount";
  @SerializedName(SERIALIZED_NAME_DISCOUNT)
  private BillingPaymentCoupon discount;

  public static final String SERIALIZED_NAME_PAYMENTS = "payments";
  @SerializedName(SERIALIZED_NAME_PAYMENTS)
  private List<Object> payments = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBSCRIPTIONS = "subscriptions";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTIONS)
  private List<BillingSubscription> subscriptions = new ArrayList<>();

  public BillingPaymentInfo() {
  }

  public BillingPaymentInfo balance(PaymentDetailsBalance balance) {
    
    
    
    
    this.balance = balance;
    return this;
  }

   /**
   * Get balance
   * @return balance
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public PaymentDetailsBalance getBalance() {
    return balance;
  }


  public void setBalance(PaymentDetailsBalance balance) {
    
    
    
    this.balance = balance;
  }


  public BillingPaymentInfo defaultCard(String defaultCard) {
    
    
    
    
    this.defaultCard = defaultCard;
    return this;
  }

   /**
   * Get defaultCard
   * @return defaultCard
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDefaultCard() {
    return defaultCard;
  }


  public void setDefaultCard(String defaultCard) {
    
    
    
    this.defaultCard = defaultCard;
  }


  public BillingPaymentInfo discount(BillingPaymentCoupon discount) {
    
    
    
    
    this.discount = discount;
    return this;
  }

   /**
   * Get discount
   * @return discount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BillingPaymentCoupon getDiscount() {
    return discount;
  }


  public void setDiscount(BillingPaymentCoupon discount) {
    
    
    
    this.discount = discount;
  }


  public BillingPaymentInfo payments(List<Object> payments) {
    
    
    
    
    this.payments = payments;
    return this;
  }

  public BillingPaymentInfo addPaymentsItem(Object paymentsItem) {
    this.payments.add(paymentsItem);
    return this;
  }

   /**
   * Get payments
   * @return payments
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Object> getPayments() {
    return payments;
  }


  public void setPayments(List<Object> payments) {
    
    
    
    this.payments = payments;
  }


  public BillingPaymentInfo subscriptions(List<BillingSubscription> subscriptions) {
    
    
    
    
    this.subscriptions = subscriptions;
    return this;
  }

  public BillingPaymentInfo addSubscriptionsItem(BillingSubscription subscriptionsItem) {
    this.subscriptions.add(subscriptionsItem);
    return this;
  }

   /**
   * Get subscriptions
   * @return subscriptions
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<BillingSubscription> getSubscriptions() {
    return subscriptions;
  }


  public void setSubscriptions(List<BillingSubscription> subscriptions) {
    
    
    
    this.subscriptions = subscriptions;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BillingPaymentInfo instance itself
   */
  public BillingPaymentInfo putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BillingPaymentInfo billingPaymentInfo = (BillingPaymentInfo) o;
    return Objects.equals(this.balance, billingPaymentInfo.balance) &&
        Objects.equals(this.defaultCard, billingPaymentInfo.defaultCard) &&
        Objects.equals(this.discount, billingPaymentInfo.discount) &&
        Objects.equals(this.payments, billingPaymentInfo.payments) &&
        Objects.equals(this.subscriptions, billingPaymentInfo.subscriptions)&&
        Objects.equals(this.additionalProperties, billingPaymentInfo.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(balance, defaultCard, discount, payments, subscriptions, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BillingPaymentInfo {\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    defaultCard: ").append(toIndentedString(defaultCard)).append("\n");
    sb.append("    discount: ").append(toIndentedString(discount)).append("\n");
    sb.append("    payments: ").append(toIndentedString(payments)).append("\n");
    sb.append("    subscriptions: ").append(toIndentedString(subscriptions)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("balance");
    openapiFields.add("default_card");
    openapiFields.add("discount");
    openapiFields.add("payments");
    openapiFields.add("subscriptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("balance");
    openapiRequiredFields.add("payments");
    openapiRequiredFields.add("subscriptions");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BillingPaymentInfo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BillingPaymentInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BillingPaymentInfo is not found in the empty JSON string", BillingPaymentInfo.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BillingPaymentInfo.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `balance`
      PaymentDetailsBalance.validateJsonObject(jsonObj.getAsJsonObject("balance"));
      if ((jsonObj.get("default_card") != null && !jsonObj.get("default_card").isJsonNull()) && !jsonObj.get("default_card").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_card` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_card").toString()));
      }
      // validate the optional field `discount`
      if (jsonObj.get("discount") != null && !jsonObj.get("discount").isJsonNull()) {
        BillingPaymentCoupon.validateJsonObject(jsonObj.getAsJsonObject("discount"));
      }
      // ensure the required json array is present
      if (jsonObj.get("payments") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("payments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `payments` to be an array in the JSON string but got `%s`", jsonObj.get("payments").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("subscriptions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptions` to be an array in the JSON string but got `%s`", jsonObj.get("subscriptions").toString()));
      }

      JsonArray jsonArraysubscriptions = jsonObj.getAsJsonArray("subscriptions");
      // validate the required field `subscriptions` (array)
      for (int i = 0; i < jsonArraysubscriptions.size(); i++) {
        BillingSubscription.validateJsonObject(jsonArraysubscriptions.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BillingPaymentInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BillingPaymentInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BillingPaymentInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BillingPaymentInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<BillingPaymentInfo>() {
           @Override
           public void write(JsonWriter out, BillingPaymentInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BillingPaymentInfo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BillingPaymentInfo instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BillingPaymentInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BillingPaymentInfo
  * @throws IOException if the JSON string is invalid with respect to BillingPaymentInfo
  */
  public static BillingPaymentInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BillingPaymentInfo.class);
  }

 /**
  * Convert an instance of BillingPaymentInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

