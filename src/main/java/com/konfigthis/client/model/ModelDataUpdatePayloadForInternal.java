/*
 * Pulze.ai API
 * At Pulze it's our mission to supercharge today's workforce with AI to maximize the world's prosperity. We are doing so by enabling companies of any size to securely leverage Large Language Models (LLM) and easily build AI features into their apps. Our enterprise platform has access to all best in class LLMs and can route user requests to the most relevant model to get the highest quality response at the best price thanks to our smart meta model. End users can leverage pre-built applications, such as our Marketing AI product, or build custom apps on top of the Pulze Platform.  We are a VC Funded, early stage startup based in San Francisco.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ModelDataUpdatePayloadForInternal
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ModelDataUpdatePayloadForInternal {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_APP_ID = "app_id";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private UUID appId;

  public static final String SERIALIZED_NAME_AT = "at";
  @SerializedName(SERIALIZED_NAME_AT)
  private String at;

  public static final String SERIALIZED_NAME_BASE_COST = "base_cost";
  @SerializedName(SERIALIZED_NAME_BASE_COST)
  private String baseCost = "0";

  public static final String SERIALIZED_NAME_COMPLETION_TOKEN_COST = "completion_token_cost";
  @SerializedName(SERIALIZED_NAME_COMPLETION_TOKEN_COST)
  private String completionTokenCost;

  public static final String SERIALIZED_NAME_CONTEXT_WINDOW = "context_window";
  @SerializedName(SERIALIZED_NAME_CONTEXT_WINDOW)
  private Integer contextWindow;

  public static final String SERIALIZED_NAME_DEFAULT_ACTIVE = "default_active";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ACTIVE)
  private Boolean defaultActive;

  public static final String SERIALIZED_NAME_IS_PUBLIC = "is_public";
  @SerializedName(SERIALIZED_NAME_IS_PUBLIC)
  private Boolean isPublic;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_ORG_ID = "org_id";
  @SerializedName(SERIALIZED_NAME_ORG_ID)
  private UUID orgId;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_PROMPT_TOKEN_COST = "prompt_token_cost";
  @SerializedName(SERIALIZED_NAME_PROMPT_TOKEN_COST)
  private String promptTokenCost;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private String provider;

  public static final String SERIALIZED_NAME_UNTIL = "until";
  @SerializedName(SERIALIZED_NAME_UNTIL)
  private String until;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public ModelDataUpdatePayloadForInternal() {
  }

  public ModelDataUpdatePayloadForInternal description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public ModelDataUpdatePayloadForInternal appId(UUID appId) {
    
    
    
    
    this.appId = appId;
    return this;
  }

   /**
   * Get appId
   * @return appId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UUID getAppId() {
    return appId;
  }


  public void setAppId(UUID appId) {
    
    
    
    this.appId = appId;
  }


  public ModelDataUpdatePayloadForInternal at(String at) {
    
    
    
    
    this.at = at;
    return this;
  }

   /**
   * Get at
   * @return at
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAt() {
    return at;
  }


  public void setAt(String at) {
    
    
    
    this.at = at;
  }


  public ModelDataUpdatePayloadForInternal baseCost(String baseCost) {
    
    
    
    
    this.baseCost = baseCost;
    return this;
  }

   /**
   * Get baseCost
   * @return baseCost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "")

  public String getBaseCost() {
    return baseCost;
  }


  public void setBaseCost(String baseCost) {
    
    
    
    this.baseCost = baseCost;
  }


  public ModelDataUpdatePayloadForInternal completionTokenCost(String completionTokenCost) {
    
    
    
    
    this.completionTokenCost = completionTokenCost;
    return this;
  }

   /**
   * Get completionTokenCost
   * @return completionTokenCost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCompletionTokenCost() {
    return completionTokenCost;
  }


  public void setCompletionTokenCost(String completionTokenCost) {
    
    
    
    this.completionTokenCost = completionTokenCost;
  }


  public ModelDataUpdatePayloadForInternal contextWindow(Integer contextWindow) {
    
    
    
    
    this.contextWindow = contextWindow;
    return this;
  }

   /**
   * Get contextWindow
   * @return contextWindow
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getContextWindow() {
    return contextWindow;
  }


  public void setContextWindow(Integer contextWindow) {
    
    
    
    this.contextWindow = contextWindow;
  }


  public ModelDataUpdatePayloadForInternal defaultActive(Boolean defaultActive) {
    
    
    
    
    this.defaultActive = defaultActive;
    return this;
  }

   /**
   * Get defaultActive
   * @return defaultActive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getDefaultActive() {
    return defaultActive;
  }


  public void setDefaultActive(Boolean defaultActive) {
    
    
    
    this.defaultActive = defaultActive;
  }


  public ModelDataUpdatePayloadForInternal isPublic(Boolean isPublic) {
    
    
    
    
    this.isPublic = isPublic;
    return this;
  }

   /**
   * Get isPublic
   * @return isPublic
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsPublic() {
    return isPublic;
  }


  public void setIsPublic(Boolean isPublic) {
    
    
    
    this.isPublic = isPublic;
  }


  public ModelDataUpdatePayloadForInternal model(String model) {
    
    
    
    
    this.model = model;
    return this;
  }

   /**
   * Get model
   * @return model
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getModel() {
    return model;
  }


  public void setModel(String model) {
    
    
    
    this.model = model;
  }


  public ModelDataUpdatePayloadForInternal orgId(UUID orgId) {
    
    
    
    
    this.orgId = orgId;
    return this;
  }

   /**
   * Get orgId
   * @return orgId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UUID getOrgId() {
    return orgId;
  }


  public void setOrgId(UUID orgId) {
    
    
    
    this.orgId = orgId;
  }


  public ModelDataUpdatePayloadForInternal owner(String owner) {
    
    
    
    
    this.owner = owner;
    return this;
  }

   /**
   * Get owner
   * @return owner
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOwner() {
    return owner;
  }


  public void setOwner(String owner) {
    
    
    
    this.owner = owner;
  }


  public ModelDataUpdatePayloadForInternal promptTokenCost(String promptTokenCost) {
    
    
    
    
    this.promptTokenCost = promptTokenCost;
    return this;
  }

   /**
   * Get promptTokenCost
   * @return promptTokenCost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPromptTokenCost() {
    return promptTokenCost;
  }


  public void setPromptTokenCost(String promptTokenCost) {
    
    
    
    this.promptTokenCost = promptTokenCost;
  }


  public ModelDataUpdatePayloadForInternal provider(String provider) {
    
    
    
    
    this.provider = provider;
    return this;
  }

   /**
   * Get provider
   * @return provider
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getProvider() {
    return provider;
  }


  public void setProvider(String provider) {
    
    
    
    this.provider = provider;
  }


  public ModelDataUpdatePayloadForInternal until(String until) {
    
    
    
    
    this.until = until;
    return this;
  }

   /**
   * Get until
   * @return until
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUntil() {
    return until;
  }


  public void setUntil(String until) {
    
    
    
    this.until = until;
  }


  public ModelDataUpdatePayloadForInternal url(String url) {
    
    
    
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    
    
    
    this.url = url;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ModelDataUpdatePayloadForInternal instance itself
   */
  public ModelDataUpdatePayloadForInternal putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelDataUpdatePayloadForInternal modelDataUpdatePayloadForInternal = (ModelDataUpdatePayloadForInternal) o;
    return Objects.equals(this.description, modelDataUpdatePayloadForInternal.description) &&
        Objects.equals(this.appId, modelDataUpdatePayloadForInternal.appId) &&
        Objects.equals(this.at, modelDataUpdatePayloadForInternal.at) &&
        Objects.equals(this.baseCost, modelDataUpdatePayloadForInternal.baseCost) &&
        Objects.equals(this.completionTokenCost, modelDataUpdatePayloadForInternal.completionTokenCost) &&
        Objects.equals(this.contextWindow, modelDataUpdatePayloadForInternal.contextWindow) &&
        Objects.equals(this.defaultActive, modelDataUpdatePayloadForInternal.defaultActive) &&
        Objects.equals(this.isPublic, modelDataUpdatePayloadForInternal.isPublic) &&
        Objects.equals(this.model, modelDataUpdatePayloadForInternal.model) &&
        Objects.equals(this.orgId, modelDataUpdatePayloadForInternal.orgId) &&
        Objects.equals(this.owner, modelDataUpdatePayloadForInternal.owner) &&
        Objects.equals(this.promptTokenCost, modelDataUpdatePayloadForInternal.promptTokenCost) &&
        Objects.equals(this.provider, modelDataUpdatePayloadForInternal.provider) &&
        Objects.equals(this.until, modelDataUpdatePayloadForInternal.until) &&
        Objects.equals(this.url, modelDataUpdatePayloadForInternal.url)&&
        Objects.equals(this.additionalProperties, modelDataUpdatePayloadForInternal.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, appId, at, baseCost, completionTokenCost, contextWindow, defaultActive, isPublic, model, orgId, owner, promptTokenCost, provider, until, url, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelDataUpdatePayloadForInternal {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    at: ").append(toIndentedString(at)).append("\n");
    sb.append("    baseCost: ").append(toIndentedString(baseCost)).append("\n");
    sb.append("    completionTokenCost: ").append(toIndentedString(completionTokenCost)).append("\n");
    sb.append("    contextWindow: ").append(toIndentedString(contextWindow)).append("\n");
    sb.append("    defaultActive: ").append(toIndentedString(defaultActive)).append("\n");
    sb.append("    isPublic: ").append(toIndentedString(isPublic)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    promptTokenCost: ").append(toIndentedString(promptTokenCost)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    until: ").append(toIndentedString(until)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("app_id");
    openapiFields.add("at");
    openapiFields.add("base_cost");
    openapiFields.add("completion_token_cost");
    openapiFields.add("context_window");
    openapiFields.add("default_active");
    openapiFields.add("is_public");
    openapiFields.add("model");
    openapiFields.add("org_id");
    openapiFields.add("owner");
    openapiFields.add("prompt_token_cost");
    openapiFields.add("provider");
    openapiFields.add("until");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ModelDataUpdatePayloadForInternal
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ModelDataUpdatePayloadForInternal.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelDataUpdatePayloadForInternal is not found in the empty JSON string", ModelDataUpdatePayloadForInternal.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("app_id") != null && !jsonObj.get("app_id").isJsonNull()) && !jsonObj.get("app_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_id").toString()));
      }
      if ((jsonObj.get("at") != null && !jsonObj.get("at").isJsonNull()) && !jsonObj.get("at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("at").toString()));
      }
      if ((jsonObj.get("base_cost") != null && !jsonObj.get("base_cost").isJsonNull()) && !jsonObj.get("base_cost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `base_cost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("base_cost").toString()));
      }
      if ((jsonObj.get("completion_token_cost") != null && !jsonObj.get("completion_token_cost").isJsonNull()) && !jsonObj.get("completion_token_cost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `completion_token_cost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("completion_token_cost").toString()));
      }
      if ((jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) && !jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      if ((jsonObj.get("org_id") != null && !jsonObj.get("org_id").isJsonNull()) && !jsonObj.get("org_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `org_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("org_id").toString()));
      }
      if ((jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) && !jsonObj.get("owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner").toString()));
      }
      if ((jsonObj.get("prompt_token_cost") != null && !jsonObj.get("prompt_token_cost").isJsonNull()) && !jsonObj.get("prompt_token_cost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prompt_token_cost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prompt_token_cost").toString()));
      }
      if ((jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) && !jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
      if ((jsonObj.get("until") != null && !jsonObj.get("until").isJsonNull()) && !jsonObj.get("until").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `until` to be a primitive type in the JSON string but got `%s`", jsonObj.get("until").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelDataUpdatePayloadForInternal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelDataUpdatePayloadForInternal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelDataUpdatePayloadForInternal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelDataUpdatePayloadForInternal.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelDataUpdatePayloadForInternal>() {
           @Override
           public void write(JsonWriter out, ModelDataUpdatePayloadForInternal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelDataUpdatePayloadForInternal read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ModelDataUpdatePayloadForInternal instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModelDataUpdatePayloadForInternal given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModelDataUpdatePayloadForInternal
  * @throws IOException if the JSON string is invalid with respect to ModelDataUpdatePayloadForInternal
  */
  public static ModelDataUpdatePayloadForInternal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelDataUpdatePayloadForInternal.class);
  }

 /**
  * Convert an instance of ModelDataUpdatePayloadForInternal to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

