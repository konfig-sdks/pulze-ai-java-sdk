/*
 * Pulze.ai API
 * At Pulze it's our mission to supercharge today's workforce with AI to maximize the world's prosperity. We are doing so by enabling companies of any size to securely leverage Large Language Models (LLM) and easily build AI features into their apps. Our enterprise platform has access to all best in class LLMs and can route user requests to the most relevant model to get the highest quality response at the best price thanks to our smart meta model. End users can leverage pre-built applications, such as our Marketing AI product, or build custom apps on top of the Pulze Platform.  We are a VC Funded, early stage startup based in San Francisco.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ModelParts;
import com.konfigthis.client.model.PulzeEngineTokens;
import com.konfigthis.client.model.RankedScoringModels;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PulzeEngineResponseMetadata
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PulzeEngineResponseMetadata {
  public static final String SERIALIZED_NAME_APP_ID = "app_id";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_COST_SAVINGS = "cost_savings";
  @SerializedName(SERIALIZED_NAME_COST_SAVINGS)
  private PulzeEngineTokens costSavings;

  public static final String SERIALIZED_NAME_COSTS = "costs";
  @SerializedName(SERIALIZED_NAME_COSTS)
  private PulzeEngineTokens costs;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private String error;

  public static final String SERIALIZED_NAME_EXTRA = "extra";
  @SerializedName(SERIALIZED_NAME_EXTRA)
  private Object extra;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = null;

  public static final String SERIALIZED_NAME_LATENCY = "latency";
  @SerializedName(SERIALIZED_NAME_LATENCY)
  private Double latency;

  public static final String SERIALIZED_NAME_MAX_TOKENS = "max_tokens";
  @SerializedName(SERIALIZED_NAME_MAX_TOKENS)
  private Integer maxTokens;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private ModelParts model;

  public static final String SERIALIZED_NAME_RETRIES = "retries";
  @SerializedName(SERIALIZED_NAME_RETRIES)
  private Integer retries = 0;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Double score = 0d;

  public static final String SERIALIZED_NAME_SCORES = "scores";
  @SerializedName(SERIALIZED_NAME_SCORES)
  private RankedScoringModels scores;

  public static final String SERIALIZED_NAME_STATUS_CODE = "status_code";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private Integer statusCode;

  public static final String SERIALIZED_NAME_TEMPERATURE = "temperature";
  @SerializedName(SERIALIZED_NAME_TEMPERATURE)
  private Object temperature = null;

  public PulzeEngineResponseMetadata() {
  }

  public PulzeEngineResponseMetadata appId(String appId) {
    
    
    
    
    this.appId = appId;
    return this;
  }

   /**
   * The ID of the app this request belongs to
   * @return appId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the app this request belongs to")

  public String getAppId() {
    return appId;
  }


  public void setAppId(String appId) {
    
    
    
    this.appId = appId;
  }


  public PulzeEngineResponseMetadata category(String category) {
    
    
    
    
    this.category = category;
    return this;
  }

   /**
   * Category assigned to this request (Science, Health, Games...)
   * @return category
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Category assigned to this request (Science, Health, Games...)")

  public String getCategory() {
    return category;
  }


  public void setCategory(String category) {
    
    
    
    this.category = category;
  }


  public PulzeEngineResponseMetadata costSavings(PulzeEngineTokens costSavings) {
    
    
    
    
    this.costSavings = costSavings;
    return this;
  }

   /**
   * Price difference -- compared with GPT-4
   * @return costSavings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Price difference -- compared with GPT-4")

  public PulzeEngineTokens getCostSavings() {
    return costSavings;
  }


  public void setCostSavings(PulzeEngineTokens costSavings) {
    
    
    
    this.costSavings = costSavings;
  }


  public PulzeEngineResponseMetadata costs(PulzeEngineTokens costs) {
    
    
    
    
    this.costs = costs;
    return this;
  }

   /**
   * Cost (in $) of the request
   * @return costs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Cost (in $) of the request")

  public PulzeEngineTokens getCosts() {
    return costs;
  }


  public void setCosts(PulzeEngineTokens costs) {
    
    
    
    this.costs = costs;
  }


  public PulzeEngineResponseMetadata error(String error) {
    
    
    
    
    this.error = error;
    return this;
  }

   /**
   * If an error occurs, it will be stored here
   * @return error
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If an error occurs, it will be stored here")

  public String getError() {
    return error;
  }


  public void setError(String error) {
    
    
    
    this.error = error;
  }


  public PulzeEngineResponseMetadata extra(Object extra) {
    
    
    
    
    this.extra = extra;
    return this;
  }

   /**
   * Extra data
   * @return extra
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Extra data")

  public Object getExtra() {
    return extra;
  }


  public void setExtra(Object extra) {
    
    
    
    this.extra = extra;
  }


  public PulzeEngineResponseMetadata labels(Map<String, String> labels) {
    
    
    
    
    this.labels = labels;
    return this;
  }

  public PulzeEngineResponseMetadata putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

   /**
   * Custom labels (metadata) sent along in the request
   * @return labels
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Custom labels (metadata) sent along in the request")

  public Map<String, String> getLabels() {
    return labels;
  }


  public void setLabels(Map<String, String> labels) {
    
    
    
    this.labels = labels;
  }


  public PulzeEngineResponseMetadata latency(Double latency) {
    
    
    
    
    this.latency = latency;
    return this;
  }

  public PulzeEngineResponseMetadata latency(Integer latency) {
    
    
    
    
    this.latency = latency.doubleValue();
    return this;
  }

   /**
   * The time it took for the Provider to return a response
   * @return latency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The time it took for the Provider to return a response")

  public Double getLatency() {
    return latency;
  }


  public void setLatency(Double latency) {
    
    
    
    this.latency = latency;
  }


  public PulzeEngineResponseMetadata maxTokens(Integer maxTokens) {
    
    
    
    
    this.maxTokens = maxTokens;
    return this;
  }

   /**
   * Maximum number of tokens that can be used in the request+response.Leave empty to make it automatic, and set to &#x60;-1&#x60; to use the maximum context size (model-dependent)
   * @return maxTokens
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Maximum number of tokens that can be used in the request+response.Leave empty to make it automatic, and set to `-1` to use the maximum context size (model-dependent)")

  public Integer getMaxTokens() {
    return maxTokens;
  }


  public void setMaxTokens(Integer maxTokens) {
    
    
    
    this.maxTokens = maxTokens;
  }


  public PulzeEngineResponseMetadata model(ModelParts model) {
    
    
    
    
    this.model = model;
    return this;
  }

   /**
   * The model used in the request
   * @return model
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The model used in the request")

  public ModelParts getModel() {
    return model;
  }


  public void setModel(ModelParts model) {
    
    
    
    this.model = model;
  }


  public PulzeEngineResponseMetadata retries(Integer retries) {
    
    
    
    
    this.retries = retries;
    return this;
  }

   /**
   * The number of retries needed to get the answer. &#x60;null&#x60; or &#x60;0&#x60; means no retries were required
   * @return retries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "The number of retries needed to get the answer. `null` or `0` means no retries were required")

  public Integer getRetries() {
    return retries;
  }


  public void setRetries(Integer retries) {
    
    
    
    this.retries = retries;
  }


  public PulzeEngineResponseMetadata score(Double score) {
    
    
    
    
    this.score = score;
    return this;
  }

  public PulzeEngineResponseMetadata score(Integer score) {
    
    
    
    
    this.score = score.doubleValue();
    return this;
  }

   /**
   * The score for the currently used LLM
   * @return score
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "The score for the currently used LLM")

  public Double getScore() {
    return score;
  }


  public void setScore(Double score) {
    
    
    
    this.score = score;
  }


  public PulzeEngineResponseMetadata scores(RankedScoringModels scores) {
    
    
    
    
    this.scores = scores;
    return this;
  }

   /**
   * A ranking of the best models for a given request
   * @return scores
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A ranking of the best models for a given request")

  public RankedScoringModels getScores() {
    return scores;
  }


  public void setScores(RankedScoringModels scores) {
    
    
    
    this.scores = scores;
  }


  public PulzeEngineResponseMetadata statusCode(Integer statusCode) {
    
    
    
    
    this.statusCode = statusCode;
    return this;
  }

   /**
   * Status code of the response
   * @return statusCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Status code of the response")

  public Integer getStatusCode() {
    return statusCode;
  }


  public void setStatusCode(Integer statusCode) {
    
    
    
    this.statusCode = statusCode;
  }


  public PulzeEngineResponseMetadata temperature(Object temperature) {
    
    
    
    
    this.temperature = temperature;
    return this;
  }

   /**
   * Get temperature
   * @return temperature
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getTemperature() {
    return temperature;
  }


  public void setTemperature(Object temperature) {
    
    
    
    this.temperature = temperature;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PulzeEngineResponseMetadata instance itself
   */
  public PulzeEngineResponseMetadata putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PulzeEngineResponseMetadata pulzeEngineResponseMetadata = (PulzeEngineResponseMetadata) o;
    return Objects.equals(this.appId, pulzeEngineResponseMetadata.appId) &&
        Objects.equals(this.category, pulzeEngineResponseMetadata.category) &&
        Objects.equals(this.costSavings, pulzeEngineResponseMetadata.costSavings) &&
        Objects.equals(this.costs, pulzeEngineResponseMetadata.costs) &&
        Objects.equals(this.error, pulzeEngineResponseMetadata.error) &&
        Objects.equals(this.extra, pulzeEngineResponseMetadata.extra) &&
        Objects.equals(this.labels, pulzeEngineResponseMetadata.labels) &&
        Objects.equals(this.latency, pulzeEngineResponseMetadata.latency) &&
        Objects.equals(this.maxTokens, pulzeEngineResponseMetadata.maxTokens) &&
        Objects.equals(this.model, pulzeEngineResponseMetadata.model) &&
        Objects.equals(this.retries, pulzeEngineResponseMetadata.retries) &&
        Objects.equals(this.score, pulzeEngineResponseMetadata.score) &&
        Objects.equals(this.scores, pulzeEngineResponseMetadata.scores) &&
        Objects.equals(this.statusCode, pulzeEngineResponseMetadata.statusCode) &&
        Objects.equals(this.temperature, pulzeEngineResponseMetadata.temperature)&&
        Objects.equals(this.additionalProperties, pulzeEngineResponseMetadata.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(appId, category, costSavings, costs, error, extra, labels, latency, maxTokens, model, retries, score, scores, statusCode, temperature, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PulzeEngineResponseMetadata {\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    costSavings: ").append(toIndentedString(costSavings)).append("\n");
    sb.append("    costs: ").append(toIndentedString(costs)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    extra: ").append(toIndentedString(extra)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    latency: ").append(toIndentedString(latency)).append("\n");
    sb.append("    maxTokens: ").append(toIndentedString(maxTokens)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    retries: ").append(toIndentedString(retries)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    scores: ").append(toIndentedString(scores)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    temperature: ").append(toIndentedString(temperature)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("app_id");
    openapiFields.add("category");
    openapiFields.add("cost_savings");
    openapiFields.add("costs");
    openapiFields.add("error");
    openapiFields.add("extra");
    openapiFields.add("labels");
    openapiFields.add("latency");
    openapiFields.add("max_tokens");
    openapiFields.add("model");
    openapiFields.add("retries");
    openapiFields.add("score");
    openapiFields.add("scores");
    openapiFields.add("status_code");
    openapiFields.add("temperature");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PulzeEngineResponseMetadata
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PulzeEngineResponseMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PulzeEngineResponseMetadata is not found in the empty JSON string", PulzeEngineResponseMetadata.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("app_id") != null && !jsonObj.get("app_id").isJsonNull()) && !jsonObj.get("app_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_id").toString()));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // validate the optional field `cost_savings`
      if (jsonObj.get("cost_savings") != null && !jsonObj.get("cost_savings").isJsonNull()) {
        PulzeEngineTokens.validateJsonObject(jsonObj.getAsJsonObject("cost_savings"));
      }
      // validate the optional field `costs`
      if (jsonObj.get("costs") != null && !jsonObj.get("costs").isJsonNull()) {
        PulzeEngineTokens.validateJsonObject(jsonObj.getAsJsonObject("costs"));
      }
      if ((jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) && !jsonObj.get("error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error").toString()));
      }
      // validate the optional field `model`
      if (jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) {
        ModelParts.validateJsonObject(jsonObj.getAsJsonObject("model"));
      }
      // validate the optional field `scores`
      if (jsonObj.get("scores") != null && !jsonObj.get("scores").isJsonNull()) {
        RankedScoringModels.validateJsonObject(jsonObj.getAsJsonObject("scores"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PulzeEngineResponseMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PulzeEngineResponseMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PulzeEngineResponseMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PulzeEngineResponseMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<PulzeEngineResponseMetadata>() {
           @Override
           public void write(JsonWriter out, PulzeEngineResponseMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PulzeEngineResponseMetadata read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PulzeEngineResponseMetadata instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PulzeEngineResponseMetadata given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PulzeEngineResponseMetadata
  * @throws IOException if the JSON string is invalid with respect to PulzeEngineResponseMetadata
  */
  public static PulzeEngineResponseMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PulzeEngineResponseMetadata.class);
  }

 /**
  * Convert an instance of PulzeEngineResponseMetadata to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

