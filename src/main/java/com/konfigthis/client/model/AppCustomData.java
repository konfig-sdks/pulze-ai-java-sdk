/*
 * Pulze.ai API
 * At Pulze it's our mission to supercharge today's workforce with AI to maximize the world's prosperity. We are doing so by enabling companies of any size to securely leverage Large Language Models (LLM) and easily build AI features into their apps. Our enterprise platform has access to all best in class LLMs and can route user requests to the most relevant model to get the highest quality response at the best price thanks to our smart meta model. End users can leverage pre-built applications, such as our Marketing AI product, or build custom apps on top of the Pulze Platform.  We are a VC Funded, early stage startup based in San Francisco.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.File;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AppCustomData
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AppCustomData {
  public static final String SERIALIZED_NAME_ADDED_ON = "added_on";
  @SerializedName(SERIALIZED_NAME_ADDED_ON)
  private OffsetDateTime addedOn;

  public static final String SERIALIZED_NAME_APP_ID = "app_id";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private UUID appId;

  /**
   * The type of custom data (file, database, ...)
   */
  @JsonAdapter(DataTypeEnum.Adapter.class)
 public enum DataTypeEnum {
    FILE("file");

    private String value;

    DataTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataTypeEnum fromValue(String value) {
      for (DataTypeEnum b : DataTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DATA_TYPE = "data_type";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE)
  private DataTypeEnum dataType;

  public static final String SERIALIZED_NAME_FILE_CONTENT = "file_content";
  @SerializedName(SERIALIZED_NAME_FILE_CONTENT)
  private File fileContent;

  public static final String SERIALIZED_NAME_FILE_MIME = "file_mime";
  @SerializedName(SERIALIZED_NAME_FILE_MIME)
  private String fileMime;

  public static final String SERIALIZED_NAME_FILE_NAME = "file_name";
  @SerializedName(SERIALIZED_NAME_FILE_NAME)
  private String fileName;

  public static final String SERIALIZED_NAME_FILE_SIZE = "file_size";
  @SerializedName(SERIALIZED_NAME_FILE_SIZE)
  private Integer fileSize;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public AppCustomData() {
  }

  public AppCustomData addedOn(OffsetDateTime addedOn) {
    
    
    
    
    this.addedOn = addedOn;
    return this;
  }

   /**
   * The timestamp the file was added
   * @return addedOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The timestamp the file was added")

  public OffsetDateTime getAddedOn() {
    return addedOn;
  }


  public void setAddedOn(OffsetDateTime addedOn) {
    
    
    
    this.addedOn = addedOn;
  }


  public AppCustomData appId(UUID appId) {
    
    
    
    
    this.appId = appId;
    return this;
  }

   /**
   * The ID of the App it&#39;s associated with
   * @return appId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The ID of the App it's associated with")

  public UUID getAppId() {
    return appId;
  }


  public void setAppId(UUID appId) {
    
    
    
    this.appId = appId;
  }


  public AppCustomData dataType(DataTypeEnum dataType) {
    
    
    
    
    this.dataType = dataType;
    return this;
  }

   /**
   * The type of custom data (file, database, ...)
   * @return dataType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of custom data (file, database, ...)")

  public DataTypeEnum getDataType() {
    return dataType;
  }


  public void setDataType(DataTypeEnum dataType) {
    
    
    
    this.dataType = dataType;
  }


  public AppCustomData fileContent(File fileContent) {
    
    
    
    
    this.fileContent = fileContent;
    return this;
  }

   /**
   * The contents of the file
   * @return fileContent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The contents of the file")

  public File getFileContent() {
    return fileContent;
  }


  public void setFileContent(File fileContent) {
    
    
    
    this.fileContent = fileContent;
  }


  public AppCustomData fileMime(String fileMime) {
    
    
    
    
    this.fileMime = fileMime;
    return this;
  }

   /**
   * The mimetype of the file
   * @return fileMime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The mimetype of the file")

  public String getFileMime() {
    return fileMime;
  }


  public void setFileMime(String fileMime) {
    
    
    
    this.fileMime = fileMime;
  }


  public AppCustomData fileName(String fileName) {
    
    
    
    
    this.fileName = fileName;
    return this;
  }

   /**
   * The name of the file
   * @return fileName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of the file")

  public String getFileName() {
    return fileName;
  }


  public void setFileName(String fileName) {
    
    
    
    this.fileName = fileName;
  }


  public AppCustomData fileSize(Integer fileSize) {
    
    
    
    
    this.fileSize = fileSize;
    return this;
  }

   /**
   * The size of the file in Bytes
   * @return fileSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The size of the file in Bytes")

  public Integer getFileSize() {
    return fileSize;
  }


  public void setFileSize(Integer fileSize) {
    
    
    
    this.fileSize = fileSize;
  }


  public AppCustomData id(UUID id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The ID
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    
    
    
    this.id = id;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AppCustomData instance itself
   */
  public AppCustomData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppCustomData appCustomData = (AppCustomData) o;
    return Objects.equals(this.addedOn, appCustomData.addedOn) &&
        Objects.equals(this.appId, appCustomData.appId) &&
        Objects.equals(this.dataType, appCustomData.dataType) &&
        Objects.equals(this.fileContent, appCustomData.fileContent) &&
        Objects.equals(this.fileMime, appCustomData.fileMime) &&
        Objects.equals(this.fileName, appCustomData.fileName) &&
        Objects.equals(this.fileSize, appCustomData.fileSize) &&
        Objects.equals(this.id, appCustomData.id)&&
        Objects.equals(this.additionalProperties, appCustomData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addedOn, appId, dataType, fileContent, fileMime, fileName, fileSize, id, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppCustomData {\n");
    sb.append("    addedOn: ").append(toIndentedString(addedOn)).append("\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    fileContent: ").append(toIndentedString(fileContent)).append("\n");
    sb.append("    fileMime: ").append(toIndentedString(fileMime)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    fileSize: ").append(toIndentedString(fileSize)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("added_on");
    openapiFields.add("app_id");
    openapiFields.add("data_type");
    openapiFields.add("file_content");
    openapiFields.add("file_mime");
    openapiFields.add("file_name");
    openapiFields.add("file_size");
    openapiFields.add("id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("app_id");
    openapiRequiredFields.add("data_type");
    openapiRequiredFields.add("file_mime");
    openapiRequiredFields.add("file_name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AppCustomData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AppCustomData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppCustomData is not found in the empty JSON string", AppCustomData.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AppCustomData.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("app_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_id").toString()));
      }
      if (!jsonObj.get("data_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data_type").toString()));
      }
      if (!jsonObj.get("file_mime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_mime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_mime").toString()));
      }
      if (!jsonObj.get("file_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_name").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppCustomData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppCustomData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppCustomData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppCustomData.class));

       return (TypeAdapter<T>) new TypeAdapter<AppCustomData>() {
           @Override
           public void write(JsonWriter out, AppCustomData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AppCustomData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AppCustomData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AppCustomData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AppCustomData
  * @throws IOException if the JSON string is invalid with respect to AppCustomData
  */
  public static AppCustomData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppCustomData.class);
  }

 /**
  * Convert an instance of AppCustomData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

