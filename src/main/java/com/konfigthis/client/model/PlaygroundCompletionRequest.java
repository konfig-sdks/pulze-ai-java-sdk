/*
 * Pulze.ai API
 * At Pulze it's our mission to supercharge today's workforce with AI to maximize the world's prosperity. We are doing so by enabling companies of any size to securely leverage Large Language Models (LLM) and easily build AI features into their apps. Our enterprise platform has access to all best in class LLMs and can route user requests to the most relevant model to get the highest quality response at the best price thanks to our smart meta model. End users can leverage pre-built applications, such as our Marketing AI product, or build custom apps on top of the Pulze Platform.  We are a VC Funded, early stage startup based in San Francisco.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.LLMModelWeights;
import com.konfigthis.client.model.RoleContentChatChoice;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PlaygroundCompletionRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PlaygroundCompletionRequest {
  public static final String SERIALIZED_NAME_APP_ID = "app_id";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private UUID appId;

  public static final String SERIALIZED_NAME_MAX_TOKENS = "max_tokens";
  @SerializedName(SERIALIZED_NAME_MAX_TOKENS)
  private Integer maxTokens = 140;

  public static final String SERIALIZED_NAME_MESSAGES = "messages";
  @SerializedName(SERIALIZED_NAME_MESSAGES)
  private List<RoleContentChatChoice> messages = null;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_TEMPERATURE = "temperature";
  @SerializedName(SERIALIZED_NAME_TEMPERATURE)
  private Double temperature = 0.4d;

  public static final String SERIALIZED_NAME_WEIGHTS = "weights";
  @SerializedName(SERIALIZED_NAME_WEIGHTS)
  private LLMModelWeights weights;

  public PlaygroundCompletionRequest() {
  }

  public PlaygroundCompletionRequest appId(UUID appId) {
    
    
    
    
    this.appId = appId;
    return this;
  }

   /**
   * Optionally, send an App ID belonging to this user&#39;s org and all the logs will be logged into that app. This usually means the user is using the playground from the app&#39;s page itself.
   * @return appId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optionally, send an App ID belonging to this user's org and all the logs will be logged into that app. This usually means the user is using the playground from the app's page itself.")

  public UUID getAppId() {
    return appId;
  }


  public void setAppId(UUID appId) {
    
    
    
    this.appId = appId;
  }


  public PlaygroundCompletionRequest maxTokens(Integer maxTokens) {
    if (maxTokens != null && maxTokens < 1) {
      throw new IllegalArgumentException("Invalid value for maxTokens. Must be greater than or equal to 1.");
    }
    
    
    
    this.maxTokens = maxTokens;
    return this;
  }

   /**
   * The maximum number of tokens for the request
   * minimum: 1
   * @return maxTokens
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "140", value = "The maximum number of tokens for the request")

  public Integer getMaxTokens() {
    return maxTokens;
  }


  public void setMaxTokens(Integer maxTokens) {
    if (maxTokens != null && maxTokens < 1) {
      throw new IllegalArgumentException("Invalid value for maxTokens. Must be greater than or equal to 1.");
    }
    
    
    this.maxTokens = maxTokens;
  }


  public PlaygroundCompletionRequest messages(List<RoleContentChatChoice> messages) {
    
    
    
    
    this.messages = messages;
    return this;
  }

  public PlaygroundCompletionRequest addMessagesItem(RoleContentChatChoice messagesItem) {
    if (this.messages == null) {
      this.messages = new ArrayList<>();
    }
    this.messages.add(messagesItem);
    return this;
  }

   /**
   * The list of messages (user/assistant/user/...) for the prompt. At least one message required
   * @return messages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[]", value = "The list of messages (user/assistant/user/...) for the prompt. At least one message required")

  public List<RoleContentChatChoice> getMessages() {
    return messages;
  }


  public void setMessages(List<RoleContentChatChoice> messages) {
    
    
    
    this.messages = messages;
  }


  public PlaygroundCompletionRequest model(String model) {
    
    
    
    
    this.model = model;
    return this;
  }

   /**
   * An optional model name. If specified, that model will be used
   * @return model
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An optional model name. If specified, that model will be used")

  public String getModel() {
    return model;
  }


  public void setModel(String model) {
    
    
    
    this.model = model;
  }


  public PlaygroundCompletionRequest temperature(Double temperature) {
    
    if (temperature != null && temperature > 1) {
      throw new IllegalArgumentException("Invalid value for temperature. Must be less than or equal to 1.");
    }
    
    
    this.temperature = temperature;
    return this;
  }

  public PlaygroundCompletionRequest temperature(Integer temperature) {
    
    if (temperature != null && temperature > 1) {
      throw new IllegalArgumentException("Invalid value for temperature. Must be less than or equal to 1.");
    }
    
    
    this.temperature = temperature.doubleValue();
    return this;
  }

   /**
   * The temperature of the request
   * maximum: 1
   * @return temperature
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.4", value = "The temperature of the request")

  public Double getTemperature() {
    return temperature;
  }


  public void setTemperature(Double temperature) {
    
    if (temperature != null && temperature > 1) {
      throw new IllegalArgumentException("Invalid value for temperature. Must be less than or equal to 1.");
    }
    
    this.temperature = temperature;
  }


  public PlaygroundCompletionRequest weights(LLMModelWeights weights) {
    
    
    
    
    this.weights = weights;
    return this;
  }

   /**
   * @required The weights specific to this request
   * @return weights
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "@required The weights specific to this request")

  public LLMModelWeights getWeights() {
    return weights;
  }


  public void setWeights(LLMModelWeights weights) {
    
    
    
    this.weights = weights;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PlaygroundCompletionRequest instance itself
   */
  public PlaygroundCompletionRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlaygroundCompletionRequest playgroundCompletionRequest = (PlaygroundCompletionRequest) o;
    return Objects.equals(this.appId, playgroundCompletionRequest.appId) &&
        Objects.equals(this.maxTokens, playgroundCompletionRequest.maxTokens) &&
        Objects.equals(this.messages, playgroundCompletionRequest.messages) &&
        Objects.equals(this.model, playgroundCompletionRequest.model) &&
        Objects.equals(this.temperature, playgroundCompletionRequest.temperature) &&
        Objects.equals(this.weights, playgroundCompletionRequest.weights)&&
        Objects.equals(this.additionalProperties, playgroundCompletionRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appId, maxTokens, messages, model, temperature, weights, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlaygroundCompletionRequest {\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    maxTokens: ").append(toIndentedString(maxTokens)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    temperature: ").append(toIndentedString(temperature)).append("\n");
    sb.append("    weights: ").append(toIndentedString(weights)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("app_id");
    openapiFields.add("max_tokens");
    openapiFields.add("messages");
    openapiFields.add("model");
    openapiFields.add("temperature");
    openapiFields.add("weights");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PlaygroundCompletionRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PlaygroundCompletionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlaygroundCompletionRequest is not found in the empty JSON string", PlaygroundCompletionRequest.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("app_id") != null && !jsonObj.get("app_id").isJsonNull()) && !jsonObj.get("app_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_id").toString()));
      }
      if (jsonObj.get("messages") != null && !jsonObj.get("messages").isJsonNull()) {
        JsonArray jsonArraymessages = jsonObj.getAsJsonArray("messages");
        if (jsonArraymessages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("messages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `messages` to be an array in the JSON string but got `%s`", jsonObj.get("messages").toString()));
          }

          // validate the optional field `messages` (array)
          for (int i = 0; i < jsonArraymessages.size(); i++) {
            RoleContentChatChoice.validateJsonObject(jsonArraymessages.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) && !jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      // validate the optional field `weights`
      if (jsonObj.get("weights") != null && !jsonObj.get("weights").isJsonNull()) {
        LLMModelWeights.validateJsonObject(jsonObj.getAsJsonObject("weights"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlaygroundCompletionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlaygroundCompletionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlaygroundCompletionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlaygroundCompletionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PlaygroundCompletionRequest>() {
           @Override
           public void write(JsonWriter out, PlaygroundCompletionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PlaygroundCompletionRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PlaygroundCompletionRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PlaygroundCompletionRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PlaygroundCompletionRequest
  * @throws IOException if the JSON string is invalid with respect to PlaygroundCompletionRequest
  */
  public static PlaygroundCompletionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlaygroundCompletionRequest.class);
  }

 /**
  * Convert an instance of PlaygroundCompletionRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

