/*
 * Pulze.ai API
 * At Pulze it's our mission to supercharge today's workforce with AI to maximize the world's prosperity. We are doing so by enabling companies of any size to securely leverage Large Language Models (LLM) and easily build AI features into their apps. Our enterprise platform has access to all best in class LLMs and can route user requests to the most relevant model to get the highest quality response at the best price thanks to our smart meta model. End users can leverage pre-built applications, such as our Marketing AI product, or build custom apps on top of the Pulze Platform.  We are a VC Funded, early stage startup based in San Francisco.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * LLMModelPolicies
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class LLMModelPolicies {
  public static final String SERIALIZED_NAME_MAX_COST = "max_cost";
  @SerializedName(SERIALIZED_NAME_MAX_COST)
  private Double maxCost = 0.02d;

  public static final String SERIALIZED_NAME_MAX_SAME_MODEL_RETRIES = "max_same_model_retries";
  @SerializedName(SERIALIZED_NAME_MAX_SAME_MODEL_RETRIES)
  private Integer maxSameModelRetries = 1;

  public static final String SERIALIZED_NAME_MAX_SWITCH_MODEL_RETRIES = "max_switch_model_retries";
  @SerializedName(SERIALIZED_NAME_MAX_SWITCH_MODEL_RETRIES)
  private Integer maxSwitchModelRetries = 1;

  /**
   * Optimize the internal / intermediate LLM requests, for a big gain in speed and cost savings, at the cost of a potential, and very slight, penalty on quality. The final request (\&quot;SYNTHESIZE\&quot;) is always performed using your original settings.
   */
  @JsonAdapter(OptimizeInternalRequestsEnum.Adapter.class)
 public enum OptimizeInternalRequestsEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    OptimizeInternalRequestsEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OptimizeInternalRequestsEnum fromValue(Integer value) {
      for (OptimizeInternalRequestsEnum b : OptimizeInternalRequestsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OptimizeInternalRequestsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OptimizeInternalRequestsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OptimizeInternalRequestsEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return OptimizeInternalRequestsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OPTIMIZE_INTERNAL_REQUESTS = "optimize_internal_requests";
  @SerializedName(SERIALIZED_NAME_OPTIMIZE_INTERNAL_REQUESTS)
  private OptimizeInternalRequestsEnum optimizeInternalRequests = OptimizeInternalRequestsEnum.NUMBER_0;

  /**
   *          The level of privacy for a given request         0 &#x3D; (UNSUPPORTED -- public logs)         1 &#x3D; Log request, response and all of its metadata (Normal mode)         2 &#x3D; Do not log neither the request prompt nor the response text. Logs are still visible, and all of the request metadata accessible. Retrievable as a log. (TBD)         3 &#x3D; Do not log at all. Internally, a minimal representation may be stored for billing: model name, tokens used, which app it belongs to, and timestamp. Not retrievable as a log. (TBD)         
   */
  @JsonAdapter(PrivacyLevelEnum.Adapter.class)
 public enum PrivacyLevelEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3);

    private Integer value;

    PrivacyLevelEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PrivacyLevelEnum fromValue(Integer value) {
      for (PrivacyLevelEnum b : PrivacyLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PrivacyLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrivacyLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PrivacyLevelEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return PrivacyLevelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PRIVACY_LEVEL = "privacy_level";
  @SerializedName(SERIALIZED_NAME_PRIVACY_LEVEL)
  private PrivacyLevelEnum privacyLevel = PrivacyLevelEnum.NUMBER_1;

  public static final String SERIALIZED_NAME_PROMPT_ID = "prompt_id";
  @SerializedName(SERIALIZED_NAME_PROMPT_ID)
  private UUID promptId;

  public LLMModelPolicies() {
  }

  public LLMModelPolicies maxCost(Double maxCost) {
    
    
    
    
    this.maxCost = maxCost;
    return this;
  }

  public LLMModelPolicies maxCost(Integer maxCost) {
    
    
    
    
    this.maxCost = maxCost.doubleValue();
    return this;
  }

   /**
   * The maximum cost allowed for a request. Only works with compounded requests that require multiple LLM calls. If the value is reached, it will exit with an exception.
   * @return maxCost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.02", value = "The maximum cost allowed for a request. Only works with compounded requests that require multiple LLM calls. If the value is reached, it will exit with an exception.")

  public Double getMaxCost() {
    return maxCost;
  }


  public void setMaxCost(Double maxCost) {
    
    
    
    this.maxCost = maxCost;
  }


  public LLMModelPolicies maxSameModelRetries(Integer maxSameModelRetries) {
    
    if (maxSameModelRetries != null && maxSameModelRetries > 3) {
      throw new IllegalArgumentException("Invalid value for maxSameModelRetries. Must be less than or equal to 3.");
    }
    
    
    this.maxSameModelRetries = maxSameModelRetries;
    return this;
  }

   /**
   * If an LLM call fails, how many times should Pulze _retry the call to the same LLM_? There will be a maximum of N+1 calls (original + N retries)
   * maximum: 3
   * @return maxSameModelRetries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "If an LLM call fails, how many times should Pulze _retry the call to the same LLM_? There will be a maximum of N+1 calls (original + N retries)")

  public Integer getMaxSameModelRetries() {
    return maxSameModelRetries;
  }


  public void setMaxSameModelRetries(Integer maxSameModelRetries) {
    
    if (maxSameModelRetries != null && maxSameModelRetries > 3) {
      throw new IllegalArgumentException("Invalid value for maxSameModelRetries. Must be less than or equal to 3.");
    }
    
    this.maxSameModelRetries = maxSameModelRetries;
  }


  public LLMModelPolicies maxSwitchModelRetries(Integer maxSwitchModelRetries) {
    
    if (maxSwitchModelRetries != null && maxSwitchModelRetries > 5) {
      throw new IllegalArgumentException("Invalid value for maxSwitchModelRetries. Must be less than or equal to 5.");
    }
    
    
    this.maxSwitchModelRetries = maxSwitchModelRetries;
    return this;
  }

   /**
   * If an LLM call fails, _how many other models_ should Pulze try, chosen by quality descending? It will be a maximum of N+1 models (original + N other models)
   * maximum: 5
   * @return maxSwitchModelRetries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "If an LLM call fails, _how many other models_ should Pulze try, chosen by quality descending? It will be a maximum of N+1 models (original + N other models)")

  public Integer getMaxSwitchModelRetries() {
    return maxSwitchModelRetries;
  }


  public void setMaxSwitchModelRetries(Integer maxSwitchModelRetries) {
    
    if (maxSwitchModelRetries != null && maxSwitchModelRetries > 5) {
      throw new IllegalArgumentException("Invalid value for maxSwitchModelRetries. Must be less than or equal to 5.");
    }
    
    this.maxSwitchModelRetries = maxSwitchModelRetries;
  }


  public LLMModelPolicies optimizeInternalRequests(OptimizeInternalRequestsEnum optimizeInternalRequests) {
    
    
    
    
    this.optimizeInternalRequests = optimizeInternalRequests;
    return this;
  }

   /**
   * Optimize the internal / intermediate LLM requests, for a big gain in speed and cost savings, at the cost of a potential, and very slight, penalty on quality. The final request (\&quot;SYNTHESIZE\&quot;) is always performed using your original settings.
   * @return optimizeInternalRequests
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "_0", value = "Optimize the internal / intermediate LLM requests, for a big gain in speed and cost savings, at the cost of a potential, and very slight, penalty on quality. The final request (\"SYNTHESIZE\") is always performed using your original settings.")

  public OptimizeInternalRequestsEnum getOptimizeInternalRequests() {
    return optimizeInternalRequests;
  }


  public void setOptimizeInternalRequests(OptimizeInternalRequestsEnum optimizeInternalRequests) {
    
    
    
    this.optimizeInternalRequests = optimizeInternalRequests;
  }


  public LLMModelPolicies privacyLevel(PrivacyLevelEnum privacyLevel) {
    
    
    
    
    this.privacyLevel = privacyLevel;
    return this;
  }

   /**
   *          The level of privacy for a given request         0 &#x3D; (UNSUPPORTED -- public logs)         1 &#x3D; Log request, response and all of its metadata (Normal mode)         2 &#x3D; Do not log neither the request prompt nor the response text. Logs are still visible, and all of the request metadata accessible. Retrievable as a log. (TBD)         3 &#x3D; Do not log at all. Internally, a minimal representation may be stored for billing: model name, tokens used, which app it belongs to, and timestamp. Not retrievable as a log. (TBD)         
   * @return privacyLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "_1", value = "         The level of privacy for a given request         0 = (UNSUPPORTED -- public logs)         1 = Log request, response and all of its metadata (Normal mode)         2 = Do not log neither the request prompt nor the response text. Logs are still visible, and all of the request metadata accessible. Retrievable as a log. (TBD)         3 = Do not log at all. Internally, a minimal representation may be stored for billing: model name, tokens used, which app it belongs to, and timestamp. Not retrievable as a log. (TBD)         ")

  public PrivacyLevelEnum getPrivacyLevel() {
    return privacyLevel;
  }


  public void setPrivacyLevel(PrivacyLevelEnum privacyLevel) {
    
    
    
    this.privacyLevel = privacyLevel;
  }


  public LLMModelPolicies promptId(UUID promptId) {
    
    
    
    
    this.promptId = promptId;
    return this;
  }

   /**
   * Prompt ID that we will use for requests
   * @return promptId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Prompt ID that we will use for requests")

  public UUID getPromptId() {
    return promptId;
  }


  public void setPromptId(UUID promptId) {
    
    
    
    this.promptId = promptId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LLMModelPolicies instance itself
   */
  public LLMModelPolicies putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LLMModelPolicies llMModelPolicies = (LLMModelPolicies) o;
    return Objects.equals(this.maxCost, llMModelPolicies.maxCost) &&
        Objects.equals(this.maxSameModelRetries, llMModelPolicies.maxSameModelRetries) &&
        Objects.equals(this.maxSwitchModelRetries, llMModelPolicies.maxSwitchModelRetries) &&
        Objects.equals(this.optimizeInternalRequests, llMModelPolicies.optimizeInternalRequests) &&
        Objects.equals(this.privacyLevel, llMModelPolicies.privacyLevel) &&
        Objects.equals(this.promptId, llMModelPolicies.promptId)&&
        Objects.equals(this.additionalProperties, llMModelPolicies.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxCost, maxSameModelRetries, maxSwitchModelRetries, optimizeInternalRequests, privacyLevel, promptId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LLMModelPolicies {\n");
    sb.append("    maxCost: ").append(toIndentedString(maxCost)).append("\n");
    sb.append("    maxSameModelRetries: ").append(toIndentedString(maxSameModelRetries)).append("\n");
    sb.append("    maxSwitchModelRetries: ").append(toIndentedString(maxSwitchModelRetries)).append("\n");
    sb.append("    optimizeInternalRequests: ").append(toIndentedString(optimizeInternalRequests)).append("\n");
    sb.append("    privacyLevel: ").append(toIndentedString(privacyLevel)).append("\n");
    sb.append("    promptId: ").append(toIndentedString(promptId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("max_cost");
    openapiFields.add("max_same_model_retries");
    openapiFields.add("max_switch_model_retries");
    openapiFields.add("optimize_internal_requests");
    openapiFields.add("privacy_level");
    openapiFields.add("prompt_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LLMModelPolicies
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LLMModelPolicies.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LLMModelPolicies is not found in the empty JSON string", LLMModelPolicies.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("prompt_id") != null && !jsonObj.get("prompt_id").isJsonNull()) && !jsonObj.get("prompt_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prompt_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prompt_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LLMModelPolicies.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LLMModelPolicies' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LLMModelPolicies> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LLMModelPolicies.class));

       return (TypeAdapter<T>) new TypeAdapter<LLMModelPolicies>() {
           @Override
           public void write(JsonWriter out, LLMModelPolicies value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LLMModelPolicies read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LLMModelPolicies instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LLMModelPolicies given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LLMModelPolicies
  * @throws IOException if the JSON string is invalid with respect to LLMModelPolicies
  */
  public static LLMModelPolicies fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LLMModelPolicies.class);
  }

 /**
  * Convert an instance of LLMModelPolicies to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

