/*
 * Pulze.ai API
 * At Pulze it's our mission to supercharge today's workforce with AI to maximize the world's prosperity. We are doing so by enabling companies of any size to securely leverage Large Language Models (LLM) and easily build AI features into their apps. Our enterprise platform has access to all best in class LLMs and can route user requests to the most relevant model to get the highest quality response at the best price thanks to our smart meta model. End users can leverage pre-built applications, such as our Marketing AI product, or build custom apps on top of the Pulze Platform.  We are a VC Funded, early stage startup based in San Francisco.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * OrgMemberInvite
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class OrgMemberInvite {
  public static final String SERIALIZED_NAME_ADDED_ON = "added_on";
  @SerializedName(SERIALIZED_NAME_ADDED_ON)
  private OffsetDateTime addedOn;

  public static final String SERIALIZED_NAME_AUTH0_ID = "auth0_id";
  @SerializedName(SERIALIZED_NAME_AUTH0_ID)
  private String auth0Id;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  /**
   * Gets or Sets inviteStatus
   */
  @JsonAdapter(InviteStatusEnum.Adapter.class)
 public enum InviteStatusEnum {
    ACCEPTED("accepted"),
    
    DECLINED("declined"),
    
    PENDING("pending");

    private String value;

    InviteStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InviteStatusEnum fromValue(String value) {
      for (InviteStatusEnum b : InviteStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InviteStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InviteStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InviteStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InviteStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_INVITE_STATUS = "invite_status";
  @SerializedName(SERIALIZED_NAME_INVITE_STATUS)
  private InviteStatusEnum inviteStatus;

  public static final String SERIALIZED_NAME_IS_CURRENT_USER = "is_current_user";
  @SerializedName(SERIALIZED_NAME_IS_CURRENT_USER)
  private Boolean isCurrentUser;

  public static final String SERIALIZED_NAME_LAST_LOGIN = "last_login";
  @SerializedName(SERIALIZED_NAME_LAST_LOGIN)
  private OffsetDateTime lastLogin;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private String permissions;

  public static final String SERIALIZED_NAME_PICTURE = "picture";
  @SerializedName(SERIALIZED_NAME_PICTURE)
  private String picture;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public OrgMemberInvite() {
  }

  public OrgMemberInvite addedOn(OffsetDateTime addedOn) {
    
    
    
    
    this.addedOn = addedOn;
    return this;
  }

   /**
   * Get addedOn
   * @return addedOn
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getAddedOn() {
    return addedOn;
  }


  public void setAddedOn(OffsetDateTime addedOn) {
    
    
    
    this.addedOn = addedOn;
  }


  public OrgMemberInvite auth0Id(String auth0Id) {
    
    
    
    
    this.auth0Id = auth0Id;
    return this;
  }

   /**
   * Get auth0Id
   * @return auth0Id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAuth0Id() {
    return auth0Id;
  }


  public void setAuth0Id(String auth0Id) {
    
    
    
    this.auth0Id = auth0Id;
  }


  public OrgMemberInvite email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public OrgMemberInvite inviteStatus(InviteStatusEnum inviteStatus) {
    
    
    
    
    this.inviteStatus = inviteStatus;
    return this;
  }

   /**
   * Get inviteStatus
   * @return inviteStatus
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public InviteStatusEnum getInviteStatus() {
    return inviteStatus;
  }


  public void setInviteStatus(InviteStatusEnum inviteStatus) {
    
    
    
    this.inviteStatus = inviteStatus;
  }


  public OrgMemberInvite isCurrentUser(Boolean isCurrentUser) {
    
    
    
    
    this.isCurrentUser = isCurrentUser;
    return this;
  }

   /**
   * Get isCurrentUser
   * @return isCurrentUser
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getIsCurrentUser() {
    return isCurrentUser;
  }


  public void setIsCurrentUser(Boolean isCurrentUser) {
    
    
    
    this.isCurrentUser = isCurrentUser;
  }


  public OrgMemberInvite lastLogin(OffsetDateTime lastLogin) {
    
    
    
    
    this.lastLogin = lastLogin;
    return this;
  }

   /**
   * Get lastLogin
   * @return lastLogin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getLastLogin() {
    return lastLogin;
  }


  public void setLastLogin(OffsetDateTime lastLogin) {
    
    
    
    this.lastLogin = lastLogin;
  }


  public OrgMemberInvite name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public OrgMemberInvite permissions(String permissions) {
    
    
    
    
    this.permissions = permissions;
    return this;
  }

   /**
   * Get permissions
   * @return permissions
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getPermissions() {
    return permissions;
  }


  public void setPermissions(String permissions) {
    
    
    
    this.permissions = permissions;
  }


  public OrgMemberInvite picture(String picture) {
    
    
    
    
    this.picture = picture;
    return this;
  }

   /**
   * Get picture
   * @return picture
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPicture() {
    return picture;
  }


  public void setPicture(String picture) {
    
    
    
    this.picture = picture;
  }


  public OrgMemberInvite token(String token) {
    
    
    
    
    this.token = token;
    return this;
  }

   /**
   * Get token
   * @return token
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getToken() {
    return token;
  }


  public void setToken(String token) {
    
    
    
    this.token = token;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OrgMemberInvite instance itself
   */
  public OrgMemberInvite putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrgMemberInvite orgMemberInvite = (OrgMemberInvite) o;
    return Objects.equals(this.addedOn, orgMemberInvite.addedOn) &&
        Objects.equals(this.auth0Id, orgMemberInvite.auth0Id) &&
        Objects.equals(this.email, orgMemberInvite.email) &&
        Objects.equals(this.inviteStatus, orgMemberInvite.inviteStatus) &&
        Objects.equals(this.isCurrentUser, orgMemberInvite.isCurrentUser) &&
        Objects.equals(this.lastLogin, orgMemberInvite.lastLogin) &&
        Objects.equals(this.name, orgMemberInvite.name) &&
        Objects.equals(this.permissions, orgMemberInvite.permissions) &&
        Objects.equals(this.picture, orgMemberInvite.picture) &&
        Objects.equals(this.token, orgMemberInvite.token)&&
        Objects.equals(this.additionalProperties, orgMemberInvite.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addedOn, auth0Id, email, inviteStatus, isCurrentUser, lastLogin, name, permissions, picture, token, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrgMemberInvite {\n");
    sb.append("    addedOn: ").append(toIndentedString(addedOn)).append("\n");
    sb.append("    auth0Id: ").append(toIndentedString(auth0Id)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    inviteStatus: ").append(toIndentedString(inviteStatus)).append("\n");
    sb.append("    isCurrentUser: ").append(toIndentedString(isCurrentUser)).append("\n");
    sb.append("    lastLogin: ").append(toIndentedString(lastLogin)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    picture: ").append(toIndentedString(picture)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("added_on");
    openapiFields.add("auth0_id");
    openapiFields.add("email");
    openapiFields.add("invite_status");
    openapiFields.add("is_current_user");
    openapiFields.add("last_login");
    openapiFields.add("name");
    openapiFields.add("permissions");
    openapiFields.add("picture");
    openapiFields.add("token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("added_on");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("invite_status");
    openapiRequiredFields.add("is_current_user");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("permissions");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OrgMemberInvite
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OrgMemberInvite.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrgMemberInvite is not found in the empty JSON string", OrgMemberInvite.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrgMemberInvite.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("auth0_id") != null && !jsonObj.get("auth0_id").isJsonNull()) && !jsonObj.get("auth0_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth0_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth0_id").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("invite_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invite_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invite_status").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("permissions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permissions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permissions").toString()));
      }
      if ((jsonObj.get("picture") != null && !jsonObj.get("picture").isJsonNull()) && !jsonObj.get("picture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `picture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("picture").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrgMemberInvite.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrgMemberInvite' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrgMemberInvite> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrgMemberInvite.class));

       return (TypeAdapter<T>) new TypeAdapter<OrgMemberInvite>() {
           @Override
           public void write(JsonWriter out, OrgMemberInvite value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OrgMemberInvite read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             OrgMemberInvite instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrgMemberInvite given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrgMemberInvite
  * @throws IOException if the JSON string is invalid with respect to OrgMemberInvite
  */
  public static OrgMemberInvite fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrgMemberInvite.class);
  }

 /**
  * Convert an instance of OrgMemberInvite to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

