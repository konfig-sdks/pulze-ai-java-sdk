/*
 * Pulze.ai API
 * At Pulze it's our mission to supercharge today's workforce with AI to maximize the world's prosperity. We are doing so by enabling companies of any size to securely leverage Large Language Models (LLM) and easily build AI features into their apps. Our enterprise platform has access to all best in class LLMs and can route user requests to the most relevant model to get the highest quality response at the best price thanks to our smart meta model. End users can leverage pre-built applications, such as our Marketing AI product, or build custom apps on top of the Pulze Platform.  We are a VC Funded, early stage startup based in San Francisco.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.PaymentDetailsBalance;
import com.konfigthis.client.model.SubscriptionPaused;
import com.konfigthis.client.model.UserDetails;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * FrontendSettings
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class FrontendSettings {
  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  private PaymentDetailsBalance balance;

  /**
   * The currency of the user. Currently only \&quot;USD\&quot;.
   */
  @JsonAdapter(CurrencyEnum.Adapter.class)
 public enum CurrencyEnum {
    USD("USD");

    private String value;

    CurrencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrencyEnum fromValue(String value) {
      for (CurrencyEnum b : CurrencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurrencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurrencyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private CurrencyEnum currency;

  public static final String SERIALIZED_NAME_DID_ONBOARDING_SETUP = "did_onboarding_setup";
  @SerializedName(SERIALIZED_NAME_DID_ONBOARDING_SETUP)
  private Boolean didOnboardingSetup;

  public static final String SERIALIZED_NAME_EMAIL_VERIFIED = "email_verified";
  @SerializedName(SERIALIZED_NAME_EMAIL_VERIFIED)
  private Boolean emailVerified;

  public static final String SERIALIZED_NAME_PRIVACY_ACCEPTED = "privacy_accepted";
  @SerializedName(SERIALIZED_NAME_PRIVACY_ACCEPTED)
  private OffsetDateTime privacyAccepted;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_PAUSED = "subscription_paused";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_PAUSED)
  private SubscriptionPaused subscriptionPaused;

  public static final String SERIALIZED_NAME_TERMS_ACCEPTED = "terms_accepted";
  @SerializedName(SERIALIZED_NAME_TERMS_ACCEPTED)
  private OffsetDateTime termsAccepted;

  public static final String SERIALIZED_NAME_USER_DETAILS = "user_details";
  @SerializedName(SERIALIZED_NAME_USER_DETAILS)
  private UserDetails userDetails;

  public FrontendSettings() {
  }

  public FrontendSettings balance(PaymentDetailsBalance balance) {
    
    
    
    
    this.balance = balance;
    return this;
  }

   /**
   * Balance details
   * @return balance
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Balance details")

  public PaymentDetailsBalance getBalance() {
    return balance;
  }


  public void setBalance(PaymentDetailsBalance balance) {
    
    
    
    this.balance = balance;
  }


  public FrontendSettings currency(CurrencyEnum currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * The currency of the user. Currently only \&quot;USD\&quot;.
   * @return currency
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The currency of the user. Currently only \"USD\".")

  public CurrencyEnum getCurrency() {
    return currency;
  }


  public void setCurrency(CurrencyEnum currency) {
    
    
    
    this.currency = currency;
  }


  public FrontendSettings didOnboardingSetup(Boolean didOnboardingSetup) {
    
    
    
    
    this.didOnboardingSetup = didOnboardingSetup;
    return this;
  }

   /**
   * False when it&#39;s the user&#39;s first login/signup for an organization
   * @return didOnboardingSetup
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "False when it's the user's first login/signup for an organization")

  public Boolean getDidOnboardingSetup() {
    return didOnboardingSetup;
  }


  public void setDidOnboardingSetup(Boolean didOnboardingSetup) {
    
    
    
    this.didOnboardingSetup = didOnboardingSetup;
  }


  public FrontendSettings emailVerified(Boolean emailVerified) {
    
    
    
    
    this.emailVerified = emailVerified;
    return this;
  }

   /**
   * True if the email was verified
   * @return emailVerified
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "True if the email was verified")

  public Boolean getEmailVerified() {
    return emailVerified;
  }


  public void setEmailVerified(Boolean emailVerified) {
    
    
    
    this.emailVerified = emailVerified;
  }


  public FrontendSettings privacyAccepted(OffsetDateTime privacyAccepted) {
    
    
    
    
    this.privacyAccepted = privacyAccepted;
    return this;
  }

   /**
   * Date of last accepted Privacy Policy
   * @return privacyAccepted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date of last accepted Privacy Policy")

  public OffsetDateTime getPrivacyAccepted() {
    return privacyAccepted;
  }


  public void setPrivacyAccepted(OffsetDateTime privacyAccepted) {
    
    
    
    this.privacyAccepted = privacyAccepted;
  }


  public FrontendSettings subscriptionPaused(SubscriptionPaused subscriptionPaused) {
    
    
    
    
    this.subscriptionPaused = subscriptionPaused;
    return this;
  }

   /**
   * Returned to the frontend when the subscription has been paused for any reason.
   * @return subscriptionPaused
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Returned to the frontend when the subscription has been paused for any reason.")

  public SubscriptionPaused getSubscriptionPaused() {
    return subscriptionPaused;
  }


  public void setSubscriptionPaused(SubscriptionPaused subscriptionPaused) {
    
    
    
    this.subscriptionPaused = subscriptionPaused;
  }


  public FrontendSettings termsAccepted(OffsetDateTime termsAccepted) {
    
    
    
    
    this.termsAccepted = termsAccepted;
    return this;
  }

   /**
   * Date of last accepted Terms of Service
   * @return termsAccepted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date of last accepted Terms of Service")

  public OffsetDateTime getTermsAccepted() {
    return termsAccepted;
  }


  public void setTermsAccepted(OffsetDateTime termsAccepted) {
    
    
    
    this.termsAccepted = termsAccepted;
  }


  public FrontendSettings userDetails(UserDetails userDetails) {
    
    
    
    
    this.userDetails = userDetails;
    return this;
  }

   /**
   * The basic information for the user
   * @return userDetails
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The basic information for the user")

  public UserDetails getUserDetails() {
    return userDetails;
  }


  public void setUserDetails(UserDetails userDetails) {
    
    
    
    this.userDetails = userDetails;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the FrontendSettings instance itself
   */
  public FrontendSettings putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FrontendSettings frontendSettings = (FrontendSettings) o;
    return Objects.equals(this.balance, frontendSettings.balance) &&
        Objects.equals(this.currency, frontendSettings.currency) &&
        Objects.equals(this.didOnboardingSetup, frontendSettings.didOnboardingSetup) &&
        Objects.equals(this.emailVerified, frontendSettings.emailVerified) &&
        Objects.equals(this.privacyAccepted, frontendSettings.privacyAccepted) &&
        Objects.equals(this.subscriptionPaused, frontendSettings.subscriptionPaused) &&
        Objects.equals(this.termsAccepted, frontendSettings.termsAccepted) &&
        Objects.equals(this.userDetails, frontendSettings.userDetails)&&
        Objects.equals(this.additionalProperties, frontendSettings.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(balance, currency, didOnboardingSetup, emailVerified, privacyAccepted, subscriptionPaused, termsAccepted, userDetails, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FrontendSettings {\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    didOnboardingSetup: ").append(toIndentedString(didOnboardingSetup)).append("\n");
    sb.append("    emailVerified: ").append(toIndentedString(emailVerified)).append("\n");
    sb.append("    privacyAccepted: ").append(toIndentedString(privacyAccepted)).append("\n");
    sb.append("    subscriptionPaused: ").append(toIndentedString(subscriptionPaused)).append("\n");
    sb.append("    termsAccepted: ").append(toIndentedString(termsAccepted)).append("\n");
    sb.append("    userDetails: ").append(toIndentedString(userDetails)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("balance");
    openapiFields.add("currency");
    openapiFields.add("did_onboarding_setup");
    openapiFields.add("email_verified");
    openapiFields.add("privacy_accepted");
    openapiFields.add("subscription_paused");
    openapiFields.add("terms_accepted");
    openapiFields.add("user_details");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("balance");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("did_onboarding_setup");
    openapiRequiredFields.add("email_verified");
    openapiRequiredFields.add("user_details");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FrontendSettings
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FrontendSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FrontendSettings is not found in the empty JSON string", FrontendSettings.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FrontendSettings.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `balance`
      PaymentDetailsBalance.validateJsonObject(jsonObj.getAsJsonObject("balance"));
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // validate the optional field `subscription_paused`
      if (jsonObj.get("subscription_paused") != null && !jsonObj.get("subscription_paused").isJsonNull()) {
        SubscriptionPaused.validateJsonObject(jsonObj.getAsJsonObject("subscription_paused"));
      }
      // validate the required field `user_details`
      UserDetails.validateJsonObject(jsonObj.getAsJsonObject("user_details"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FrontendSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FrontendSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FrontendSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FrontendSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<FrontendSettings>() {
           @Override
           public void write(JsonWriter out, FrontendSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public FrontendSettings read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             FrontendSettings instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FrontendSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FrontendSettings
  * @throws IOException if the JSON string is invalid with respect to FrontendSettings
  */
  public static FrontendSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FrontendSettings.class);
  }

 /**
  * Convert an instance of FrontendSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

