/*
 * Pulze.ai API
 * At Pulze it's our mission to supercharge today's workforce with AI to maximize the world's prosperity. We are doing so by enabling companies of any size to securely leverage Large Language Models (LLM) and easily build AI features into their apps. Our enterprise platform has access to all best in class LLMs and can route user requests to the most relevant model to get the highest quality response at the best price thanks to our smart meta model. End users can leverage pre-built applications, such as our Marketing AI product, or build custom apps on top of the Pulze Platform.  We are a VC Funded, early stage startup based in San Francisco.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PulzeModelActiveForApp
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PulzeModelActiveForApp {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active = false;

  public static final String SERIALIZED_NAME_AT = "at";
  @SerializedName(SERIALIZED_NAME_AT)
  private String at;

  public static final String SERIALIZED_NAME_CONTEXT_WINDOW = "context_window";
  @SerializedName(SERIALIZED_NAME_CONTEXT_WINDOW)
  private Integer contextWindow;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private String provider;

  public static final String SERIALIZED_NAME_UNTIL = "until";
  @SerializedName(SERIALIZED_NAME_UNTIL)
  private OffsetDateTime until;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public PulzeModelActiveForApp() {
  }

  public PulzeModelActiveForApp description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description of the model
   * @return description
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A description of the model")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public PulzeModelActiveForApp active(Boolean active) {
    
    
    
    
    this.active = active;
    return this;
  }

   /**
   * Whether the model is active for the app.
   * @return active
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether the model is active for the app.")

  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    
    
    
    this.active = active;
  }


  public PulzeModelActiveForApp at(String at) {
    
    
    
    
    this.at = at;
    return this;
  }

   /**
   * Extra model settings inferred from namespace
   * @return at
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Extra model settings inferred from namespace")

  public String getAt() {
    return at;
  }


  public void setAt(String at) {
    
    
    
    this.at = at;
  }


  public PulzeModelActiveForApp contextWindow(Integer contextWindow) {
    
    
    
    
    this.contextWindow = contextWindow;
    return this;
  }

   /**
   * The max_tokens for this model
   * @return contextWindow
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The max_tokens for this model")

  public Integer getContextWindow() {
    return contextWindow;
  }


  public void setContextWindow(Integer contextWindow) {
    
    
    
    this.contextWindow = contextWindow;
  }


  public PulzeModelActiveForApp id(UUID id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Used to uniquely target models when we enable/disable them
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Used to uniquely target models when we enable/disable them")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    
    
    
    this.id = id;
  }


  public PulzeModelActiveForApp model(String model) {
    
    
    
    
    this.model = model;
    return this;
  }

   /**
   * The name of the model. Can belong to many providers
   * @return model
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of the model. Can belong to many providers")

  public String getModel() {
    return model;
  }


  public void setModel(String model) {
    
    
    
    this.model = model;
  }


  public PulzeModelActiveForApp namespace(String namespace) {
    
    
    
    
    this.namespace = namespace;
    return this;
  }

   /**
   * The fully qualified (namespaced) model name
   * @return namespace
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The fully qualified (namespaced) model name")

  public String getNamespace() {
    return namespace;
  }


  public void setNamespace(String namespace) {
    
    
    
    this.namespace = namespace;
  }


  public PulzeModelActiveForApp owner(String owner) {
    
    
    
    
    this.owner = owner;
    return this;
  }

   /**
   * The owner of the model. Sometimes, for a provider/model combination, many instances exist, trained on different data
   * @return owner
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The owner of the model. Sometimes, for a provider/model combination, many instances exist, trained on different data")

  public String getOwner() {
    return owner;
  }


  public void setOwner(String owner) {
    
    
    
    this.owner = owner;
  }


  public PulzeModelActiveForApp provider(String provider) {
    
    
    
    
    this.provider = provider;
    return this;
  }

   /**
   * The provider for the model.
   * @return provider
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The provider for the model.")

  public String getProvider() {
    return provider;
  }


  public void setProvider(String provider) {
    
    
    
    this.provider = provider;
  }


  public PulzeModelActiveForApp until(OffsetDateTime until) {
    
    
    
    
    this.until = until;
    return this;
  }

   /**
   * The most recent data this model has been trained with
   * @return until
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The most recent data this model has been trained with")

  public OffsetDateTime getUntil() {
    return until;
  }


  public void setUntil(OffsetDateTime until) {
    
    
    
    this.until = until;
  }


  public PulzeModelActiveForApp url(String url) {
    
    
    
    
    this.url = url;
    return this;
  }

   /**
   * A URL to the model&#39;s page or more informatino
   * @return url
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A URL to the model's page or more informatino")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    
    
    
    this.url = url;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PulzeModelActiveForApp instance itself
   */
  public PulzeModelActiveForApp putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PulzeModelActiveForApp pulzeModelActiveForApp = (PulzeModelActiveForApp) o;
    return Objects.equals(this.description, pulzeModelActiveForApp.description) &&
        Objects.equals(this.active, pulzeModelActiveForApp.active) &&
        Objects.equals(this.at, pulzeModelActiveForApp.at) &&
        Objects.equals(this.contextWindow, pulzeModelActiveForApp.contextWindow) &&
        Objects.equals(this.id, pulzeModelActiveForApp.id) &&
        Objects.equals(this.model, pulzeModelActiveForApp.model) &&
        Objects.equals(this.namespace, pulzeModelActiveForApp.namespace) &&
        Objects.equals(this.owner, pulzeModelActiveForApp.owner) &&
        Objects.equals(this.provider, pulzeModelActiveForApp.provider) &&
        Objects.equals(this.until, pulzeModelActiveForApp.until) &&
        Objects.equals(this.url, pulzeModelActiveForApp.url)&&
        Objects.equals(this.additionalProperties, pulzeModelActiveForApp.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, active, at, contextWindow, id, model, namespace, owner, provider, until, url, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PulzeModelActiveForApp {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    at: ").append(toIndentedString(at)).append("\n");
    sb.append("    contextWindow: ").append(toIndentedString(contextWindow)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    until: ").append(toIndentedString(until)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("active");
    openapiFields.add("at");
    openapiFields.add("context_window");
    openapiFields.add("id");
    openapiFields.add("model");
    openapiFields.add("namespace");
    openapiFields.add("owner");
    openapiFields.add("provider");
    openapiFields.add("until");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("context_window");
    openapiRequiredFields.add("model");
    openapiRequiredFields.add("namespace");
    openapiRequiredFields.add("url");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PulzeModelActiveForApp
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PulzeModelActiveForApp.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PulzeModelActiveForApp is not found in the empty JSON string", PulzeModelActiveForApp.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PulzeModelActiveForApp.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("at") != null && !jsonObj.get("at").isJsonNull()) && !jsonObj.get("at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("at").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      if (!jsonObj.get("namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace").toString()));
      }
      if ((jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) && !jsonObj.get("owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner").toString()));
      }
      if ((jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) && !jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PulzeModelActiveForApp.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PulzeModelActiveForApp' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PulzeModelActiveForApp> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PulzeModelActiveForApp.class));

       return (TypeAdapter<T>) new TypeAdapter<PulzeModelActiveForApp>() {
           @Override
           public void write(JsonWriter out, PulzeModelActiveForApp value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PulzeModelActiveForApp read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PulzeModelActiveForApp instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PulzeModelActiveForApp given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PulzeModelActiveForApp
  * @throws IOException if the JSON string is invalid with respect to PulzeModelActiveForApp
  */
  public static PulzeModelActiveForApp fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PulzeModelActiveForApp.class);
  }

 /**
  * Convert an instance of PulzeModelActiveForApp to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

