/*
 * Pulze.ai API
 * At Pulze it's our mission to supercharge today's workforce with AI to maximize the world's prosperity. We are doing so by enabling companies of any size to securely leverage Large Language Models (LLM) and easily build AI features into their apps. Our enterprise platform has access to all best in class LLMs and can route user requests to the most relevant model to get the highest quality response at the best price thanks to our smart meta model. End users can leverage pre-built applications, such as our Marketing AI product, or build custom apps on top of the Pulze Platform.  We are a VC Funded, early stage startup based in San Francisco.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CompletionRequestPayload;
import com.konfigthis.client.model.ModelParts;
import com.konfigthis.client.model.PulzeEngineModelRanking;
import com.konfigthis.client.model.PulzeToggleModelResponse;
import com.konfigthis.client.model.RoleContentChatChoice;
import com.konfigthis.client.model.ToolFunction;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ModelsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ModelsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ModelsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAllModelsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/models/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllModelsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllModelsCall(_callback);

    }


    private ApiResponse<List<ModelParts>> getAllModelsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllModelsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ModelParts>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllModelsAsync(final ApiCallback<List<ModelParts>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllModelsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ModelParts>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllModelsRequestBuilder {

        private GetAllModelsRequestBuilder() {
        }

        /**
         * Build call for getAllModels
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllModelsCall(_callback);
        }


        /**
         * Execute getAllModels request
         * @return List&lt;ModelParts&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public List<ModelParts> execute() throws ApiException {
            ApiResponse<List<ModelParts>> localVarResp = getAllModelsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllModels request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ModelParts&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ModelParts>> executeWithHttpInfo() throws ApiException {
            return getAllModelsWithHttpInfo();
        }

        /**
         * Execute getAllModels request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ModelParts>> _callback) throws ApiException {
            return getAllModelsAsync(_callback);
        }
    }

    /**
     * Get All Available Models For App
     * Get a list of all the Models which this App can potentially use.
     * @return GetAllModelsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetAllModelsRequestBuilder getAllModels() throws IllegalArgumentException {
        return new GetAllModelsRequestBuilder();
    }
    private okhttp3.Call getRankOfBestCall(CompletionRequestPayload completionRequestPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = completionRequestPayload;

        // create path and map variables
        String localVarPath = "/v1/models/rank";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRankOfBestValidateBeforeCall(CompletionRequestPayload completionRequestPayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'completionRequestPayload' is set
        if (completionRequestPayload == null) {
            throw new ApiException("Missing the required parameter 'completionRequestPayload' when calling getRankOfBest(Async)");
        }

        return getRankOfBestCall(completionRequestPayload, _callback);

    }


    private ApiResponse<PulzeEngineModelRanking> getRankOfBestWithHttpInfo(CompletionRequestPayload completionRequestPayload) throws ApiException {
        okhttp3.Call localVarCall = getRankOfBestValidateBeforeCall(completionRequestPayload, null);
        Type localVarReturnType = new TypeToken<PulzeEngineModelRanking>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRankOfBestAsync(CompletionRequestPayload completionRequestPayload, final ApiCallback<PulzeEngineModelRanking> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRankOfBestValidateBeforeCall(completionRequestPayload, _callback);
        Type localVarReturnType = new TypeToken<PulzeEngineModelRanking>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRankOfBestRequestBuilder {
        private Integer bestOf;
        private Integer false;
        private Double frequencyPenalty;
        private Object logitBias;
        private Integer logprobs;
        private Integer maxTokens;
        private List<RoleContentChatChoice> messages;
        private String model;
        private Double presencePenalty;
        private Object prompt;
        private Object stop;
        private Boolean stream;
        private String suffix;
        private Double temperature;
        private Object toolChoice;
        private List<ToolFunction> tools;
        private Double topP;

        private GetRankOfBestRequestBuilder() {
        }

        /**
         * Set bestOf
         * @param bestOf The number of responses to _generate_. Out of those, it will return the best &#x60;n&#x60;. (optional, default to 1)
         * @return GetRankOfBestRequestBuilder
         */
        public GetRankOfBestRequestBuilder bestOf(Integer bestOf) {
            this.bestOf = bestOf;
            return this;
        }
        
        /**
         * Set false
         * @param false How many completions to generate for each prompt. @default 1  (optional, default to 1)
         * @return GetRankOfBestRequestBuilder
         */
        public GetRankOfBestRequestBuilder false(Integer false) {
            this.false = false;
            return this;
        }
        
        /**
         * Set frequencyPenalty
         * @param frequencyPenalty https://platform.openai.com/docs/api-reference/completions/create#completions/create-frequency_penalty Increase the model&#39;s likelihood to not repeat tokens/words  (optional, default to 0)
         * @return GetRankOfBestRequestBuilder
         */
        public GetRankOfBestRequestBuilder frequencyPenalty(Double frequencyPenalty) {
            this.frequencyPenalty = frequencyPenalty;
            return this;
        }
        
        /**
         * Set logitBias
         * @param logitBias COMING SOON https://platform.openai.com/docs/api-reference/completions/create#completions/create-logit_bias Modify the likelihood of specified tokens appearing in the completion.  See here for a detailed explanation on how to use: https://help.openai.com/en/articles/5247780-using-logit-bias-to-define-token-probability  (optional)
         * @return GetRankOfBestRequestBuilder
         */
        public GetRankOfBestRequestBuilder logitBias(Object logitBias) {
            this.logitBias = logitBias;
            return this;
        }
        
        /**
         * Set logprobs
         * @param logprobs COMING SOON https://platform.openai.com/docs/api-reference/completions/create#completions/create-logprobs Include the log probabilities on the logprobs most likely tokens, as well the chosen tokens.  (optional)
         * @return GetRankOfBestRequestBuilder
         */
        public GetRankOfBestRequestBuilder logprobs(Integer logprobs) {
            this.logprobs = logprobs;
            return this;
        }
        
        /**
         * Set maxTokens
         * @param maxTokens The maximum number of tokens that the response can contain. (optional)
         * @return GetRankOfBestRequestBuilder
         */
        public GetRankOfBestRequestBuilder maxTokens(Integer maxTokens) {
            this.maxTokens = maxTokens;
            return this;
        }
        
        /**
         * Set messages
         * @param messages The conversation sent (with or without history) (for a /chat/completions request) (optional)
         * @return GetRankOfBestRequestBuilder
         */
        public GetRankOfBestRequestBuilder messages(List<RoleContentChatChoice> messages) {
            this.messages = messages;
            return this;
        }
        
        /**
         * Set model
         * @param model https://docs.pulze.ai/overview/models Specify the model you&#39;d like Pulze to use. (optional). Can be the full model name, or a subset for multi-matching.  Defaults to our dynamic routing, i.e. best model for this request.  (optional, default to pulze)
         * @return GetRankOfBestRequestBuilder
         */
        public GetRankOfBestRequestBuilder model(String model) {
            this.model = model;
            return this;
        }
        
        /**
         * Set presencePenalty
         * @param presencePenalty https://platform.openai.com/docs/api-reference/completions/create#completions/create-presence_penalty Increase the model&#39;s likelihood to talk about new topics  (optional, default to 0)
         * @return GetRankOfBestRequestBuilder
         */
        public GetRankOfBestRequestBuilder presencePenalty(Double presencePenalty) {
            this.presencePenalty = presencePenalty;
            return this;
        }
        
        /**
         * Set prompt
         * @param prompt  (optional)
         * @return GetRankOfBestRequestBuilder
         */
        public GetRankOfBestRequestBuilder prompt(Object prompt) {
            this.prompt = prompt;
            return this;
        }
        
        /**
         * Set stop
         * @param stop  (optional)
         * @return GetRankOfBestRequestBuilder
         */
        public GetRankOfBestRequestBuilder stop(Object stop) {
            this.stop = stop;
            return this;
        }
        
        /**
         * Set stream
         * @param stream ** COMING SOON ** Specify if you want the response to be streamed or to be returned as a standard HTTP request  (optional, default to false)
         * @return GetRankOfBestRequestBuilder
         */
        public GetRankOfBestRequestBuilder stream(Boolean stream) {
            this.stream = stream;
            return this;
        }
        
        /**
         * Set suffix
         * @param suffix COMING SOON (optional, default to )
         * @return GetRankOfBestRequestBuilder
         */
        public GetRankOfBestRequestBuilder suffix(String suffix) {
            this.suffix = suffix;
            return this;
        }
        
        /**
         * Set temperature
         * @param temperature Optionally specify the temperature for this request only. Leave empty to allow Pulze to guess it for you. (optional, default to 1)
         * @return GetRankOfBestRequestBuilder
         */
        public GetRankOfBestRequestBuilder temperature(Double temperature) {
            this.temperature = temperature;
            return this;
        }
        
        /**
         * Set toolChoice
         * @param toolChoice  (optional)
         * @return GetRankOfBestRequestBuilder
         */
        public GetRankOfBestRequestBuilder toolChoice(Object toolChoice) {
            this.toolChoice = toolChoice;
            return this;
        }
        
        /**
         * Set tools
         * @param tools  (optional)
         * @return GetRankOfBestRequestBuilder
         */
        public GetRankOfBestRequestBuilder tools(List<ToolFunction> tools) {
            this.tools = tools;
            return this;
        }
        
        /**
         * Set topP
         * @param topP https://platform.openai.com/docs/api-reference/completions/create#completions/create-top_p An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass  (optional, default to 1)
         * @return GetRankOfBestRequestBuilder
         */
        public GetRankOfBestRequestBuilder topP(Double topP) {
            this.topP = topP;
            return this;
        }
        
        /**
         * Build call for getRankOfBest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CompletionRequestPayload completionRequestPayload = buildBodyParams();
            return getRankOfBestCall(completionRequestPayload, _callback);
        }

        private CompletionRequestPayload buildBodyParams() {
            CompletionRequestPayload completionRequestPayload = new CompletionRequestPayload();
            completionRequestPayload.bestOf(this.bestOf);
            completionRequestPayload.false(this.false);
            completionRequestPayload.frequencyPenalty(this.frequencyPenalty);
            completionRequestPayload.logitBias(this.logitBias);
            completionRequestPayload.logprobs(this.logprobs);
            completionRequestPayload.maxTokens(this.maxTokens);
            completionRequestPayload.messages(this.messages);
            completionRequestPayload.model(this.model);
            completionRequestPayload.presencePenalty(this.presencePenalty);
            completionRequestPayload.prompt(this.prompt);
            completionRequestPayload.stop(this.stop);
            completionRequestPayload.stream(this.stream);
            completionRequestPayload.suffix(this.suffix);
            completionRequestPayload.temperature(this.temperature);
            completionRequestPayload.toolChoice(this.toolChoice);
            completionRequestPayload.tools(this.tools);
            completionRequestPayload.topP(this.topP);
            return completionRequestPayload;
        }

        /**
         * Execute getRankOfBest request
         * @return PulzeEngineModelRanking
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public PulzeEngineModelRanking execute() throws ApiException {
            CompletionRequestPayload completionRequestPayload = buildBodyParams();
            ApiResponse<PulzeEngineModelRanking> localVarResp = getRankOfBestWithHttpInfo(completionRequestPayload);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRankOfBest request with HTTP info returned
         * @return ApiResponse&lt;PulzeEngineModelRanking&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PulzeEngineModelRanking> executeWithHttpInfo() throws ApiException {
            CompletionRequestPayload completionRequestPayload = buildBodyParams();
            return getRankOfBestWithHttpInfo(completionRequestPayload);
        }

        /**
         * Execute getRankOfBest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PulzeEngineModelRanking> _callback) throws ApiException {
            CompletionRequestPayload completionRequestPayload = buildBodyParams();
            return getRankOfBestAsync(completionRequestPayload, _callback);
        }
    }

    /**
     * Get Rank Of Best Models For Payload
     * 
     * @param completionRequestPayload  (required)
     * @return GetRankOfBestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetRankOfBestRequestBuilder getRankOfBest() throws IllegalArgumentException {
        return new GetRankOfBestRequestBuilder();
    }
    private okhttp3.Call listActiveModelsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/models/active";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listActiveModelsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listActiveModelsCall(_callback);

    }


    private ApiResponse<List<ModelParts>> listActiveModelsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listActiveModelsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ModelParts>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listActiveModelsAsync(final ApiCallback<List<ModelParts>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listActiveModelsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ModelParts>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListActiveModelsRequestBuilder {

        private ListActiveModelsRequestBuilder() {
        }

        /**
         * Build call for listActiveModels
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listActiveModelsCall(_callback);
        }


        /**
         * Execute listActiveModels request
         * @return List&lt;ModelParts&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public List<ModelParts> execute() throws ApiException {
            ApiResponse<List<ModelParts>> localVarResp = listActiveModelsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listActiveModels request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ModelParts&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ModelParts>> executeWithHttpInfo() throws ApiException {
            return listActiveModelsWithHttpInfo();
        }

        /**
         * Execute listActiveModels request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ModelParts>> _callback) throws ApiException {
            return listActiveModelsAsync(_callback);
        }
    }

    /**
     * Get Active Models For App
     * Get a list of the Models which are active for a specific App.
     * @return ListActiveModelsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ListActiveModelsRequestBuilder listActiveModels() throws IllegalArgumentException {
        return new ListActiveModelsRequestBuilder();
    }
    private okhttp3.Call toggleModelForAppCall(UUID modelId, Boolean enable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/models/{model_id}/toggle"
            .replace("{" + "model_id" + "}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (enable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enable", enable));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toggleModelForAppValidateBeforeCall(UUID modelId, Boolean enable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling toggleModelForApp(Async)");
        }

        return toggleModelForAppCall(modelId, enable, _callback);

    }


    private ApiResponse<PulzeToggleModelResponse> toggleModelForAppWithHttpInfo(UUID modelId, Boolean enable) throws ApiException {
        okhttp3.Call localVarCall = toggleModelForAppValidateBeforeCall(modelId, enable, null);
        Type localVarReturnType = new TypeToken<PulzeToggleModelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call toggleModelForAppAsync(UUID modelId, Boolean enable, final ApiCallback<PulzeToggleModelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = toggleModelForAppValidateBeforeCall(modelId, enable, _callback);
        Type localVarReturnType = new TypeToken<PulzeToggleModelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ToggleModelForAppRequestBuilder {
        private final UUID modelId;
        private Boolean enable;

        private ToggleModelForAppRequestBuilder(UUID modelId) {
            this.modelId = modelId;
        }

        /**
         * Set enable
         * @param enable  (optional, default to true)
         * @return ToggleModelForAppRequestBuilder
         */
        public ToggleModelForAppRequestBuilder enable(Boolean enable) {
            this.enable = enable;
            return this;
        }
        
        /**
         * Build call for toggleModelForApp
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return toggleModelForAppCall(modelId, enable, _callback);
        }


        /**
         * Execute toggleModelForApp request
         * @return PulzeToggleModelResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public PulzeToggleModelResponse execute() throws ApiException {
            ApiResponse<PulzeToggleModelResponse> localVarResp = toggleModelForAppWithHttpInfo(modelId, enable);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute toggleModelForApp request with HTTP info returned
         * @return ApiResponse&lt;PulzeToggleModelResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PulzeToggleModelResponse> executeWithHttpInfo() throws ApiException {
            return toggleModelForAppWithHttpInfo(modelId, enable);
        }

        /**
         * Execute toggleModelForApp request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PulzeToggleModelResponse> _callback) throws ApiException {
            return toggleModelForAppAsync(modelId, enable, _callback);
        }
    }

    /**
     * Toggle Model For App
     * Enable or disable a model.
     * @param modelId  (required)
     * @return ToggleModelForAppRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ToggleModelForAppRequestBuilder toggleModelForApp(UUID modelId) throws IllegalArgumentException {
        if (modelId == null) throw new IllegalArgumentException("\"modelId\" is required but got null");
            

        return new ToggleModelForAppRequestBuilder(modelId);
    }
}
