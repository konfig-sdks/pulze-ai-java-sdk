/*
 * Pulze.ai API
 * At Pulze it's our mission to supercharge today's workforce with AI to maximize the world's prosperity. We are doing so by enabling companies of any size to securely leverage Large Language Models (LLM) and easily build AI features into their apps. Our enterprise platform has access to all best in class LLMs and can route user requests to the most relevant model to get the highest quality response at the best price thanks to our smart meta model. End users can leverage pre-built applications, such as our Marketing AI product, or build custom apps on top of the Pulze Platform.  We are a VC Funded, early stage startup based in San Francisco.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AppUpdate;
import com.konfigthis.client.model.AppWithModelUpdatesInfo;
import com.konfigthis.client.model.LLMModelPolicies;
import com.konfigthis.client.model.LLMModelWeights;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AppsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AppsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AppsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAppForApiKeyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/apps/self";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAppForApiKeyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAppForApiKeyCall(_callback);

    }


    private ApiResponse<AppWithModelUpdatesInfo> getAppForApiKeyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAppForApiKeyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AppWithModelUpdatesInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAppForApiKeyAsync(final ApiCallback<AppWithModelUpdatesInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAppForApiKeyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AppWithModelUpdatesInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAppForApiKeyRequestBuilder {

        private GetAppForApiKeyRequestBuilder() {
        }

        /**
         * Build call for getAppForApiKey
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAppForApiKeyCall(_callback);
        }


        /**
         * Execute getAppForApiKey request
         * @return AppWithModelUpdatesInfo
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public AppWithModelUpdatesInfo execute() throws ApiException {
            ApiResponse<AppWithModelUpdatesInfo> localVarResp = getAppForApiKeyWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAppForApiKey request with HTTP info returned
         * @return ApiResponse&lt;AppWithModelUpdatesInfo&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AppWithModelUpdatesInfo> executeWithHttpInfo() throws ApiException {
            return getAppForApiKeyWithHttpInfo();
        }

        /**
         * Execute getAppForApiKey request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppWithModelUpdatesInfo> _callback) throws ApiException {
            return getAppForApiKeyAsync(_callback);
        }
    }

    /**
     * Get App For Api Key
     * Retrieves the App for the given API key.
     * @return GetAppForApiKeyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetAppForApiKeyRequestBuilder getAppForApiKey() throws IllegalArgumentException {
        return new GetAppForApiKeyRequestBuilder();
    }
    private okhttp3.Call updatePropertiesCall(AppUpdate appUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appUpdate;

        // create path and map variables
        String localVarPath = "/v1/apps/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePropertiesValidateBeforeCall(AppUpdate appUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appUpdate' is set
        if (appUpdate == null) {
            throw new ApiException("Missing the required parameter 'appUpdate' when calling updateProperties(Async)");
        }

        return updatePropertiesCall(appUpdate, _callback);

    }


    private ApiResponse<AppWithModelUpdatesInfo> updatePropertiesWithHttpInfo(AppUpdate appUpdate) throws ApiException {
        okhttp3.Call localVarCall = updatePropertiesValidateBeforeCall(appUpdate, null);
        Type localVarReturnType = new TypeToken<AppWithModelUpdatesInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePropertiesAsync(AppUpdate appUpdate, final ApiCallback<AppWithModelUpdatesInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePropertiesValidateBeforeCall(appUpdate, _callback);
        Type localVarReturnType = new TypeToken<AppWithModelUpdatesInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePropertiesRequestBuilder {
        private final String description;
        private final UUID id;
        private final LLMModelPolicies policies;
        private final LLMModelWeights weights;
        private UUID promptId;

        private UpdatePropertiesRequestBuilder(String description, UUID id, LLMModelPolicies policies, LLMModelWeights weights) {
            this.description = description;
            this.id = id;
            this.policies = policies;
            this.weights = weights;
        }

        /**
         * Set promptId
         * @param promptId Prompt ID that we will use for requests (optional)
         * @return UpdatePropertiesRequestBuilder
         */
        public UpdatePropertiesRequestBuilder promptId(UUID promptId) {
            this.promptId = promptId;
            return this;
        }
        
        /**
         * Build call for updateProperties
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AppUpdate appUpdate = buildBodyParams();
            return updatePropertiesCall(appUpdate, _callback);
        }

        private AppUpdate buildBodyParams() {
            AppUpdate appUpdate = new AppUpdate();
            appUpdate.description(this.description);
            appUpdate.id(this.id);
            appUpdate.policies(this.policies);
            appUpdate.promptId(this.promptId);
            appUpdate.weights(this.weights);
            return appUpdate;
        }

        /**
         * Execute updateProperties request
         * @return AppWithModelUpdatesInfo
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public AppWithModelUpdatesInfo execute() throws ApiException {
            AppUpdate appUpdate = buildBodyParams();
            ApiResponse<AppWithModelUpdatesInfo> localVarResp = updatePropertiesWithHttpInfo(appUpdate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateProperties request with HTTP info returned
         * @return ApiResponse&lt;AppWithModelUpdatesInfo&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AppWithModelUpdatesInfo> executeWithHttpInfo() throws ApiException {
            AppUpdate appUpdate = buildBodyParams();
            return updatePropertiesWithHttpInfo(appUpdate);
        }

        /**
         * Execute updateProperties request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppWithModelUpdatesInfo> _callback) throws ApiException {
            AppUpdate appUpdate = buildBodyParams();
            return updatePropertiesAsync(appUpdate, _callback);
        }
    }

    /**
     * Update App And Models
     * Update an App&#39;s properties: description, weights and policies.
     * @param appUpdate  (required)
     * @return UpdatePropertiesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePropertiesRequestBuilder updateProperties(String description, UUID id, LLMModelPolicies policies, LLMModelWeights weights) throws IllegalArgumentException {
        if (description == null) throw new IllegalArgumentException("\"description\" is required but got null");
            if (description != null && description.length() < 1) {
              throw new IllegalArgumentException("Invalid value for description. Length must be greater than or equal to 1.");
            }

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (policies == null) throw new IllegalArgumentException("\"policies\" is required but got null");
        if (weights == null) throw new IllegalArgumentException("\"weights\" is required but got null");
        return new UpdatePropertiesRequestBuilder(description, id, policies, weights);
    }
}
