/*
 * Pulze.ai API
 * At Pulze it's our mission to supercharge today's workforce with AI to maximize the world's prosperity. We are doing so by enabling companies of any size to securely leverage Large Language Models (LLM) and easily build AI features into their apps. Our enterprise platform has access to all best in class LLMs and can route user requests to the most relevant model to get the highest quality response at the best price thanks to our smart meta model. End users can leverage pre-built applications, such as our Marketing AI product, or build custom apps on top of the Pulze Platform.  We are a VC Funded, early stage startup based in San Francisco.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CompletionRequestPayload;
import com.konfigthis.client.model.PulzeEngineResponseCompletion;
import com.konfigthis.client.model.RoleContentChatChoice;
import com.konfigthis.client.model.ToolFunction;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CompletionsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CompletionsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CompletionsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call performTextRequestCall(CompletionRequestPayload completionRequestPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = completionRequestPayload;

        // create path and map variables
        String localVarPath = "/v1/completions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call performTextRequestValidateBeforeCall(CompletionRequestPayload completionRequestPayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'completionRequestPayload' is set
        if (completionRequestPayload == null) {
            throw new ApiException("Missing the required parameter 'completionRequestPayload' when calling performTextRequest(Async)");
        }

        return performTextRequestCall(completionRequestPayload, _callback);

    }


    private ApiResponse<PulzeEngineResponseCompletion> performTextRequestWithHttpInfo(CompletionRequestPayload completionRequestPayload) throws ApiException {
        okhttp3.Call localVarCall = performTextRequestValidateBeforeCall(completionRequestPayload, null);
        Type localVarReturnType = new TypeToken<PulzeEngineResponseCompletion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call performTextRequestAsync(CompletionRequestPayload completionRequestPayload, final ApiCallback<PulzeEngineResponseCompletion> _callback) throws ApiException {

        okhttp3.Call localVarCall = performTextRequestValidateBeforeCall(completionRequestPayload, _callback);
        Type localVarReturnType = new TypeToken<PulzeEngineResponseCompletion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PerformTextRequestRequestBuilder {
        private Integer bestOf;
        private Integer false;
        private Double frequencyPenalty;
        private Object logitBias;
        private Integer logprobs;
        private Integer maxTokens;
        private List<RoleContentChatChoice> messages;
        private String model;
        private Double presencePenalty;
        private Object prompt;
        private Object stop;
        private Boolean stream;
        private String suffix;
        private Double temperature;
        private Object toolChoice;
        private List<ToolFunction> tools;
        private Double topP;

        private PerformTextRequestRequestBuilder() {
        }

        /**
         * Set bestOf
         * @param bestOf The number of responses to _generate_. Out of those, it will return the best &#x60;n&#x60;. (optional, default to 1)
         * @return PerformTextRequestRequestBuilder
         */
        public PerformTextRequestRequestBuilder bestOf(Integer bestOf) {
            this.bestOf = bestOf;
            return this;
        }
        
        /**
         * Set false
         * @param false How many completions to generate for each prompt. @default 1  (optional, default to 1)
         * @return PerformTextRequestRequestBuilder
         */
        public PerformTextRequestRequestBuilder false(Integer false) {
            this.false = false;
            return this;
        }
        
        /**
         * Set frequencyPenalty
         * @param frequencyPenalty https://platform.openai.com/docs/api-reference/completions/create#completions/create-frequency_penalty Increase the model&#39;s likelihood to not repeat tokens/words  (optional, default to 0)
         * @return PerformTextRequestRequestBuilder
         */
        public PerformTextRequestRequestBuilder frequencyPenalty(Double frequencyPenalty) {
            this.frequencyPenalty = frequencyPenalty;
            return this;
        }
        
        /**
         * Set logitBias
         * @param logitBias COMING SOON https://platform.openai.com/docs/api-reference/completions/create#completions/create-logit_bias Modify the likelihood of specified tokens appearing in the completion.  See here for a detailed explanation on how to use: https://help.openai.com/en/articles/5247780-using-logit-bias-to-define-token-probability  (optional)
         * @return PerformTextRequestRequestBuilder
         */
        public PerformTextRequestRequestBuilder logitBias(Object logitBias) {
            this.logitBias = logitBias;
            return this;
        }
        
        /**
         * Set logprobs
         * @param logprobs COMING SOON https://platform.openai.com/docs/api-reference/completions/create#completions/create-logprobs Include the log probabilities on the logprobs most likely tokens, as well the chosen tokens.  (optional)
         * @return PerformTextRequestRequestBuilder
         */
        public PerformTextRequestRequestBuilder logprobs(Integer logprobs) {
            this.logprobs = logprobs;
            return this;
        }
        
        /**
         * Set maxTokens
         * @param maxTokens The maximum number of tokens that the response can contain. (optional)
         * @return PerformTextRequestRequestBuilder
         */
        public PerformTextRequestRequestBuilder maxTokens(Integer maxTokens) {
            this.maxTokens = maxTokens;
            return this;
        }
        
        /**
         * Set messages
         * @param messages The conversation sent (with or without history) (for a /chat/completions request) (optional)
         * @return PerformTextRequestRequestBuilder
         */
        public PerformTextRequestRequestBuilder messages(List<RoleContentChatChoice> messages) {
            this.messages = messages;
            return this;
        }
        
        /**
         * Set model
         * @param model https://docs.pulze.ai/overview/models Specify the model you&#39;d like Pulze to use. (optional). Can be the full model name, or a subset for multi-matching.  Defaults to our dynamic routing, i.e. best model for this request.  (optional, default to pulze)
         * @return PerformTextRequestRequestBuilder
         */
        public PerformTextRequestRequestBuilder model(String model) {
            this.model = model;
            return this;
        }
        
        /**
         * Set presencePenalty
         * @param presencePenalty https://platform.openai.com/docs/api-reference/completions/create#completions/create-presence_penalty Increase the model&#39;s likelihood to talk about new topics  (optional, default to 0)
         * @return PerformTextRequestRequestBuilder
         */
        public PerformTextRequestRequestBuilder presencePenalty(Double presencePenalty) {
            this.presencePenalty = presencePenalty;
            return this;
        }
        
        /**
         * Set prompt
         * @param prompt  (optional)
         * @return PerformTextRequestRequestBuilder
         */
        public PerformTextRequestRequestBuilder prompt(Object prompt) {
            this.prompt = prompt;
            return this;
        }
        
        /**
         * Set stop
         * @param stop  (optional)
         * @return PerformTextRequestRequestBuilder
         */
        public PerformTextRequestRequestBuilder stop(Object stop) {
            this.stop = stop;
            return this;
        }
        
        /**
         * Set stream
         * @param stream ** COMING SOON ** Specify if you want the response to be streamed or to be returned as a standard HTTP request  (optional, default to false)
         * @return PerformTextRequestRequestBuilder
         */
        public PerformTextRequestRequestBuilder stream(Boolean stream) {
            this.stream = stream;
            return this;
        }
        
        /**
         * Set suffix
         * @param suffix COMING SOON (optional, default to )
         * @return PerformTextRequestRequestBuilder
         */
        public PerformTextRequestRequestBuilder suffix(String suffix) {
            this.suffix = suffix;
            return this;
        }
        
        /**
         * Set temperature
         * @param temperature Optionally specify the temperature for this request only. Leave empty to allow Pulze to guess it for you. (optional, default to 1)
         * @return PerformTextRequestRequestBuilder
         */
        public PerformTextRequestRequestBuilder temperature(Double temperature) {
            this.temperature = temperature;
            return this;
        }
        
        /**
         * Set toolChoice
         * @param toolChoice  (optional)
         * @return PerformTextRequestRequestBuilder
         */
        public PerformTextRequestRequestBuilder toolChoice(Object toolChoice) {
            this.toolChoice = toolChoice;
            return this;
        }
        
        /**
         * Set tools
         * @param tools  (optional)
         * @return PerformTextRequestRequestBuilder
         */
        public PerformTextRequestRequestBuilder tools(List<ToolFunction> tools) {
            this.tools = tools;
            return this;
        }
        
        /**
         * Set topP
         * @param topP https://platform.openai.com/docs/api-reference/completions/create#completions/create-top_p An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass  (optional, default to 1)
         * @return PerformTextRequestRequestBuilder
         */
        public PerformTextRequestRequestBuilder topP(Double topP) {
            this.topP = topP;
            return this;
        }
        
        /**
         * Build call for performTextRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CompletionRequestPayload completionRequestPayload = buildBodyParams();
            return performTextRequestCall(completionRequestPayload, _callback);
        }

        private CompletionRequestPayload buildBodyParams() {
            CompletionRequestPayload completionRequestPayload = new CompletionRequestPayload();
            completionRequestPayload.bestOf(this.bestOf);
            completionRequestPayload.false(this.false);
            completionRequestPayload.frequencyPenalty(this.frequencyPenalty);
            completionRequestPayload.logitBias(this.logitBias);
            completionRequestPayload.logprobs(this.logprobs);
            completionRequestPayload.maxTokens(this.maxTokens);
            completionRequestPayload.messages(this.messages);
            completionRequestPayload.model(this.model);
            completionRequestPayload.presencePenalty(this.presencePenalty);
            completionRequestPayload.prompt(this.prompt);
            completionRequestPayload.stop(this.stop);
            completionRequestPayload.stream(this.stream);
            completionRequestPayload.suffix(this.suffix);
            completionRequestPayload.temperature(this.temperature);
            completionRequestPayload.toolChoice(this.toolChoice);
            completionRequestPayload.tools(this.tools);
            completionRequestPayload.topP(this.topP);
            return completionRequestPayload;
        }

        /**
         * Execute performTextRequest request
         * @return PulzeEngineResponseCompletion
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public PulzeEngineResponseCompletion execute() throws ApiException {
            CompletionRequestPayload completionRequestPayload = buildBodyParams();
            ApiResponse<PulzeEngineResponseCompletion> localVarResp = performTextRequestWithHttpInfo(completionRequestPayload);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute performTextRequest request with HTTP info returned
         * @return ApiResponse&lt;PulzeEngineResponseCompletion&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PulzeEngineResponseCompletion> executeWithHttpInfo() throws ApiException {
            CompletionRequestPayload completionRequestPayload = buildBodyParams();
            return performTextRequestWithHttpInfo(completionRequestPayload);
        }

        /**
         * Execute performTextRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PulzeEngineResponseCompletion> _callback) throws ApiException {
            CompletionRequestPayload completionRequestPayload = buildBodyParams();
            return performTextRequestAsync(completionRequestPayload, _callback);
        }
    }

    /**
     * Completions
     * Perform a text Completion request.
     * @param completionRequestPayload  (required)
     * @return PerformTextRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public PerformTextRequestRequestBuilder performTextRequest() throws IllegalArgumentException {
        return new PerformTextRequestRequestBuilder();
    }
}
