/*
 * Pulze.ai API
 * At Pulze it's our mission to supercharge today's workforce with AI to maximize the world's prosperity. We are doing so by enabling companies of any size to securely leverage Large Language Models (LLM) and easily build AI features into their apps. Our enterprise platform has access to all best in class LLMs and can route user requests to the most relevant model to get the highest quality response at the best price thanks to our smart meta model. End users can leverage pre-built applications, such as our Marketing AI product, or build custom apps on top of the Pulze Platform.  We are a VC Funded, early stage startup based in San Francisco.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.FilterLogsRequest;
import com.konfigthis.client.model.GetTableSortParams;
import com.konfigthis.client.model.LogResponseRatingRequest;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.RequestNormalized;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LogsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LogsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LogsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getByIdCall(UUID logId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/logs/{log_id}"
            .replace("{" + "log_id" + "}", localVarApiClient.escapeString(logId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(UUID logId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'logId' is set
        if (logId == null) {
            throw new ApiException("Missing the required parameter 'logId' when calling getById(Async)");
        }

        return getByIdCall(logId, _callback);

    }


    private ApiResponse<RequestNormalized> getByIdWithHttpInfo(UUID logId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(logId, null);
        Type localVarReturnType = new TypeToken<RequestNormalized>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(UUID logId, final ApiCallback<RequestNormalized> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(logId, _callback);
        Type localVarReturnType = new TypeToken<RequestNormalized>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final UUID logId;

        private GetByIdRequestBuilder(UUID logId) {
            this.logId = logId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(logId, _callback);
        }


        /**
         * Execute getById request
         * @return RequestNormalized
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public RequestNormalized execute() throws ApiException {
            ApiResponse<RequestNormalized> localVarResp = getByIdWithHttpInfo(logId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;RequestNormalized&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RequestNormalized> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(logId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RequestNormalized> _callback) throws ApiException {
            return getByIdAsync(logId, _callback);
        }
    }

    /**
     * Get Log By Id
     * Get a specific log by id. If accessing via API Key, this endpoint will only return a log if it belongs to that App. If the log&#39;s App is disabled, this endpoint won&#39;t return it.
     * @param logId  (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(UUID logId) throws IllegalArgumentException {
        if (logId == null) throw new IllegalArgumentException("\"logId\" is required but got null");
            

        return new GetByIdRequestBuilder(logId);
    }
    private okhttp3.Call getMatchingLogsCall(FilterLogsRequest filterLogsRequest, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = filterLogsRequest;

        // create path and map variables
        String localVarPath = "/v1/logs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMatchingLogsValidateBeforeCall(FilterLogsRequest filterLogsRequest, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'filterLogsRequest' is set
        if (filterLogsRequest == null) {
            throw new ApiException("Missing the required parameter 'filterLogsRequest' when calling getMatchingLogs(Async)");
        }

        return getMatchingLogsCall(filterLogsRequest, page, size, _callback);

    }


    private ApiResponse<Object> getMatchingLogsWithHttpInfo(FilterLogsRequest filterLogsRequest, Integer page, Integer size) throws ApiException {
        okhttp3.Call localVarCall = getMatchingLogsValidateBeforeCall(filterLogsRequest, page, size, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMatchingLogsAsync(FilterLogsRequest filterLogsRequest, Integer page, Integer size, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMatchingLogsValidateBeforeCall(filterLogsRequest, page, size, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMatchingLogsRequestBuilder {
        private final OffsetDateTime dateFrom;
        private List<UUID> appIds;
        private OffsetDateTime dateTo;
        private Map<String, String> labels;
        private List<GetTableSortParams> params;
        private String query;
        private Integer page;
        private Integer size;

        private GetMatchingLogsRequestBuilder(OffsetDateTime dateFrom) {
            this.dateFrom = dateFrom;
        }

        /**
         * Set appIds
         * @param appIds The list of API Keys we want to filter for. Leave the list empty to disable filtering (and return data for all apps) instead. (optional)
         * @return GetMatchingLogsRequestBuilder
         */
        public GetMatchingLogsRequestBuilder appIds(List<UUID> appIds) {
            this.appIds = appIds;
            return this;
        }
        
        /**
         * Set dateTo
         * @param dateTo The latest date we are searching for. (optional)
         * @return GetMatchingLogsRequestBuilder
         */
        public GetMatchingLogsRequestBuilder dateTo(OffsetDateTime dateTo) {
            this.dateTo = dateTo;
            return this;
        }
        
        /**
         * Set labels
         * @param labels Only logs (requests) with all of the specified labels will be returned. Values get compared between their lowercase forms. (optional)
         * @return GetMatchingLogsRequestBuilder
         */
        public GetMatchingLogsRequestBuilder labels(Map<String, String> labels) {
            this.labels = labels;
            return this;
        }
        
        /**
         * Set params
         * @param params The sorting parameters for the query (optional)
         * @return GetMatchingLogsRequestBuilder
         */
        public GetMatchingLogsRequestBuilder params(List<GetTableSortParams> params) {
            this.params = params;
            return this;
        }
        
        /**
         * Set query
         * @param query Search for logs containing the &#x60;query&#x60; in their Request or Response. (optional, default to )
         * @return GetMatchingLogsRequestBuilder
         */
        public GetMatchingLogsRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional, default to 1)
         * @return GetMatchingLogsRequestBuilder
         */
        public GetMatchingLogsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set size
         * @param size  (optional, default to 50)
         * @return GetMatchingLogsRequestBuilder
         */
        public GetMatchingLogsRequestBuilder size(Integer size) {
            this.size = size;
            return this;
        }
        
        /**
         * Build call for getMatchingLogs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FilterLogsRequest filterLogsRequest = buildBodyParams();
            return getMatchingLogsCall(filterLogsRequest, page, size, _callback);
        }

        private FilterLogsRequest buildBodyParams() {
            FilterLogsRequest filterLogsRequest = new FilterLogsRequest();
            filterLogsRequest.appIds(this.appIds);
            filterLogsRequest.dateFrom(this.dateFrom);
            filterLogsRequest.dateTo(this.dateTo);
            filterLogsRequest.labels(this.labels);
            filterLogsRequest.params(this.params);
            filterLogsRequest.query(this.query);
            return filterLogsRequest;
        }

        /**
         * Execute getMatchingLogs request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            FilterLogsRequest filterLogsRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = getMatchingLogsWithHttpInfo(filterLogsRequest, page, size);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMatchingLogs request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            FilterLogsRequest filterLogsRequest = buildBodyParams();
            return getMatchingLogsWithHttpInfo(filterLogsRequest, page, size);
        }

        /**
         * Execute getMatchingLogs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            FilterLogsRequest filterLogsRequest = buildBodyParams();
            return getMatchingLogsAsync(filterLogsRequest, page, size, _callback);
        }
    }

    /**
     * Get Logs For App
     * Get the list of logs that match the specified filters. When accessing via an App&#39;s API Key, only logs for that app will be returned.
     * @param filterLogsRequest  (required)
     * @return GetMatchingLogsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetMatchingLogsRequestBuilder getMatchingLogs(OffsetDateTime dateFrom) throws IllegalArgumentException {
        if (dateFrom == null) throw new IllegalArgumentException("\"dateFrom\" is required but got null");
        return new GetMatchingLogsRequestBuilder(dateFrom);
    }
    private okhttp3.Call rateByIdCall(UUID logId, LogResponseRatingRequest logResponseRatingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = logResponseRatingRequest;

        // create path and map variables
        String localVarPath = "/v1/logs/{log_id}/rating"
            .replace("{" + "log_id" + "}", localVarApiClient.escapeString(logId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rateByIdValidateBeforeCall(UUID logId, LogResponseRatingRequest logResponseRatingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'logId' is set
        if (logId == null) {
            throw new ApiException("Missing the required parameter 'logId' when calling rateById(Async)");
        }

        // verify the required parameter 'logResponseRatingRequest' is set
        if (logResponseRatingRequest == null) {
            throw new ApiException("Missing the required parameter 'logResponseRatingRequest' when calling rateById(Async)");
        }

        return rateByIdCall(logId, logResponseRatingRequest, _callback);

    }


    private ApiResponse<RequestNormalized> rateByIdWithHttpInfo(UUID logId, LogResponseRatingRequest logResponseRatingRequest) throws ApiException {
        okhttp3.Call localVarCall = rateByIdValidateBeforeCall(logId, logResponseRatingRequest, null);
        Type localVarReturnType = new TypeToken<RequestNormalized>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call rateByIdAsync(UUID logId, LogResponseRatingRequest logResponseRatingRequest, final ApiCallback<RequestNormalized> _callback) throws ApiException {

        okhttp3.Call localVarCall = rateByIdValidateBeforeCall(logId, logResponseRatingRequest, _callback);
        Type localVarReturnType = new TypeToken<RequestNormalized>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RateByIdRequestBuilder {
        private final UUID logId;
        private String feedback;
        private Boolean goodAnswer;

        private RateByIdRequestBuilder(UUID logId) {
            this.logId = logId;
        }

        /**
         * Set feedback
         * @param feedback An optional text with accompanies the feedback&#39;s rating (optional, default to )
         * @return RateByIdRequestBuilder
         */
        public RateByIdRequestBuilder feedback(String feedback) {
            this.feedback = feedback;
            return this;
        }
        
        /**
         * Set goodAnswer
         * @param goodAnswer The rating given to this request. It can be good (&#x60;True&#x60;), bad (&#x60;False&#x60;) or none (&#x60;None&#x60; &#x3D;&#x3D; &#x60;null&#x60;) (optional)
         * @return RateByIdRequestBuilder
         */
        public RateByIdRequestBuilder goodAnswer(Boolean goodAnswer) {
            this.goodAnswer = goodAnswer;
            return this;
        }
        
        /**
         * Build call for rateById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LogResponseRatingRequest logResponseRatingRequest = buildBodyParams();
            return rateByIdCall(logId, logResponseRatingRequest, _callback);
        }

        private LogResponseRatingRequest buildBodyParams() {
            LogResponseRatingRequest logResponseRatingRequest = new LogResponseRatingRequest();
            logResponseRatingRequest.feedback(this.feedback);
            logResponseRatingRequest.goodAnswer(this.goodAnswer);
            return logResponseRatingRequest;
        }

        /**
         * Execute rateById request
         * @return RequestNormalized
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public RequestNormalized execute() throws ApiException {
            LogResponseRatingRequest logResponseRatingRequest = buildBodyParams();
            ApiResponse<RequestNormalized> localVarResp = rateByIdWithHttpInfo(logId, logResponseRatingRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute rateById request with HTTP info returned
         * @return ApiResponse&lt;RequestNormalized&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RequestNormalized> executeWithHttpInfo() throws ApiException {
            LogResponseRatingRequest logResponseRatingRequest = buildBodyParams();
            return rateByIdWithHttpInfo(logId, logResponseRatingRequest);
        }

        /**
         * Execute rateById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RequestNormalized> _callback) throws ApiException {
            LogResponseRatingRequest logResponseRatingRequest = buildBodyParams();
            return rateByIdAsync(logId, logResponseRatingRequest, _callback);
        }
    }

    /**
     * Rate Log By Id
     * Rate a specific request by its ID. When accessing it via an App&#39;s API Key, this endpoint will only allow rating a log of that specific app.
     * @param logId  (required)
     * @param logResponseRatingRequest  (required)
     * @return RateByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public RateByIdRequestBuilder rateById(UUID logId) throws IllegalArgumentException {
        if (logId == null) throw new IllegalArgumentException("\"logId\" is required but got null");
            

        return new RateByIdRequestBuilder(logId);
    }
}
