/*
 * Pulze.ai API
 * At Pulze it's our mission to supercharge today's workforce with AI to maximize the world's prosperity. We are doing so by enabling companies of any size to securely leverage Large Language Models (LLM) and easily build AI features into their apps. Our enterprise platform has access to all best in class LLMs and can route user requests to the most relevant model to get the highest quality response at the best price thanks to our smart meta model. End users can leverage pre-built applications, such as our Marketing AI product, or build custom apps on top of the Pulze Platform.  We are a VC Funded, early stage startup based in San Francisco.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.RoleContentChatChoice;
import com.konfigthis.client.model.ToolFunction;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;


/**
 * Model tests for CompletionRequestPayload
 */
public class CompletionRequestPayloadTest {
    private final CompletionRequestPayload model = new CompletionRequestPayload();

    /**
     * Model tests for CompletionRequestPayload
     */
    @Test
    public void testCompletionRequestPayload() {
        // TODO: test CompletionRequestPayload
    }

    /**
     * Test the property 'bestOf'
     */
    @Test
    public void bestOfTest() {
        // TODO: test bestOf
    }

    /**
     * Test the property 'false'
     */
    @Test
    public void falseTest() {
        // TODO: test false
    }

    /**
     * Test the property 'frequencyPenalty'
     */
    @Test
    public void frequencyPenaltyTest() {
        // TODO: test frequencyPenalty
    }

    /**
     * Test the property 'logitBias'
     */
    @Test
    public void logitBiasTest() {
        // TODO: test logitBias
    }

    /**
     * Test the property 'logprobs'
     */
    @Test
    public void logprobsTest() {
        // TODO: test logprobs
    }

    /**
     * Test the property 'maxTokens'
     */
    @Test
    public void maxTokensTest() {
        // TODO: test maxTokens
    }

    /**
     * Test the property 'messages'
     */
    @Test
    public void messagesTest() {
        // TODO: test messages
    }

    /**
     * Test the property 'model'
     */
    @Test
    public void modelTest() {
        // TODO: test model
    }

    /**
     * Test the property 'presencePenalty'
     */
    @Test
    public void presencePenaltyTest() {
        // TODO: test presencePenalty
    }

    /**
     * Test the property 'prompt'
     */
    @Test
    public void promptTest() {
        // TODO: test prompt
    }

    /**
     * Test the property 'stop'
     */
    @Test
    public void stopTest() {
        // TODO: test stop
    }

    /**
     * Test the property 'stream'
     */
    @Test
    public void streamTest() {
        // TODO: test stream
    }

    /**
     * Test the property 'suffix'
     */
    @Test
    public void suffixTest() {
        // TODO: test suffix
    }

    /**
     * Test the property 'temperature'
     */
    @Test
    public void temperatureTest() {
        // TODO: test temperature
    }

    /**
     * Test the property 'toolChoice'
     */
    @Test
    public void toolChoiceTest() {
        // TODO: test toolChoice
    }

    /**
     * Test the property 'tools'
     */
    @Test
    public void toolsTest() {
        // TODO: test tools
    }

    /**
     * Test the property 'topP'
     */
    @Test
    public void topPTest() {
        // TODO: test topP
    }

}
