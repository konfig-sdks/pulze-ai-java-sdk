/*
 * Pulze.ai API
 * At Pulze it's our mission to supercharge today's workforce with AI to maximize the world's prosperity. We are doing so by enabling companies of any size to securely leverage Large Language Models (LLM) and easily build AI features into their apps. Our enterprise platform has access to all best in class LLMs and can route user requests to the most relevant model to get the highest quality response at the best price thanks to our smart meta model. End users can leverage pre-built applications, such as our Marketing AI product, or build custom apps on top of the Pulze Platform.  We are a VC Funded, early stage startup based in San Francisco.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CompletionRequestPayload;
import com.konfigthis.client.model.PulzeEngineResponseCompletion;
import com.konfigthis.client.model.RoleContentChatChoice;
import com.konfigthis.client.model.ToolFunction;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CompletionsApi
 */
@Disabled
public class CompletionsApiTest {

    private static CompletionsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new CompletionsApi(apiClient);
    }

    /**
     * Completions
     *
     * Perform a text Completion request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void performTextRequestTest() throws ApiException {
        Integer bestOf = null;
        Integer false = null;
        Double frequencyPenalty = null;
        Object logitBias = null;
        Integer logprobs = null;
        Integer maxTokens = null;
        List<RoleContentChatChoice> messages = null;
        String model = null;
        Double presencePenalty = null;
        Object prompt = null;
        Object stop = null;
        Boolean stream = null;
        String suffix = null;
        Double temperature = null;
        Object toolChoice = null;
        List<ToolFunction> tools = null;
        Double topP = null;
        PulzeEngineResponseCompletion response = api.performTextRequest()
                .bestOf(bestOf)
                .false(false)
                .frequencyPenalty(frequencyPenalty)
                .logitBias(logitBias)
                .logprobs(logprobs)
                .maxTokens(maxTokens)
                .messages(messages)
                .model(model)
                .presencePenalty(presencePenalty)
                .prompt(prompt)
                .stop(stop)
                .stream(stream)
                .suffix(suffix)
                .temperature(temperature)
                .toolChoice(toolChoice)
                .tools(tools)
                .topP(topP)
                .execute();
        // TODO: test validations
    }

}
